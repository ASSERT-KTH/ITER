bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.var);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.depends.get(otherDef.var);	  Definition    rValue    =    def.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
2	[BUG]  [BUGGY]  Definition  rValue  =  other.depends.get(var);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  other.depends.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  other.depends.get(var);	  Definition    rValue    =    def.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
3	[BUG]  [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.jsScope);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.depends.get(otherDef.jsScope);	  Definition    rValue    =    def.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
4	[BUG]  [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.name);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.depends.get(otherDef.name);	  Definition    rValue    =    def.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
5	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(0);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  other.depends.get(0);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(0);	  Node    rValue    =    other.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
6	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(var)+  1;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  other.depends.get(var)+  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(var)+  1;	  Node    rValue    =    other.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
7	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(var,  name);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  other.depends.get(var,  name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(var,  name);	  Node    rValue    =    other.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
8	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(var  +  1);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  other.depends.get(var  +  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(var  +  1);	  Node    rValue    =    other.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
9	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(var,  null);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  other.depends.get(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(var,  null);	  Node    rValue    =    other.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
10	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));	  def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.jsScope));	  def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.jsScope));	  def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  var.scope));	  def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  escaped);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  escaped);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  escaped);	  def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
15	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(otherDef.depends)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(otherDef.depends)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.get(otherDef.depends)));	  def.reachingDef.put(other,    new    Definition(var.get(otherDef.depends)));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
16	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(0);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(0);  compiler.reportCodeChange();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(0);  compiler.reportCodeChange();	  Definition    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
17	[BUG]  [BUGGY]  Defined  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Defined  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Defined  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();	  Definition    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
18	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  otherDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef);	  def.reachingDef.put(var,    otherDef);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  var  =  otherDef.reachingDef.get(var);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.reachingDef.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.reachingDef.get(var);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
20	[BUG]  [BUGGY]  var  =  other.depends.get(var);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  other.depends.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  other.depends.get(var);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
21	[BUG]  [BUGGY]  var  =  otherDef.depends.get(0);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.depends.get(0);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.depends.get(0);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
22	[BUG]  [BUGGY]  var  =  otherDef.depends.get(var)+  1;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.depends.get(var)+  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.depends.get(var)+  1;	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
23	[BUG]  [BUGGY]  var  =  otherDef.depends.get(var  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.depends.get(var  +  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.depends.get(var  +  1);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
24	[BUG]  [BUGGY]  Def.reachingDef.put(other,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(other,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(other,  new  MustDef(otherDef.depends));	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
25	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
26	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.jsScope));	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
27	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.get(other)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(definition.get(other)));	  def.reachingDef.put(var,    new    Definition(otherDef.get(var)));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
28	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope),  jsScope);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope),  jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope),  jsScope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    jsScope);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
29	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.scope);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.scope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.scope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    jsScope);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
30	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  jsScope);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends),  jsScope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    jsScope);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
31	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope),  otherDef.depends);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope),  otherDef.depends);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    jsScope);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
32	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  other.scope);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  other.scope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  other.scope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    jsScope);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
33	[BUG]  [BUGGY]  escaped.add(otherDef);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.add(otherDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(otherDef);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
34	[BUG]  [BUGGY]  escaped.add(otherDef.depends);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.add(otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(otherDef.depends);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
35	[BUG]  [BUGGY]  escaped.add(var,  otherDef.depends);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.add(var,  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(var,  otherDef.depends);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
36	[BUG]  [BUGGY]  escaped.add(other);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.add(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(other);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
37	[BUG]  [BUGGY]  escaped.put(var,  otherDef.depends);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.put(var,  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.put(var,  otherDef.depends);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
38	[BUG]  [BUGGY]  escaped.addAll(otherDef.depends);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.addAll(otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.addAll(otherDef.depends);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
39	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.name));	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
40	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.name,  otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
41	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name),  otherDef.depends);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.name),  otherDef.depends);	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
42	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(name));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(name));	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
43	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.scope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.scope.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
44	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)+  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)+  1));	  def.reachingDef.put(var,    new    Definition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
45	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  otherDef.depends);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  otherDef.depends);	  def.reachingDef.put(var,    new    Definition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
46	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
47	[BUG]  [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  new  MustDef(otherDef.jsScope));	  def.reachingDef.put(other,    new    MustDef(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
48	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.jsScope),  var);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.jsScope),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.jsScope),  var);	  def.reachingDef.put(other,    new    MustDef(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)+  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)+  1));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
50	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(var)+  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(var.get(var)+  1));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
51	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(var)+  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.depends.get(var)+  1));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
52	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(var)+  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.get(var)+  1));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
53	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(0);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(0);  compiler.reportCodeChange();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(0);  compiler.reportCodeChange();	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
54	[BUG]  [BUGGY]  Node  rValue  =  otherDef.reachingDef.get(var);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.reachingDef.get(var);  compiler.reportCodeChange();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.reachingDef.get(var);  compiler.reportCodeChange();	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
55	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(0);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(0);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(0);	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
56	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(var);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  other.depends.get(var);  compiler.reportCodeChange();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(var);  compiler.reportCodeChange();	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
57	[BUG]  [BUGGY]  definition.reachingDef.put(var,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  new  Definition(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  new  Definition(otherDef.depends));	  def.reachingDef.put(otherDef.var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
58	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(definition.depends));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(definition.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(definition.depends));	  def.reachingDef.put(otherDef.var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
59	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  var);	  def.reachingDef.put(otherDef.var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
60	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
61	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var.scope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var.scope));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
62	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
63	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(1);	  Definition    rValue    =    otherDef.depends.get(0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
64	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).cloneTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).cloneTree();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(0).cloneTree();	  Definition    rValue    =    otherDef.depends.get(0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
65	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).toString();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).toString();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(0).toString();	  Definition    rValue    =    otherDef.depends.get(0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
66	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(2);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(2);	  Definition    rValue    =    otherDef.depends.get(0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
67	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(0)  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(0)  +  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(0)  +  1;	  Definition    rValue    =    otherDef.depends.get(0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
68	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
69	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  definition);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  definition);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  definition);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
70	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  node);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  node);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
71	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.jsScope);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.jsScope);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
72	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  this);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  this);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  this);	  Definition    rValue    =    otherDef.depends.get(var,    null);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
73	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  node);	  Definition    rValue    =    otherDef.depends.get(var,    null);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
74	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  def);	  Definition    rValue    =    otherDef.depends.get(var,    null);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
75	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null  +  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  null  +  1);	  Definition    rValue    =    otherDef.depends.get(var,    null);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
76	[BUG]  [BUGGY]  def.reachingDef.put(other,  other);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  other);	  def.reachingDef.put(var,    other);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
77	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(2)));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(2)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(2)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
78	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)),  name);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)),  name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)),  name);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
79	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends);	  Definition    rValue    =    def.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
80	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.size());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.size());  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.size());	  Definition    rValue    =    def.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
81	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(other);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(other);	  Definition    rValue    =    def.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
82	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.get(var));	  Definition    rValue    =    def.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
83	[BUG]  [BUGGY]  Def.ReachingDef.put(other,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(other,  new  Definition(otherDef.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(other,  new  Definition(otherDef.depends.get(var)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
84	[BUG]  [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.reachingDef.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.reachingDef.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(var,  new  Definition(otherDef.reachingDef.get(var)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
85	[BUG]  [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.scope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(var,  new  Definition(otherDef.scope.get(var)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
86	[BUG]  [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(0)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(0)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
87	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  2;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  2;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)+  2;	  Definition    rValue    =    otherDef.depends.get(var)+    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
88	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)/  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)/  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)/  1;	  Definition    rValue    =    otherDef.depends.get(var)+    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
89	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  3;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  3;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)+  3;	  Definition    rValue    =    otherDef.depends.get(var)+    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
90	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)-  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)-  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)-  1;	  Definition    rValue    =    otherDef.depends.get(var)+    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
91	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  4;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  4;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)+  4;	  Definition    rValue    =    otherDef.depends.get(var)+    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
92	[BUG]  [BUGGY]  Node  rValue  =  otherDef.reachingDef.get(var);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.reachingDef.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.reachingDef.get(var);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
93	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var)+  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var)+  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var)+  1;	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
94	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var,  name);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var,  name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var,  name);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
95	[BUG]  [BUGGY]  Node  rValue  =  otherDef.get(var);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.get(var);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
96	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
97	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  other.scope));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  other.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  other.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
98	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  other.scope));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  other.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  other.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
99	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  jsScope));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  jsScope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
100	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  jsScope));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  jsScope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
101	[BUG]  [BUGGY]  Def.reachingDef.put(var,  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  null);	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
102	[BUG]  [BUGGY]  Definition  otherDef  =  other.depends.get(var);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  other.depends.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  other.depends.get(var);	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
103	[BUG]  [BUGGY]  Definition  otherDef  =  other.reachingDef.get(var);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  other.reachingDef.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  other.reachingDef.get(var);	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
104	[BUG]  [BUGGY]  Definition  otherDef  =  other.getDefinition();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  other.getDefinition();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  other.getDefinition();	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
105	[BUG]  [BUGGY]  Definition  otherDef  =  other.definition;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  other.definition;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  other.definition;	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
106	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(node));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(node));	  def.reachingDef.put(var,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
107	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
108	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)+  1));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)+  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
109	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  2));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  2));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  2));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
110	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0)+  1));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0)+  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
111	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  3));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  3));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  3));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
112	[BUG]  [BUGGY]  Definition  rValue  =  elseDef.depends.get(var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  elseDef.depends.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  elseDef.depends.get(var);	  Definition    rValue    =    otherDef.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
113	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.get(var);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.get(var);	  Definition    rValue    =    otherDef.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
114	[BUG]  [BUGGY]  Def  rValue  =  otherDef.depends.get(var);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def  rValue  =  otherDef.depends.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def  rValue  =  otherDef.depends.get(var);	  Definition    rValue    =    otherDef.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
115	[BUG]  [BUGGY]  def.reachingDef.put(other,  var.definition);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  var.definition);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  var.definition);	  def.reachingDef.put(var,    otherDef.definition);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
116	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.definition);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  otherDef.definition);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.definition);	  def.reachingDef.put(var,    otherDef.definition);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
117	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.definition));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.definition));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.definition));	  def.reachingDef.put(var,    otherDef.definition);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
118	[BUG]  [BUGGY]  definition.reachingDef.put(var,  otherDef.node);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  otherDef.node);	  def.reachingDef.put(other,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
119	[BUG]  [BUGGY]  Def.reachingDef.put(var,  otherDef.node);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  otherDef.node);	  def.reachingDef.put(other,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
120	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  rValue);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  rValue);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends),  rValue);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    rValue);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
121	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(rValue),  otherDef.depends);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(rValue),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(rValue),  otherDef.depends);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    rValue);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
122	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  rValue));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  rValue));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends,  rValue));	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    rValue);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
123	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  rValue);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  rValue);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  rValue);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    rValue);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
124	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  var);	  def.reachingDef.put(otherDef.var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
125	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  false);	  def.reachingDef.put(otherDef.var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
126	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  null);	  def.reachingDef.put(otherDef.var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
127	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
128	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)+  1));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)+  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
129	[BUG]  [BUGGY]  def.reachingDef.put(other.var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other.var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other.var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
130	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
131	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
132	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
133	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
134	[BUG]  [BUGGY]  definition.reachingDef.put(var,  otherDef.depends);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  otherDef.depends);	  def.reachingDef.put(other,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
135	[BUG]  [BUGGY]  Def.reachingDef.put(var,  otherDef.depends);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  otherDef.depends);	  def.reachingDef.put(other,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
136	[BUG]  [BUGGY]  def.reachingDef.putAll(otherDef.depends);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.putAll(otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.putAll(otherDef.depends);	  def.reachingDef.put(other,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
137	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  var);	  def.reachingDef.put(otherDef,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
138	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  false);	  def.reachingDef.put(otherDef,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
139	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  null);	  def.reachingDef.put(otherDef,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
140	[BUG]  [BUGGY]  Def  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
141	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.reachingDef);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.reachingDef);  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.reachingDef);  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
142	[BUG]  [BUGGY]  Def  r  =  new  Def(otherDef.depends);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def  r  =  new  Def(otherDef.depends);  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def  r  =  new  Def(otherDef.depends);  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
143	[BUG]  [BUGGY]  Definition  r  =  new  Definition(other.depends);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(other.depends);  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(other.depends);  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
144	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  rValue);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  rValue);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  rValue);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
145	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var.scope));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
146	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  name));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
147	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
148	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  name);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  name);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
149	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  false);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
150	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends),  true);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
151	[BUG]  [BUGGY]  definition.reachingDef.put(other,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(other,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(other,  new  MustDef(otherDef.depends));	  definition.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
152	[BUG]  [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  new  MustDef(otherDef.depends,  name));	  definition.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
153	[BUG]  [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  new  MustDef(otherDef.depends,  var.scope));	  definition.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
154	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  new  MustDef(def.depends));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  new  MustDef(def.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  new  MustDef(def.depends));	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
155	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  new  MustDef(otherDef.depends));	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
156	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  name));	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
157	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  var.scope));	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
158	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.get(var,  new  MustDef(def.depends));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.get(var,  new  MustDef(def.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.get(var,  new  MustDef(def.depends));	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
159	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends),  name);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends),  name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends),  name);	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
160	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(definition.depends.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(definition.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(definition.depends.get(var)));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
161	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.depends.get(other)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.depends.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(definition.depends.get(other)));	  def.reachingDef.put(other,    new    Definition(definition.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
162	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.depends.get(otherDef)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.depends.get(otherDef)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(definition.depends.get(otherDef)));	  def.reachingDef.put(other,    new    Definition(definition.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
163	[BUG]  [BUGGY]  definition.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));	  def.reachingDef.put(other,    new    Definition(definition.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
164	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(var));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(var));	  def.reachingDef.put(otherDef,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
165	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.depends));	  def.reachingDef.put(otherDef,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
166	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.var));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.var));	  def.reachingDef.put(otherDef,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
167	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
168	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.name));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
169	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  escaped));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  escaped));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  escaped));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
170	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name  +  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name  +  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name  +  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
171	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name),  escaped);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name),  escaped);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name),  escaped);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
172	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  otherDef.jsScope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
173	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  true);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
174	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  false);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
175	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  true);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
176	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  true);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
177	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.definition.get(var)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.definition.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.definition.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
178	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.get(var)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
179	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
180	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
181	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
182	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
183	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1),  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
184	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  definition);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  definition);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  definition);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
185	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  name));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  name));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
186	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  name);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  name);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
187	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  var.scope));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  var.scope));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
188	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(1)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(1)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(1)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
189	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  null));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  null));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	41	None	replace
190	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(2)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(2)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(2)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
191	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.get(1)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.get(1)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope.get(1)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
192	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(other.depends));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(other.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(other.depends));	  def.reachingDef.put(other,    new    MustDef(other.depends));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
193	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends,  var.scope));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(other.depends,  var.scope));	  def.reachingDef.put(other,    new    MustDef(other.depends));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
194	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends),  var);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(other.depends),  var);	  def.reachingDef.put(other,    new    MustDef(other.depends));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
195	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends,  var));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(other.depends,  var));	  def.reachingDef.put(other,    new    MustDef(other.depends));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
196	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.jsScope));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(other.jsScope));	  def.reachingDef.put(other,    new    MustDef(other.depends));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
197	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  null);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
198	[BUG]  [BUGGY]  def.reachingDef.put(node,  new  MustDef(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(node,  new  MustDef(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(node,  new  MustDef(otherDef.depends),  null);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
199	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  null);	  Definition    rValue    =    otherDef.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
200	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  name);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  name);	  Definition    rValue    =    otherDef.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
201	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  false);	  Definition    rValue    =    otherDef.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
202	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends);	  Definition    rValue    =    otherDef.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
203	[BUG]  [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
204	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
205	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
206	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
207	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends  +  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends  +  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends    +    1));    	non-compiled	[CE]  <identifier>  expected	86	None	replace
208	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  /  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  /  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends  /  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends    +    1));    	non-compiled	[CE]  <identifier>  expected	86	None	replace
209	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends[0]  +  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends[0]  +  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends[0]  +  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends    +    1));    	non-compiled	[CE]  <identifier>  expected	86	None	replace
210	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  *  1));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  *  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends  *  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends    +    1));    	non-compiled	[CE]  <identifier>  expected	86	None	replace
211	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends),  var);	  def.reachingDef.put(other,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	29	None	replace
212	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(var));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(var));	  def.reachingDef.put(other,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	29	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Preconditions.checkState(otherDef.depends.contains(var));	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)||  otherDef.depends.contains(var))  {  continue;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)||  otherDef.depends.contains(var))  {  continue;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Preconditions.checkState(otherDef.depends.contains(var)||  otherDef.depends.contains(var))  {  continue;	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
215	[BUG]  [BUGGY]  Context.checkState(otherDef.depends.contains(var));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Context.checkState(otherDef.depends.contains(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Context.checkState(otherDef.depends.contains(var));	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)  ==  false,  otherDef.depends.contains(var))  {  continue;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)  ==  false,  otherDef.depends.contains(var))  {  continue;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Preconditions.checkState(otherDef.depends.contains(var)  ==  false,  otherDef.depends.contains(var))  {  continue;	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
217	[BUG]  [BUGGY]  Node  rValue  =  otherDef.getRValue();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.getRValue();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.getRValue();	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)  ==  false,  otherDef.depends.contains(var));  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)  ==  false,  otherDef.depends.contains(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Preconditions.checkState(otherDef.depends.contains(var)  ==  false,  otherDef.depends.contains(var));	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)  ==  false);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)  ==  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Preconditions.checkState(otherDef.depends.contains(var)  ==  false);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
220	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(node));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(node));	  def.reachingDef.put(other,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
221	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.node));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.node));	  def.reachingDef.put(other,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
222	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
223	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  escaped);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  escaped);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  escaped);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
224	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.jsScope);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.jsScope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
225	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  definition);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  definition);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  definition);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
226	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.node);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.node);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
227	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(def);	  Definition    rValue    =    def.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
228	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(desc);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(desc);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(desc);	  Definition    rValue    =    def.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
229	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(node);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(node);	  Definition    rValue    =    def.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
230	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(false);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(false);	  Definition    rValue    =    def.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
231	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0),  var.scope));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0),  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0),  var.scope));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
232	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0),  var));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0),  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0),  var));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
233	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(0)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(0)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(var.get(0)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
234	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
235	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  var));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
236	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.node));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.node));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
237	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  null));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  null));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
238	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
239	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
240	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
241	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  var);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
242	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1),  def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
243	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
244	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  var);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
245	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef.jsScope);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef.jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef.jsScope);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
246	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef.node);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  otherDef.node);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
247	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.reachingDef.get(var));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.reachingDef.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.reachingDef.get(var));	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
248	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(0));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(0));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends.get(0));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
249	[BUG]  [BUGGY]  Definition  r  =  new  Definition(other.depends.get(0));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(other.depends.get(0));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(other.depends.get(0));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
250	[BUG]  [BUGGY]  Def  r  =  new  Definition(otherDef.depends.get(0));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def  r  =  new  Definition(otherDef.depends.get(0));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def  r  =  new  Definition(otherDef.depends.get(0));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
251	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.get(var));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.get(var));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.get(var));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
252	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  2));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  2));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  2));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
253	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  3));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  3));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  3));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
254	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.get(var)+  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.get(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.get(var)+  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
255	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.get(var)));	  def.reachingDef.put(other,    new    Definition(otherDef.get(var)));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
256	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.get(var)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.get(var)));	  def.reachingDef.put(other,    new    Definition(otherDef.get(var)));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
257	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  var);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
258	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  jsScope);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  jsScope);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
259	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.node);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.node);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
260	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.jsScope));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
261	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  otherDef.depends);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  otherDef.depends);	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
262	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(node.jsScope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(node.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(node.jsScope));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
263	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  true);	  Definition    rValue    =    otherDef.depends.get(var,    false);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
264	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  false)+  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  false)+  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  false)+  1;	  Definition    rValue    =    otherDef.depends.get(var,    false);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
265	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  false));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  false));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  false));	  Definition    rValue    =    otherDef.depends.get(var,    false);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
266	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.reachingDef);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  otherDef.reachingDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.reachingDef);	  def.reachingDef.put(var,    otherDef.reachingDef);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
267	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    escaped);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
268	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  escaped));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  escaped));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  escaped));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    escaped);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
269	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
270	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  definition);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  definition);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  definition);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
271	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.definition.get(var)),  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.definition.get(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.definition.get(var)),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
272	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.get(var)),  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.get(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.get(var)),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
273	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  2);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var  +  2);	  Definition    rValue    =    otherDef.depends.get(var    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
274	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  3);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  3);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var  +  3);	  Definition    rValue    =    otherDef.depends.get(var    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
275	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  4);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  4);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var  +  4);	  Definition    rValue    =    otherDef.depends.get(var    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
276	[BUG]  [BUGGY]  if(otherDef.depends!=  null)  {  if(otherDef.depends  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends!=  null)  {  if(otherDef.depends  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends!=  null)  {  if(otherDef.depends  ==  null  ||  otherDef.depends.contains(var))  {  return;  }	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
277	[BUG]  [BUGGY]  if(otherDef.depends  ==  null)  {  if(otherDef.depends  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends  ==  null)  {  if(otherDef.depends  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends  ==  null)  {  if(otherDef.depends  ==  null  ||  otherDef.depends.contains(var))  {  return;  }	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
278	[BUG]  [BUGGY]  if(otherDef.depends!=  null)  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends!=  null)  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends!=  null)  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  return;  }	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
279	[BUG]  [BUGGY]  ||  otherDef.depends.contains(var))  {  return;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  ||  otherDef.depends.contains(var))  {  return;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	||  otherDef.depends.contains(var))  {  return;	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
280	[BUG]  [BUGGY]  if(otherDef.depends!=  null  ||  otherDef.depends.contains(var))  {  return;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends!=  null  ||  otherDef.depends.contains(var))  {  return;  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends!=  null  ||  otherDef.depends.contains(var))  {  return;  }	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
281	[BUG]  [BUGGY]  if(otherDef.depends  ==  null)  {  if(otherDef.depends!=  null  ||  otherDef.depends.contains(var))  {  return;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends  ==  null)  {  if(otherDef.depends!=  null  ||  otherDef.depends.contains(var))  {  return;  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends  ==  null)  {  if(otherDef.depends!=  null  ||  otherDef.depends.contains(var))  {  return;  }	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
282	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name  +  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name  +  1);	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
283	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name  -  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name  -  1);	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
284	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name)+  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name)+  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name)+  1;	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
285	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name).toLowerCase();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name).toLowerCase();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name).toLowerCase();	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
286	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name;	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
287	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.jsScope.getVar(var)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.jsScope.getVar(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.jsScope.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
288	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.getVar(var)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.getVar(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
289	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.getVar(var)));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.getVar(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
290	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)+  1));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)+  1));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
291	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)),  otherDef.depends);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)),  otherDef.depends);	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
292	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  true);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
293	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends),  false);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
294	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends),  true);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
295	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  true);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
296	[BUG]  [BUGGY]  Definition  otherDef  =  def.reachingDef.get(var);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  def.reachingDef.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  def.reachingDef.get(var);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
297	[BUG]  [BUGGY]  Definition  otherDef  =  def.reachingDef.get(other);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  def.reachingDef.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  def.reachingDef.get(other);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
298	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  otherDef.depends.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.depends.get(var));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
299	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.depends.get(0));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  otherDef.depends.get(0));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.depends.get(0));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
300	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.reachingDef.get(var));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  otherDef.reachingDef.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.reachingDef.get(var));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
301	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.scope.get(var));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  otherDef.scope.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.scope.get(var));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
302	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.depends.get(other));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  otherDef.depends.get(other));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.depends.get(other));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
303	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.depends.get(0));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  otherDef.depends.get(0));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.depends.get(0));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
304	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.default);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  otherDef.default);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.default);	  def.reachingDef.put(var,    otherDef.default);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
305	[BUG]  [BUGGY]  def.reachingDef.put(other,  var.default);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  var.default);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  var.default);	  def.reachingDef.put(var,    otherDef.default);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
306	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.default));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.default));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.default));	  def.reachingDef.put(var,    otherDef.default);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
307	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(var)),  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.depends.get(var)),  null);	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
308	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef.depends));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
309	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  var));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
310	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends,  var.scope));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
311	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  otherDef));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
312	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(var,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(var,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(var,  otherDef.depends));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
313	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends,  otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
314	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends,  var.scope));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
315	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
316	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
317	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends,  var.scope));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
318	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends,  var));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
319	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(other)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.depends.get(other)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
320	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(alt)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(alt)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(alt)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
321	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)/  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)/  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)/  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
322	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)/  2));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)/  2));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)/  2));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
323	[BUG]  [BUGGY]  if(otherDef.depends!=  null)  {  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends!=  null)  {  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends!=  null)  {  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  }	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
324	[BUG]  [BUGGY]  Def.reachingDef.put(otherDef.var,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(otherDef.var,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(otherDef.var,  new  MustDef(otherDef.depends));	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
325	[BUG]  [BUGGY]  Def.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
326	[BUG]  [BUGGY]  if(otherDef.depends!=  null)  {  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  }  else  {  def.reachingDef.put(other,  new  MustDef(otherDef.depends));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends!=  null)  {  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  }  else  {  def.reachingDef.put(other,  new  MustDef(otherDef.depends));  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends!=  null)  {  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  }  else  {  def.reachingDef.put(other,  new  MustDef(otherDef.depends));  }	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
327	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
328	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
329	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  definition);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  definition);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  definition);	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
330	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  1),  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  1),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  1),  null);	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
331	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  this);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  this);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  this);	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
332	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.get(node)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.get(node)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.get(node)));	  def.reachingDef.put(var,    new    Definition(otherDef.get(var)));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
333	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.name));	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
334	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.name));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.name));	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
335	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.name,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.name,  new  Definition(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.name,  new  Definition(otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
336	[BUG]  [BUGGY]  def.reachingDef.put(node,  new  Definition(otherDef.node));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(node,  new  Definition(otherDef.node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(node,  new  Definition(otherDef.node));	  def.reachingDef.put(other,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
337	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition));	  def.reachingDef.put(other,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
338	[BUG]  [BUGGY]  Definition  rValue  =  elseDef.depends.get(var,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  elseDef.depends.get(var,  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  elseDef.depends.get(var,  true);	  Definition    rValue    =    otherDef.depends.get(var,    false);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
339	[BUG]  [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.node);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.depends.get(otherDef.node);	  Definition    rValue    =    def.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
340	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(2)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(2)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(2)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  otherDef,  this);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  NodeTraversal.traverse(compiler,  otherDef,  this);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	NodeTraversal.traverse(compiler,  otherDef,  this);	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
342	[BUG]  [BUGGY]  definition.reachingDef.put(var,  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  null);	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  otherDef,  new  IllegalArgumentException( " "));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  NodeTraversal.traverse(compiler,  otherDef,  new  IllegalArgumentException( " "));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	NodeTraversal.traverse(compiler,  otherDef,  new  IllegalArgumentException( " "));	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
344	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends  +  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.depends  +  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends    +    1));    	non-compiled	[CE]  <identifier>  expected	86	None	replace
345	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends  +  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends  +  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends  +  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends    +    1));    	non-compiled	[CE]  <identifier>  expected	86	None	replace
346	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  false);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
347	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  false);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
348	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(2)));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(2)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(2)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
349	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1),  var.scope));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1),  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1),  var.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
350	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends,  name));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
351	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  null));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  null));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
352	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  false));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends,  false));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends,  false));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends,    var));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
353	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(name);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(name);  compiler.reportCodeChange();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(name);  compiler.reportCodeChange();	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
354	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(otherDef);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(otherDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(otherDef);	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
355	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(otherDef,  rValue);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(otherDef,  rValue);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(otherDef,  rValue);	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
356	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.params.get(var)));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.params.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.params.get(var)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
357	[BUG]  [BUGGY]  Def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
358	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef.var)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef.var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef.var)));	  def.reachingDef.put(other,    new    Definition(definition.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
359	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef.name)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef.name)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef.name)));	  def.reachingDef.put(other,    new    Definition(definition.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
360	[BUG]  [BUGGY]  var  =  otherDef.depends.get(other);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.depends.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.depends.get(other);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
361	[BUG]  [BUGGY]  var  =  otherDef.depends.get(var,  null);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.depends.get(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.depends.get(var,  null);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
362	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)||  otherDef.depends.contains(var)));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
363	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var),  null));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var),  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var),  null));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
364	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.getVar(var)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.getVar(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
365	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.getVar(var)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.getVar(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
366	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.node.getVar(var)));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.node.getVar(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.node.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
367	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)+  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)+  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
368	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.definition));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.definition));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.definition));	  def.reachingDef.put(var,    new    Definition(otherDef.definition));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
369	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.definition));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.definition));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.definition));	  def.reachingDef.put(var,    new    Definition(otherDef.definition));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
370	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.definition));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.definition));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.definition));	  def.reachingDef.put(var,    new    Definition(otherDef.definition));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
371	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.params.get(var)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.params.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.params.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
372	[BUG]  [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.scope.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(other,  new  Definition(otherDef.scope.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
373	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(name);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  other.depends.get(name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(name);	  Node    rValue    =    other.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
374	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.scope));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
375	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  null));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends,  null));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
376	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
377	[BUG]  [BUGGY]  def.reachingDef.put(node,  new  IllegalArgumentDefinition(otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(node,  new  IllegalArgumentDefinition(otherDef.depends.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(node,  new  IllegalArgumentDefinition(otherDef.depends.get(var));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
378	[BUG]  [BUGGY]  def.reachingDef.put(node,  new  MustDef(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(node,  new  MustDef(otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(node,  new  MustDef(otherDef.jsScope));	  def.reachingDef.put(other,    new    MustDef(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
379	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
380	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.depends,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.depends,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.depends,  new  IllegalArgumentDefinition(otherDef.depends),  false);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
381	[BUG]  [BUGGY]  Def.reachingDef.put(node,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(node,  new  Definition(otherDef.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(node,  new  Definition(otherDef.depends.get(var)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
382	[BUG]  [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(other)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(other)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
383	[BUG]  [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
384	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(other)));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(other)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
385	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends)&&  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends)&&  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends)&&  false);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
386	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  null);	  Definition    rValue    =    def.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
387	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  1L;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  1L;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)+  1L;	  Definition    rValue    =    otherDef.depends.get(var)+    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
388	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var,  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var,  null);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
389	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var  +  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var  +  1);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
390	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var,  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var,  false);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
391	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(name);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(name);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
392	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  var);	  def.reachingDef.put(otherDef,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
393	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.depends),  null);	  def.reachingDef.put(otherDef,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
394	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.jsScope));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
395	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends)&&  otherDef.depends.contains(var))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends)&&  otherDef.depends.contains(var))  {  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends)&&  otherDef.depends.contains(var))  {	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
396	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  *  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  *  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var  *  1);	  Definition    rValue    =    otherDef.depends.get(var    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
397	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  /  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  /  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var  /  1);	  Definition    rValue    =    otherDef.depends.get(var    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
398	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  varValue);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends),  varValue);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends),  varValue);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    rValue);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
399	[BUG]  [BUGGY]  Def.ReachingDef.put(node,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(node,  new  Definition(otherDef.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(node,  new  Definition(otherDef.depends.get(var)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
400	[BUG]  [BUGGY]  Def.ReachingDef.put(otherDef,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(otherDef,  new  Definition(otherDef.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(otherDef,  new  Definition(otherDef.depends.get(var)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
401	[BUG]  [BUGGY]  Def.ReachingDef.put(other,  new  Definition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(other,  new  Definition(otherDef.depends.get(0)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(other,  new  Definition(otherDef.depends.get(0)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
402	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(definition));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(definition));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(definition));	  def.reachingDef.put(otherDef.var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
403	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(otherDef.depends)+  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(otherDef.depends)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(var.get(otherDef.depends)+  1));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
404	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  2));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  2));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  2));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
405	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)/  2));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)/  2));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)/  2));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
406	[BUG]  [BUGGY]  escaped.add(node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.add(node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(node);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
407	[BUG]  [BUGGY]  escaped.add(otherDef.depend);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.add(otherDef.depend);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(otherDef.depend);	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
408	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  null);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
409	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(name));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(name));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends.get(name));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
410	[BUG]  [BUGGY]  Definition  r  =  new  Definition(def.depends.get(other));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(def.depends.get(other));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(def.depends.get(other));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
411	[BUG]  [BUGGY]  Def  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
412	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
413	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
414	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.depends,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.depends,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.depends,  new  IllegalArgumentDefinition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
415	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.name,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.name,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.name,  new  IllegalArgumentDefinition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
416	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  name  +  1));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  name  +  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  name  +  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
417	[BUG]  [BUGGY]  if(otherDef.depends!=  null)  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  if(otherDef.depends!=  null)  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  continue;  }  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends!=  null)  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  continue;  }	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
418	[BUG]  [BUGGY]  DefinedDefinition  otherDef  =  def.reachingDef.get(other);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  DefinedDefinition  otherDef  =  def.reachingDef.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	DefinedDefinition  otherDef  =  def.reachingDef.get(other);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
419	[BUG]  [BUGGY]  Definition  otherDef  =  otherDef.getDefinitions();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  otherDef.getDefinitions();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  otherDef.getDefinitions();	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
420	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.node));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.node));	  def.reachingDef.put(var,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
421	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.node));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.node));	  def.reachingDef.put(var,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
422	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.node));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.node));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.depends,  new  Definition(otherDef.node));	  def.reachingDef.put(var,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
423	[BUG]  [BUGGY]  Definition  definition  =  new  MustDef(otherDef.depends);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  definition  =  new  MustDef(otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  definition  =  new  MustDef(otherDef.depends);	  definition.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
424	[BUG]  [BUGGY]  definition.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  definition.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));	  definition.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
425	[BUG]  [BUGGY]  Definition  definition  =  new  MustDef(otherDef.depends)?  def.reachingDef.get(var):  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  definition  =  new  MustDef(otherDef.depends)?  def.reachingDef.get(var):  null;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  definition  =  new  MustDef(otherDef.depends)?  def.reachingDef.get(var):  null;	  definition.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
426	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(other);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  def  =  def.reachingDef.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  def  =  def.reachingDef.get(other);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
427	[BUG]  [BUGGY]  def.reachingDef.put(other,  var.depends.get(other));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  var.depends.get(other));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  var.depends.get(other));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
428	[BUG]  [BUGGY]  def.reachingDef.put(other,  var.get(other));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  var.get(other));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  var.get(other));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
429	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.depends.get(other));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  otherDef.depends.get(other));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.depends.get(other));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
430	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(otherDef)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(otherDef)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(otherDef)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
431	[BUG]  [BUGGY]  Definition  otherDef  =  otherDef.getDefinition();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  otherDef  =  otherDef.getDefinition();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  otherDef  =  otherDef.getDefinition();	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
432	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  null);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
433	[BUG]  [BUGGY]  DefineredDef  r  =  new  DefineredDef(otherDef.depends);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  DefineredDef  r  =  new  DefineredDef(otherDef.depends);  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	DefineredDef  r  =  new  DefineredDef(otherDef.depends);  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
434	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  this);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  this);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  this);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
435	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  node);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  node);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
436	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  MustDef(otherDef.depends));	  def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
437	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    escaped);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
438	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    escaped);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
439	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends)+  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends)+  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends)+  1);	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
440	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(other,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(other,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(other,  new  MustDef(otherDef.depends));	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
441	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  var.name));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  var.name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends,  var.name));	  Definition    rValue    =    def.reachingDef.get(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	88	None	replace
442	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends,  var));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
443	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  null));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends,  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends,  null));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
444	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends,  var));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
445	[BUG]  [BUGGY]  Definition  rValue  =  other.depends.get(def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  other.depends.get(def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  other.depends.get(def);	  Definition    rValue    =    def.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
446	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
447	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends,  var));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
448	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.depends.get(otherDef)));	  def.reachingDef.put(other,    new    Definition(otherDef.get(var)));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
449	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(other)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.get(other)));	  def.reachingDef.put(other,    new    Definition(otherDef.get(var)));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
450	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(name,  var);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(name,  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(name,  var);	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
451	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));	  def.reachingDef.put(otherDef,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
452	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  IllegalArgumentDefinition(otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  IllegalArgumentDefinition(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  IllegalArgumentDefinition(otherDef.depends));	  def.reachingDef.put(otherDef,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
453	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)),  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
454	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)),  var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)),  var);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
455	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  Definition(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  Definition(otherDef.depends));	  def.reachingDef.put(otherDef,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	66	None	replace
456	[BUG]  [BUGGY]  Context.checkState(otherDef.depends!=  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Context.checkState(otherDef.depends!=  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Context.checkState(otherDef.depends!=  null);	  if(otherDef.depends.contains(var))    {    if(node    ==    null)    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
457	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(def.depends.get(var)),  otherDef);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(def.depends.get(var)),  otherDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(def.depends.get(var)),  otherDef);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
458	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  otherDef);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  otherDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  otherDef);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    def);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
459	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)/  2  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)/  2  +  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)/  2  +  1;	  Definition    rValue    =    otherDef.depends.get(var)+    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
460	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  null);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
461	[BUG]  [BUGGY]  def.reachingDef.putAll(otherDef.depends,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.putAll(otherDef.depends,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.putAll(otherDef.depends,  new  MustDef(otherDef.depends));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
462	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.remove(var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.remove(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.remove(var);	  Definition    rValue    =    otherDef.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
463	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  var.scope),  rValue);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  var.scope),  rValue);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends,  var.scope),  rValue);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    rValue);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
464	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var  +  1)+  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var  +  1)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var  +  1)+  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
465	[BUG]  [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.def.depends.get(var)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.def.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(var,  new  Definition(otherDef.def.depends.get(var)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
466	[BUG]  [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.definition.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.definition.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(var,  new  Definition(otherDef.definition.get(var)));	  Def.ReachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
467	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false,  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false,  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
468	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false,  def.scope);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false,  def.scope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false,  def.scope);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
469	[BUG]  [BUGGY]  Node  varValue  =  otherDef.depends.get(var);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  varValue  =  otherDef.depends.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  varValue  =  otherDef.depends.get(var);	  Node    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
470	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(other.depends));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(other.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(other.depends));	  def.reachingDef.put(other,    new    MustDef(other.depends));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
471	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(other.depends));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(other.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(other.depends));	  def.reachingDef.put(other,    new    MustDef(other.depends));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
472	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)),  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
473	[BUG]  [BUGGY]  escaped.add(var,  otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  escaped.add(var,  otherDef.depends.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(var,  otherDef.depends.get(var));	  escaped.add(var);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
474	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)),  var);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)),  var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)),  var);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(1)));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
475	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  jsScope);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)),  jsScope);	  def.reachingDef.put(var,    new    Definition(otherDef.scope.get(var)));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
476	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null);	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
477	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
478	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  /  2));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  /  2));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends  /  2));	  def.reachingDef.put(var,    new    Definition(otherDef.depends    +    1));    	non-compiled	[CE]  <identifier>  expected	86	None	replace
479	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  otherDef.node);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  otherDef.node);	  def.reachingDef.put(other,    new    Definition(otherDef.node));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
480	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
481	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
482	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
483	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	49	None	replace
484	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  }  else  {  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  }  else  {  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  }  else  {  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
485	[BUG]  [BUGGY]  Node  r  =  otherDef.depends;  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  r  =  otherDef.depends;  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  r  =  otherDef.depends;  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
486	[BUG]  [BUGGY]  Definition  r  =  new  Definition(def.depends);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(def.depends);  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(def.depends);  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends);    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
487	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.depends);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  otherDef.depends);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
488	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var  +  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var  +  1);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
489	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends  ||  otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends  ||  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends  ||  otherDef.depends));	  def.reachingDef.put(otherDef.var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
490	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.node.get(var)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.node.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.node.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
491	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.def.depends.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.def.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.def.depends.get(var)));	  Def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
492	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope),  escaped);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope),  escaped);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope),  escaped);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    escaped);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
493	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var.scope);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var.scope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var.scope);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    escaped);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
494	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.node.getVar(var)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.node.getVar(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.node.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope.getVar(var)));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
495	[BUG]  [BUGGY]  Definition  r  =  new  Definition(def.reachingDef.get(var));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(def.reachingDef.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(def.reachingDef.get(var));	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
496	[BUG]  [BUGGY]  Definition  r  =  new  Definition(def.depends.get(var));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  new  Definition(def.depends.get(var));  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(def.depends.get(var));  def.reachingDef.put(var,  r);	  Definition    r    =    new    Definition(otherDef.depends.get(var));    def.reachingDef.put(var,    r);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
497	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  def);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
498	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  jsScope);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  jsScope);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    var);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
499	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends)&&  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends)&&  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends)&&  false);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
500	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  jsScope));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends,  jsScope));	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    jsScope);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
501	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name),  jsScope);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name),  jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.name),  jsScope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    jsScope);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
502	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  false));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  false));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0),  false));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(0)));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
503	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).getParent();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).getParent();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(0).getParent();	  Definition    rValue    =    otherDef.depends.get(0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
504	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).getName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(0).getName();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(0).getName();	  Definition    rValue    =    otherDef.depends.get(0);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
505	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope,  otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
506	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.alias,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.alias,  otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.alias,  otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	87	None	replace
507	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.indexOf(var));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.indexOf(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  otherDef.depends.indexOf(var));	  Definition    rValue    =    def.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
508	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)/  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)/  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)/  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
509	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)/  2));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)/  2));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)/  2));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
510	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
511	[BUG]  [BUGGY]  parent  ==  null  ||  otherDef.depends.contains(var))  {  return;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  parent  ==  null  ||  otherDef.depends.contains(var))  {  return;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	parent  ==  null  ||  otherDef.depends.contains(var))  {  return;	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkArgument(otherDef.depends.contains(var));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Preconditions.checkArgument(otherDef.depends.contains(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Preconditions.checkArgument(otherDef.depends.contains(var));	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	NodeTraversal.traverse(compiler,  var,  this);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  RuntimeException( " "));  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  RuntimeException( " "));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	NodeTraversal.traverse(compiler,  var,  new  RuntimeException( " "));	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    return;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
515	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.get(otherDef.depends)));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(definition.get(otherDef.depends)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(definition.get(otherDef.depends)));	  def.reachingDef.put(other,    new    Definition(var.get(otherDef.depends)));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
516	[BUG]  [BUGGY]  Node  varValue  =  other.depends.get(var);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  varValue  =  other.depends.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  varValue  =  other.depends.get(var);	  Node    rValue    =    other.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
517	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.scope));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
518	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.jsScope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    var.scope));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
519	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDebugLog( "Unknown  var: "  +  var.name);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDebugLog( "Unknown  var: "  +  var.name);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var);  compiler.addToDebugLog( "Unknown  var: "  +  var.name);	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
520	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.reportcodeChange();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.reportcodeChange();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var);  compiler.reportcodeChange();	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
521	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDebugLog( "Unknown  var: "  +  var.toString());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.addToDebugLog( "Unknown  var: "  +  var.toString());  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var);  compiler.addToDebugLog( "Unknown  var: "  +  var.toString());	  Node    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
522	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.define(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.define(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.define(var)));	  def.reachingDef.put(other,    new    Definition(otherDef.get(var)));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
523	[BUG]  [BUGGY]  def.reachingDef.put(var,  elseDef.depends);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  elseDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  elseDef.depends);	  def.reachingDef.put(other,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
524	[BUG]  [BUGGY]  def.reachingDef.add(var,  otherDef.depends);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.add(var,  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.add(var,  otherDef.depends);	  def.reachingDef.put(other,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
525	[BUG]  [BUGGY]  parent  ==  null  ||  otherDef.depends.contains(var))  {  continue;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  parent  ==  null  ||  otherDef.depends.contains(var))  {  continue;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	parent  ==  null  ||  otherDef.depends.contains(var))  {  continue;	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)||  otherDef.depends.contains(var));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Preconditions.checkState(otherDef.depends.contains(var)||  otherDef.depends.contains(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Preconditions.checkState(otherDef.depends.contains(var)||  otherDef.depends.contains(var));	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
527	[BUG]  [BUGGY]  Definition  rValue  =  definition.depends.get(other);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  definition.depends.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  definition.depends.get(other);	  def.reachingDef.put(other,    new    Definition(definition.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
528	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));	  def.reachingDef.put(other,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
529	[BUG]  [BUGGY]  Definition  r  =  def.reachingDef.get(other);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  def.reachingDef.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  def.reachingDef.get(other);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
530	[BUG]  [BUGGY]  DefinedDefinition  var  =  def.reachingDef.get(other);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  DefinedDefinition  var  =  def.reachingDef.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	DefinedDefinition  var  =  def.reachingDef.get(other);	  if(otherDef.depends.contains(var))    {    if(node    ==    null    ||    otherDef.depends.contains(var))    {    def.reachingDef.put(var,    null);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
531	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)+  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)+  1));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)+  1));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)+    1));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
532	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name,  name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name,  name));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.name,  name));	  def.reachingDef.put(var,    new    Definition(otherDef.name));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
533	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
534	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  false));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  false));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  false));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
535	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  def);	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
536	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  def));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  def));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.depends,  def));	  Def.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
537	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.node);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  otherDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  otherDef.node);	  def.reachingDef.put(other,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
538	[BUG]  [BUGGY]  def.reachingDef.put(var,  elseDef.node);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  elseDef.node);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  elseDef.node);	  def.reachingDef.put(other,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
539	[BUG]  [BUGGY]  Definition  r  =  otherDef.depends.get(var);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  r  =  otherDef.depends.get(var);  def.reachingDef.put(var,  r);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  otherDef.depends.get(var);  def.reachingDef.put(var,  r);	  def.reachingDef.put(other,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
540	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var).toString();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var).toString();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var).toString();	  Definition    rValue    =    otherDef.depends.get(var    +    1);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
541	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends),  true);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends),  true);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
542	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.depends),  false);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
543	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends)),  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends)),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends)),  false);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends),    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
544	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(rValue);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(rValue);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var);  compiler.addToDefinition(rValue);	  Definition    rValue    =    otherDef.depends.get(var);    compiler.reportCodeChange();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
545	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  otherDef);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  otherDef);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  otherDef);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
546	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null  +  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null  +  1);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
547	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  otherDef.scope);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  otherDef.scope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  otherDef.scope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
548	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends.get(other));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends.get(other));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends.get(other));	  Definition    rValue    =    otherDef.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
549	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends.get(var));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var,  def.depends.get(var));	  Definition    rValue    =    otherDef.reachingDef.get(var);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
550	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(v);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(v);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(v);	  Definition    rValue    =    def.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
551	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(fn);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(fn);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(fn);	  Definition    rValue    =    def.depends.get(other);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
552	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name).toString();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name).toString();  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name).toString();	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
553	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name)-  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name)-  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name)-  1;	  Definition    rValue    =    otherDef.depends.get(var,    name);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
554	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  var.scope));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  var.scope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  var.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
555	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  null));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  null));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  null));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
556	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  false));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  false));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  false));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
557	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name),  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
558	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  var));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name,  var));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends,    name));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
559	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.jsScope));	  def.reachingDef.put(other,    new    MustDef(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
560	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.jsScope));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.jsScope));	  def.reachingDef.put(other,    new    MustDef(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
561	[BUG]  [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(other)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(other)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
562	[BUG]  [BUGGY]  DefineredDef.put(var,  new  Definition(otherDef.depends.get(other)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  DefineredDef.put(var,  new  Definition(otherDef.depends.get(other)));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	DefineredDef.put(var,  new  Definition(otherDef.depends.get(other)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(other)));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
563	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null,  def.scope);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null,  def.scope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null,  def.scope);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
564	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null  -  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null  -  1);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
565	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null)+  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null)+  1;  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  null)+  1;	  Definition    rValue    =    otherDef.depends.get(var,    null);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
566	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null  -  1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null  -  1);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  null  -  1);	  Definition    rValue    =    otherDef.depends.get(var,    null);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
567	[BUG]  [BUGGY]  var  =  otherDef.get(var);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.get(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.get(var);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
568	[BUG]  [BUGGY]  var  =  otherDef.getVar(var);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  otherDef.getVar(var);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.getVar(var);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
569	[BUG]  [BUGGY]  var  =  def.reachingDef.get(other);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  var  =  def.reachingDef.get(other);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  def.reachingDef.get(other);	  var    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
570	[BUG]  [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.scope);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  Definition  rValue  =  def.depends.get(otherDef.scope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.depends.get(otherDef.scope);	  Definition    rValue    =    def.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
571	[BUG]  [BUGGY]  définition.reachingDef.put(var,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  définition.reachingDef.put(var,  new  MustDef(otherDef.depends));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	définition.reachingDef.put(var,  new  MustDef(otherDef.depends));	  definition.reachingDef.put(var,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
572	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.get(var));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  otherDef.get(var));  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.get(var));	  def.reachingDef.put(var,    otherDef.depends.get(var));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
573	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.depends);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.depends);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  otherDef.depends);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
574	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  this);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  this);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
575	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  def);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  def);	  def.reachingDef.put(var,    new    Definition(otherDef.depends),    null);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
576	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  jsScope);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  jsScope);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope),  jsScope);	  def.reachingDef.put(var,    new    Definition(otherDef.jsScope));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
577	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  this);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  this);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
578	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {      [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  false);  [BUGGY]      }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  false);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)),    null);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
