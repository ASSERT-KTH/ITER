bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  MustDef(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  MustDef(otherDef.depends));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends,  var));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends,  var));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends,  var));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends),  var);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  definition.reachingDef.put(var,  new  MustDef(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	definition.reachingDef.put(var,  new  MustDef(otherDef.depends));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.jsScope));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.jsScope));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  otherDef);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef);	  def.reachingDef.put(var,    null);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  def.reachingDef.put(var,  other);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  other);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  other);	  def.reachingDef.put(var,    null);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.reachingDef.get(var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.reachingDef.get(var);	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(0);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(0);	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(var)+  1;  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var)+  1;	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  name);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  name);	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(var  +  1);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var  +  1);	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  null);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  null);	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.node);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  otherDef.node);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.node);	  def.reachingDef.put(var,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.node));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.node));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.node));	  def.reachingDef.put(var,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  def.reachingDef.put(other,  otherDef.depends);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  otherDef.depends);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  otherDef.depends);	  def.reachingDef.put(var,    otherDef.node);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  false);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
20	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  escaped);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
21	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  otherDef.depends));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  var.scope));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  IllegalArgumentDefinition(otherDef.depends.get(0)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)+  1));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(1)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.scope.get(var)));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.node));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.node));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.node));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.name));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.name));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.definition));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.definition));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.definition));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  rValue);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  rValue);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  rValue);	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  var  =  otherDef.depends.get(var);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  var  =  otherDef.depends.get(var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	var  =  otherDef.depends.get(var);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  escaped.add(var);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  escaped.add(var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	escaped.add(var);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Node  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  otherDef.depends.get(var);  compiler.reportCodeChange();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  Node  rValue  =  other.depends.get(var);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Node  rValue  =  other.depends.get(var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Node  rValue  =  other.depends.get(var);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(0)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
42	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(var)));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(definition.depends.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(definition.depends.get(var)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
43	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(otherDef.depends)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(var.get(otherDef.depends)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(var.get(otherDef.depends)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
45	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.reachingDef);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  otherDef.reachingDef);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.reachingDef);	  def.reachingDef.put(var,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.definition);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  otherDef.definition);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.definition);	  def.reachingDef.put(var,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
47	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.scope.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)+  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(0)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.jsScope.getVar(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  null);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends),  null);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
52	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends),  false);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends),  false);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  Definition  rValue  =  def.depends.get(var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  def.depends.get(var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.depends.get(var);	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(var,  false);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var,  false);	  Definition    rValue    =    otherDef.depends.get(var);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  1));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  1));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)+  1));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  null);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  null);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)),  null);	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
57	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.get(var)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.get(var)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  null);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  null);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
59	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(other)));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(other)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(other)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(other)));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(other)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(other)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  Definition  rValue  =  def.depends.get(other);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  def.depends.get(other);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.depends.get(other);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(other,  new  MustDef(other.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(other.depends));	  def.reachingDef.put(var,    null);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
63	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(other);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  otherDef.depends.get(other);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(other);	  def.reachingDef.put(var,    null);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
64	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  IllegalArgumentDefinition(otherDef.depends));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
65	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  IllegalArgumentDefinition(otherDef.depends));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
66	[BUG]  [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(otherDef,  new  Definition(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef,  new  Definition(otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
67	[BUG]  [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(otherDef.var,  new  Definition(otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
68	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  null);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
69	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  false);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  false);	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
70	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(1)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.ReachingDef.put(var,  new  Definition(otherDef.depends.get(var)));	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
72	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  r);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends.get(var));  def.reachingDef.put(var,  r);	  def.reachingDef.put(other,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.default);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  otherDef.default);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.default);	  def.reachingDef.put(var,    otherDef.depends);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
74	[BUG]  [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null)  {  def.reachingDef.put(var,  null);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null)  {  def.reachingDef.put(var,  null);  }  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends.contains(var))  {  if(node  ==  null)  {  def.reachingDef.put(var,  null);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
75	[BUG]  [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  continue;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  continue;  }  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  continue;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
76	[BUG]  [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  def.reachingDef.put(var,  null);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  def.reachingDef.put(var,  null);  }  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  def.reachingDef.put(var,  null);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
77	[BUG]  [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  return;  }  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	if(otherDef.depends.contains(var))  {  if(node  ==  null  ||  otherDef.depends.contains(var))  {  return;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
78	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)),  null);	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
79	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.get(var)));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.get(var)));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.get(var)));	  def.reachingDef.put(var,    new    Definition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
80	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  otherDef.depends.get(var));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.depends.get(var));	  def.reachingDef.put(other,    var);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
81	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends),  var);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends,  name));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
83	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  def);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  def);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)),  def);	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
84	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var));	  def.reachingDef.put(var,    new    IllegalArgumentDefinition(otherDef.depends.get(var)));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
85	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  jsScope);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends),  jsScope);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends),  jsScope);	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
86	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends  +  1));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends  +  1));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
87	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  otherDef.depends));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends,  otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends,  otherDef.depends));	  def.reachingDef.put(var,    new    Definition(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
88	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var,  new  MustDef(otherDef.depends));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
89	[BUG]  [BUGGY]  Definition  rValue  =  def.reachingDef.get(var);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  rValue  =  def.reachingDef.get(var);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  def.reachingDef.get(var);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
90	[BUG]  [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Def.reachingDef.put(var,  new  MustDef(otherDef.depends));  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Def.reachingDef.put(var,  new  MustDef(otherDef.depends));	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
91	[BUG]  [BUGGY]  Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  r);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {    [BUGGY]  Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  r);  [BUGGY]    }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  r  =  new  Definition(otherDef.depends);  def.reachingDef.put(var,  r);	  def.reachingDef.put(other,    new    MustDef(otherDef.depends));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
