bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  def.reachingDef.put(var,  null);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(var,  null);  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  null);	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.depends);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(var,  otherDef.depends);  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.depends);	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends));  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends));  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends));	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var);  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  Definition  rValue  =  otherDef.depends.get(var);  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	Definition  rValue  =  otherDef.depends.get(var);	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  def.reachingDef.put(var,  otherDef.node);  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(var,  otherDef.node);  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  otherDef.node);	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  def.reachingDef.put(other,  var);  [CE]  <identifier>  expected  [FE]              AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(other,  var);  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  var);	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]    [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	  	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
8	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)));  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  Definition(otherDef.depends.get(var)));	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
9	[BUG]  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends));  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(other,  new  MustDef(otherDef.depends));  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(other,  new  MustDef(otherDef.depends));	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
10	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  Definition(otherDef.depends.get(var)));	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
11	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends));	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
12	[BUG]  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (var  ==  null  ||  var.scope  !=  jsScope)  {  return;  }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  [BUGGY]  def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));  [BUGGY]  }  }  if  (!escaped.contains(var))  {  if  (node  ==  null)  {  def.reachingDef.put(var,  null);  }  else  {  Definition  definition  =  new  Definition(node);  if  (rValue  !=  null)  {  computeDependence(definition,  rValue);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.3333333333333333	342	342	3	replace	def.reachingDef.put(var,  new  IllegalArgumentDefinition(otherDef.depends.get(var)));	def.reachingDef.put(other,  null);  	non-compiled	[CE]  <identifier>  expected	13	None	replace
