bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  [BUGGY]  if  (s.scope!=  scope)  {  [BUGGY]  return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope)  {	if  (s.scope  !=  jsScope)  {  	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  if  (s.scope!=  null  ||  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  [BUGGY]  if  (s.scope!=  null  ||  s.scope!=  jsScope)  {  [BUGGY]  return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  null  ||  s.scope!=  jsScope)  {	if  (s.scope  !=  jsScope)  {  	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  if  (jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  [BUGGY]  if  (jsScope!=  s.scope)  {  [BUGGY]  return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (jsScope!=  s.scope)  {	if  (s.scope  !=  jsScope)  {  	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  if  (s.scope  ==  scope)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  [BUGGY]  if  (s.scope  ==  scope)  {  [BUGGY]  return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope)  {	if  (s.scope  !=  jsScope)  {  	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  [BUGGY]    [BUGGY]  return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	  	if  (s.scope  !=  jsScope)  {  	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  if  (s.scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  [BUGGY]  if  (s.scope  ==  jsScope)  {  [BUGGY]  return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  jsScope)  {	if  (s.scope  !=  jsScope)  {  	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  jsScope)  {  [BUGGY]  return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope!=  jsScope)  {	if  (s.scope  !=  jsScope)  {  	non-compiled	[CE]  <identifier>  expected	5	None	replace
