bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  s.scope  ||  jsScope!=  scope)  {	  if(s.scope!=    jsScope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
2	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope!=  s.scope)  {	  if(s.scope!=    jsScope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
3	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  s.scope  ||  jsScope  ==  scope)  {	  if(s.scope!=    jsScope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
4	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  jsScope!=  s.scope)  {	  if(s.scope!=    jsScope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
5	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.scope!=  null)  {	  if    (s.scope    ==    null    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
6	[BUG]  [BUGGY]  if  (s.scope  ==  null  ||  s.scope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  null  ||  s.scope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  null  ||  s.scope!=  state.scope)  {	  if    (s.scope    ==    null    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
7	[BUG]  [BUGGY]  if  (scope!=  s.scope  ||  s.isScope())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (scope!=  s.scope  ||  s.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (scope!=  s.scope  ||  s.isScope())  {	  if    (s.scope!=    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  if  (s.scope  ==  scope  &&  s.isScope())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  &&  s.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  &&  s.isScope())  {	  if    (s.scope!=    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  if  (scope!=  s.scope  &&  s.isScope())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (scope!=  s.scope  &&  s.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (scope!=  s.scope  &&  s.isScope())  {	  if    (s.scope!=    scope    &&    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
10	[BUG]  [BUGGY]  if  (s.scope!=  scope  &&  s.isConstructor())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  &&  s.isConstructor())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  &&  s.isConstructor())  {	  if    (s.scope!=    scope    &&    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
11	[BUG]  [BUGGY]  if  (s.scope!=  scope  &&  s.isScope()  ||  s.isLocal())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  &&  s.isScope()  ||  s.isLocal())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  &&  s.isScope()  ||  s.isLocal())  {	  if    (s.scope!=    scope    &&    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
12	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope  ==  jsScope)  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
13	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  jsScope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  jsScope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  jsScope  ==  jsScope)  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
14	[BUG]  [BUGGY]  if(jsScope!=  scope  ||  s.scope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  scope  ||  s.scope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  scope  ||  s.scope  ==  scope)  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
15	[BUG]  [BUGGY]  if(scope!=  s.scope  ||  jsScope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  s.scope  ||  jsScope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  s.scope  ||  jsScope  ==  jsScope)  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
16	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  state.getScope())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  state.getScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope  ==  state.getScope())  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
17	[BUG]  [BUGGY]  if(s.scope  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  null)  {	  if    (s.scope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
18	[BUG]  [BUGGY]  if(s.scope!=  null  ||  s.scope.isScope())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||  s.scope.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||  s.scope.isScope())  {	  if    (s.scope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
19	[BUG]  [BUGGY]  if  (s.scope!=  null  ||!s.scope.isScope())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  null  ||!s.scope.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  null  ||!s.scope.isScope())  {	  if    (s.scope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
20	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  def);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
21	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  jsScope);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  jsScope);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  jsScope);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
22	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  cfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  cfgNode);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  cfgNode);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
23	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s),  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s),  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s),  def);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name,    s));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
24	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name,  s));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name,  s));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name,  s));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name,    s));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
25	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name,  jsScope));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name,  jsScope));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name,  jsScope));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name,    s));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
26	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s)+  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s)+  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s)+  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name,    s));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
27	[BUG]  [BUGGY]  if  (s.scope!=  scope  ||  s.scope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  ||  s.scope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  ||  s.scope  ==  scope)  {	  if    (s.scope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  ||  s.scope!=  state.scope)  {	  if    (s.scope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  if  (s.scope!=  scope  &&  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  &&  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  &&  s.scope!=  scope)  {	  if    (s.scope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  ||  s.scope!=  null)  {	  if    (s.scope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  if  (s.scope  ==  null  ||  s.scope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  null  ||  s.scope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  null  ||  s.scope  ==  scope)  {	  if    (s.scope!=    null    ||    s.scope    ==    scope)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
32	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s,  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s,  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s,  def);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name),    s);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
33	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  jsScope);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  jsScope);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  jsScope);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name),    s);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
34	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s  +  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s  +  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name),    s);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
35	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  def);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getName());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
36	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getLocalName());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getLocalName());  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getLocalName());	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getName());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
37	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  jsScope);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  jsScope);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  jsScope);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getName());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
38	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName()  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName()  +  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName()  +  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getName());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
39	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  cfgNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  cfgNode);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getName(),  cfgNode);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getName());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
40	[BUG]  [BUGGY]  if(jsScope!=  scope  &&  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  scope  &&  s.scope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  scope  &&  s.scope!=  jsScope)  {	  if(jsScope!=    scope    ||    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
41	[BUG]  [BUGGY]  if(scope!=  jsScope  ||  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  jsScope  ||  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  jsScope  ||  s.scope!=  scope)  {	  if(jsScope!=    scope    ||    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
42	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope!=  null)  {	  if(jsScope!=    scope    ||    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
43	[BUG]  [BUGGY]  if(scope!=  jsScope  ||  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  jsScope  ||  s.scope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  jsScope  ||  s.scope!=  jsScope)  {	  if(jsScope!=    scope    ||    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
44	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  def);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  def);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getVar(name));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
45	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name)+  1);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name)+  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name)+  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getVar(name));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
46	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  s);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getVar(name),  s);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getVar(name));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
47	[BUG]  [BUGGY]  if(jsScope!=  scope  &&  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  scope  &&  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  scope  &&  s.scope!=  scope)  {	  if(s.scope!=    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  if(scope!=  s.scope  &&  jsScope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  s.scope  &&  jsScope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  s.scope  &&  jsScope!=  jsScope)  {	  if(s.scope!=    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
49	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope!=  scope)  {	  if(s.scope!=    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
50	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  state.getScope())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  state.getScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope!=  state.getScope())  {	  if(s.scope!=    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
51	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope!=  state.scope)  {	  if(s.scope!=    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope!=  null)  {	  if(s.scope!=    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  state.getScope())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  state.getScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  s.scope  ||  jsScope!=  state.getScope())  {	  if(scope!=    s.scope    ||    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
54	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.scope!=  state.scope)  {	  if    (s.scope    ==    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
55	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  def)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.scope!=  def)  {	  if    (s.scope    ==    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
56	[BUG]  [BUGGY]  if  (scope  ==  s.scope  ||  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (scope  ==  s.scope  ||  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (scope  ==  s.scope  ||  s.scope!=  scope)  {	  if    (s.scope    ==    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
57	[BUG]  [BUGGY]  if((  s.scope!=  null)||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)||  jsScope!=  s.scope)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
58	[BUG]  [BUGGY]  if((  s.scope!=  null)&&  jsScope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)&&  jsScope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)&&  jsScope!=  state.scope)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
59	[BUG]  [BUGGY]  if((  s.scope  ==  null)&&  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope  ==  null)&&  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope  ==  null)&&  jsScope!=  s.scope)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
60	[BUG]  [BUGGY]  if((  s.scope!=  null)&&  jsScope!=  def.scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)&&  jsScope!=  def.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)&&  jsScope!=  def.scope)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
61	[BUG]  [BUGGY]  if  (scope  ==  s  ||  s.isScope())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (scope  ==  s  ||  s.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (scope  ==  s  ||  s.isScope())  {	  if    (s.scope    ==    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
62	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.isConstructor())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.isConstructor())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.isConstructor())  {	  if    (s.scope    ==    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
63	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.isLocal())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.isLocal())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.isLocal())  {	  if    (s.scope    ==    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
64	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.isExtern())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.isExtern())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.isExtern())  {	  if    (s.scope    ==    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
65	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.isVar(s))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.isVar(s))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.isVar(s))  {	  if    (s.scope    ==    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  if(s.scope!=  jsScope  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  jsScope  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  jsScope  ||  jsScope!=  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  s.scope  ||  jsScope!=  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  s.scope  ||  jsScope!=  state.scope)  {	  if(jsScope!=    s.scope    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
69	[BUG]  [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  jsScope  ||  jsScope!=  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
70	[BUG]  [BUGGY]  if  (target!=  s.scope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (target!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (target!=  s.scope)  {	  if    (s.scope!=    target)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
71	[BUG]  [BUGGY]  if  (s.scope!=  target  ||  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  target  ||  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  target  ||  s.scope!=  scope)  {	  if    (s.scope!=    target)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
72	[BUG]  [BUGGY]  if  (s.scope!=  target  ||  s.isScope())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  target  ||  s.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  target  ||  s.isScope())  {	  if    (s.scope!=    target)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
73	[BUG]  [BUGGY]  if  (s.scope!=  target  ||  s.scope!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  target  ||  s.scope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  target  ||  s.scope!=  null)  {	  if    (s.scope!=    target)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
74	[BUG]  [BUGGY]  if(jsScope  ==  scope  &&  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  scope  &&  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  scope  &&  s.scope!=  scope)  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
75	[BUG]  [BUGGY]  if(scope  ==  s.scope  &&  jsScope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  s.scope  &&  jsScope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  s.scope  &&  jsScope!=  jsScope)  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
76	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  jsScope!=  scope)  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
77	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  jsScope!=  state.getScope())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  jsScope!=  state.getScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  jsScope!=  state.getScope())  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
78	[BUG]  [BUGGY]  if(s.scope!=  null  ||  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||  jsScope!=  scope)  {	  if(s.scope!=    null    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
79	[BUG]  [BUGGY]  if(s.scope  ==  null  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  null  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  null  ||  jsScope!=  s.scope)  {	  if(s.scope!=    null    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
80	[BUG]  [BUGGY]  if(s.scope!=  null  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||  jsScope  ==  s.scope)  {	  if(s.scope!=    null    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
81	[BUG]  [BUGGY]  if(s.scope!=  null  ||  jsScope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||  jsScope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||  jsScope!=  state.scope)  {	  if(s.scope!=    null    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
82	[BUG]  [BUGGY]  if(s.scope!=  null  ||  jsScope!=  def.scope)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||  jsScope!=  def.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||  jsScope!=  def.scope)  {	  if(s.scope!=    null    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
83	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  def);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
84	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(jsScope.getVar(name));	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
85	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  cfgNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  cfgNode);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  cfgNode);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
86	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  name);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  name);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s,  name);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
87	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s.name);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s.name);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s.name);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
88	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s  +  1);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s  +  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(s  +  1);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
89	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  ==  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  ==  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
90	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >=  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >=  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
91	[BUG]  [BUGGY]  if(scope!=  s.scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  s.scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  s.scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
92	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  <=  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  <=  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  <=  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
93	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
94	[BUG]  [BUGGY]  if(scope!=  s.scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  s.scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  ==  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  s.scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  ==  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
95	[BUG]  [BUGGY]  if  (s.scope!=  null  &&  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  null  &&  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  null  &&  s.scope!=  scope)  {	  if    (s.scope!=    null    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
96	[BUG]  [BUGGY]  if  (s.scope!=  scope  &&  s.isReachingVar(s))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  &&  s.isReachingVar(s))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  &&  s.isReachingVar(s))  {	  if    (s.scope!=    scope    ||    s.isReachingVar(s))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
97	[BUG]  [BUGGY]  if  (s.scope  ==  scope  &&  s.isReachingVar(s))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  &&  s.isReachingVar(s))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  &&  s.isReachingVar(s))  {	  if    (s.scope!=    scope    ||    s.isReachingVar(s))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
98	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.isReachingVar(s))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.isReachingVar(s))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.isReachingVar(s))  {	  if    (s.scope!=    scope    ||    s.isReachingVar(s))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
99	[BUG]  [BUGGY]  if  (scope!=  s.scope  ||  s.isReachingVar(s))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (scope!=  s.scope  ||  s.isReachingVar(s))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (scope!=  s.scope  ||  s.isReachingVar(s))  {	  if    (s.scope!=    scope    ||    s.isReachingVar(s))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
100	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope  ==  scope)  {	  if(s.scope!=    scope    ||    jsScope    ==    scope)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
101	[BUG]  [BUGGY]  if(scope!=  s.scope  ||  jsScope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  s.scope  ||  jsScope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  s.scope  ||  jsScope  ==  scope)  {	  if(s.scope!=    scope    ||    jsScope    ==    scope)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
102	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  jsScope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  jsScope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  jsScope  ==  scope)  {	  if(s.scope!=    scope    ||    jsScope    ==    scope)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
103	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  jsScope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  jsScope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  jsScope  ==  scope)  {	  if(s.scope!=    scope    ||    jsScope    ==    scope)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
104	[BUG]  [BUGGY]  if(scope!=  s.scope  ||  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  s.scope  ||  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  s.scope  ||  jsScope!=  scope)  {	  if(s.scope!=    scope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
105	[BUG]  [BUGGY]  if  (scope  ==  s  ||  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (scope  ==  s  ||  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (scope  ==  s  ||  jsScope!=  null)  {	  if    (s.scope    ==    scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
106	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  jsScope  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  jsScope  ==  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  jsScope  ==  null)  {	  if    (s.scope    ==    scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
107	[BUG]  [BUGGY]  if  (s.scope  ==  scope  &&  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  &&  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  &&  jsScope!=  null)  {	  if    (s.scope    ==    scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
108	[BUG]  [BUGGY]  if  (scope  ==  s.scope  ||  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (scope  ==  s.scope  ||  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (scope  ==  s.scope  ||  jsScope!=  null)  {	  if    (s.scope    ==    scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
109	[BUG]  [BUGGY]  if  (s.scope!=  null  &&  s.scope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  null  &&  s.scope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  null  &&  s.scope  ==  scope)  {	  if    (s.scope!=    null    &&    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
110	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  s.scope  ==  scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  s.scope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  s.scope  ==  scope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
111	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  s.scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  s.scope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  s.scope  ==  jsScope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
112	[BUG]  [BUGGY]  if(scope  ==  s.scope  ||  scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  s.scope  ||  scope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  s.scope  ||  scope  ==  jsScope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
113	[BUG]  [BUGGY]  if(jsScope  ==  scope  ||  s.scope  ==  scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  scope  ||  s.scope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  scope  ||  s.scope  ==  scope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
114	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue(),  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue(),  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue(),  def);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getValue());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
115	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getString());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getString());  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getString());	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getValue());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
116	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue()  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue()  +  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue()  +  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getValue());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
117	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getKey());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getKey());  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getKey());	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getValue());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
118	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getType());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getType());  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getType());	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getValue());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
119	[BUG]  [BUGGY]  if(s.scope!=  jsScope  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  jsScope  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  jsScope  ||  jsScope  ==  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
120	[BUG]  [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  s.scope  ||  jsScope  ==  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
121	[BUG]  [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  jsScope  ||  jsScope  ==  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
122	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  state.scope)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  s.scope  ||  jsScope  ==  state.scope)  {	  if(jsScope!=    s.scope    ||    jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
123	[BUG]  [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope  ==  state.scope)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope  ==  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  s.scope  ||  jsScope  ==  state.scope)  {	  if(jsScope!=    s.scope    ||    jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
124	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  jsScope.getVar(name));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  jsScope.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s,  jsScope.getVar(name));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
125	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(cfgNode.getVar(name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(cfgNode.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(cfgNode.getVar(name));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
126	[BUG]  [BUGGY]  if((  s.scope!=  null)||!s.scope.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)||!s.scope.isEmpty())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)||!s.scope.isEmpty())  {	  if    ((    s.scope!=    null)&&!s.scope.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
127	[BUG]  [BUGGY]  if((  s.scope  ==  null)&&!s.scope.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope  ==  null)&&!s.scope.isEmpty())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope  ==  null)&&!s.scope.isEmpty())  {	  if    ((    s.scope!=    null)&&!s.scope.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
128	[BUG]  [BUGGY]  if(s.scope!=  jsScope  ||  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  jsScope  ||  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  jsScope  ||  jsScope!=  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
129	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  s.scope  ||  jsScope  ==  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
130	[BUG]  [BUGGY]  if(s.scope!=  jsScope  ||  jsScope  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  jsScope  ||  jsScope  ==  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  jsScope  ||  jsScope  ==  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
131	[BUG]  [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  s.scope  ||  jsScope!=  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
132	[BUG]  [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  jsScope  ||  jsScope!=  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
133	[BUG]  [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope  ==  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  s.scope  ||  jsScope  ==  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  s.scope  ||  jsScope  ==  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
134	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(name,  s);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(name,  s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  jsScope.getVar(name,  s);	  FlowState    <    MustDef>    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
135	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  s.getVar(name);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  s.getVar(name);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  s.getVar(name);	  FlowState    <    MustDef>    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
136	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.getVar(s);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.getVar(s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.getVar(s);	  FlowState    <    MustDef>    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
137	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(s);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  jsScope.getVar(s);	  FlowState    <    MustDef>    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
138	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(name)+  1;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(name)+  1;  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  jsScope.getVar(name)+  1;	  FlowState    <    MustDef>    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
139	[BUG]  [BUGGY]  if  (s.scope  ==  null  ||  s.scope!=  def.scope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  null  ||  s.scope!=  def.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  null  ||  s.scope!=  def.scope)  {	  if    (s.scope    ==    null    ||    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  def);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  this,  def);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  def,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  this,  state);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  this,  useNode);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  name);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  name);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  this,  name);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
147	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getVar(name);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getVar(name);	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
148	[BUG]  [BUGGY]  Node  rValue  =  s.getRValue()  +  1;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getRValue()  +  1;  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getRValue()  +  1;	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
149	[BUG]  [BUGGY]  Node  rValue  =  s.getVarValue();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getVarValue();  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getVarValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
150	[BUG]  [BUGGY]  Node  rValue  =  s.getLastChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getLastChild();  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getLastChild();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
151	[BUG]  [BUGGY]  Node  rValue  =  s.getLocalValue();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getLocalValue();  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getLocalValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
152	[BUG]  [BUGGY]  Node  rValue  =  s.getNode();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getNode();  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getNode();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
153	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  s.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  s.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  s.getType()  ==  Token.FUNCTION)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
154	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  s.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  s.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  s.getType()  ==  Token.FUNCTION)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
155	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  s.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  s.getType()  ==  Token.VAR)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  s.getType()  ==  Token.VAR)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
156	[BUG]  [BUGGY]  if(s.scope!=  null  &&  s.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  s.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  s.getType()  ==  Token.FUNCTION)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
157	[BUG]  [BUGGY]  if(scope!=  s.scope  &&  s.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope!=  s.scope  &&  s.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope!=  s.scope  &&  s.getType()  ==  Token.FUNCTION)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
158	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  s.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  s.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  s.getType()  ==  Token.FUNCTION)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
159	[BUG]  [BUGGY]  if(s!=  scope  ||  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s!=  scope  ||  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s!=  scope  ||  jsScope!=  scope)  {	  if(jsScope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
160	[BUG]  [BUGGY]  if(jsScope!=  null  &&  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  null  &&  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  null  &&  jsScope!=  s.scope)  {	  if(s.scope!=    null    &&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
161	[BUG]  [BUGGY]  if(s.scope!=  null  &&  jsScope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  jsScope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  jsScope!=  state.scope)  {	  if(s.scope!=    null    &&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
162	[BUG]  [BUGGY]  if(s.scope!=  null  &&  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  jsScope!=  scope)  {	  if(s.scope!=    null    &&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
163	[BUG]  [BUGGY]  if(s.scope!=  null  &&  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  jsScope  ==  s.scope)  {	  if(s.scope!=    null    &&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
164	[BUG]  [BUGGY]  if(s.scope  ==  null  &&  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  null  &&  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  null  &&  jsScope!=  s.scope)  {	  if(s.scope!=    null    &&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
165	[BUG]  [BUGGY]  if(jsScope  ==  scope  ||  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  scope  ||  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  scope  ||  s.scope!=  scope)  {	  if(s.scope    ==    scope    ||    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
166	[BUG]  [BUGGY]  if(scope  ==  s.scope  ||  jsScope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  s.scope  ||  jsScope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  s.scope  ||  jsScope!=  jsScope)  {	  if(s.scope    ==    scope    ||    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
167	[BUG]  [BUGGY]  if(jsScope  ==  scope  ||  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  scope  ||  s.scope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  scope  ||  s.scope!=  jsScope)  {	  if(s.scope    ==    scope    ||    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
168	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  state.getScope())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  state.getScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  jsScope!=  state.getScope())  {	  if(s.scope    ==    scope    ||    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
169	[BUG]  [BUGGY]  if(s!=  null  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s!=  null  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s!=  null  ||  jsScope  ==  s.scope)  {	  if(jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
170	[BUG]  [BUGGY]  if(scope  ==  s.scope  ||  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  s.scope  ||  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  s.scope  ||  jsScope!=  scope)  {	  if(s.scope    ==    scope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
171	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  state.scope)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  state.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  jsScope!=  state.scope)  {	  if(s.scope    ==    scope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
172	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  s.scope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  s.scope!=  jsScope)  {	  if(s.scope    ==    jsScope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
173	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  s.scope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  s.scope!=  jsScope)  {	  if(s.scope    ==    jsScope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
174	[BUG]  [BUGGY]  if(jsScope  ==  s  ||  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  s  ||  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  s  ||  s.scope!=  scope)  {	  if(s.scope    ==    jsScope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
175	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  s.scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  s.scope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  s.scope  ==  jsScope)  {	  if(s.scope    ==    jsScope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
176	[BUG]  [BUGGY]  if(jsScope  ==  s.scope  ||  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  s.scope  ||  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  s.scope  ||  s.scope!=  scope)  {	  if(s.scope    ==    jsScope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
177	[BUG]  [BUGGY]  if  (s.scope!=  scope  ||  s.isLocal())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  ||  s.isLocal())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  ||  s.isLocal())  {	  if    (s.scope!=    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
178	[BUG]  [BUGGY]  if(s.scope!=  null  &&  jsScope!=  def.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  jsScope!=  def.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  jsScope!=  def.scope)  {	  if(s.scope!=    null    &&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
179	[BUG]  [BUGGY]  if(s.scope!=  null  &&  s.scope!=  def)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  s.scope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  s.scope!=  def)  {	  if(s.scope!=    null    &&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
180	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
181	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vs.getVar(name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vs.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vs.getVar(name));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
182	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vsScope.getVar(name));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vsScope.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vsScope.getVar(name));	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
183	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vars,  s);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vars,  s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vars,  s);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
184	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vsScope.getVar(name),  s);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vsScope.getVar(name),  s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(vsScope.getVar(name),  s);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
185	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(lhs,  s);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(lhs,  s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(lhs,  s);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
186	[BUG]  [BUGGY]  if(s.scope  ==  null  ||  s.scope!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  null  ||  s.scope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  null  ||  s.scope!=  null)  {	  if    (s.scope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
187	[BUG]  [BUGGY]  if(s.scope!=  null  ||!s.scope.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||!s.scope.isEmpty())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||!s.scope.isEmpty())  {	  if    (s.scope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
188	[BUG]  [BUGGY]  if(s.scope!=  null  ||  s.scope!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||  s.scope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||  s.scope!=  null)  {	  if(s.scope!=    null    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
189	[BUG]  [BUGGY]  if((  s.scope!=  null)&&  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)&&  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)&&  jsScope!=  scope)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
190	[BUG]  [BUGGY]  if((  s.scope!=  null)&&  s.scope!=  def)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)&&  s.scope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)&&  s.scope!=  def)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
191	[BUG]  [BUGGY]  if((  s.scope!=  null)&&  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)&&  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)&&  s.scope!=  scope)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
192	[BUG]  [BUGGY]  if(s.scope!=  jsScope  ||  jsScope  ==  scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  jsScope  ||  jsScope  ==  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  jsScope  ||  jsScope  ==  scope)  {	  if(s.scope!=    jsScope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
193	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  cfgNode)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  cfgNode)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope!=  cfgNode)  {	  if(s.scope!=    jsScope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
194	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  s.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  s.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  s.getType()!=  Token.FUNCTION)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
195	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  s.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  s.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  s.getType()!=  Token.FUNCTION)  {	  if(s.scope!=    scope    &&    s.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
196	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  jsScope!=  def)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  jsScope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  jsScope!=  def)  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
197	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  def)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope!=  def)  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
198	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  this)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  this)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope!=  this)  {	  if(jsScope!=    scope    ||    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
199	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  def)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope!=  def)  {	  if(jsScope!=    scope    ||    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
200	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  jsScope!=  s.scope)  {	  if(scope!=    s.scope    ||    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
201	[BUG]  [BUGGY]  if  (s.scope  ==  null  ||  s.scope!=  def)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  null  ||  s.scope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  null  ||  s.scope!=  def)  {	  if    (s.scope    ==    null    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
202	[BUG]  [BUGGY]  if(s.scope!=  null  ||  jsScope!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  ||  jsScope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  ||  jsScope!=  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
203	[BUG]  [BUGGY]  if(s.scope!=  jsScope  ||  s.scope!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  jsScope  ||  s.scope!=  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  jsScope  ||  s.scope!=  null)  {	  if(jsScope!=    s.scope    ||    jsScope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
204	[BUG]  [BUGGY]  if(s.scope  ==  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
205	[BUG]  [BUGGY]  if(s.scope!=  null  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  s.getVar(name)!=  null  &&  s.getVar(name).length()  >  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
206	[BUG]  [BUGGY]  if(s  ==  null  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s  ==  null  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s  ==  null  ||  jsScope  ==  s.scope)  {	  if(jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
207	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  cfgNode  ==  s.name)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  s.scope  ||  cfgNode  ==  s.name)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  s.scope  ||  cfgNode  ==  s.name)  {	  if(jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
208	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getParent());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getParent());  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getParent());	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getName());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
209	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  def);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name),    s);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
210	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s  -  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s  -  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name),    s);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
211	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue()  -  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getValue()  -  1);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getValue());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
212	[BUG]  [BUGGY]  if  (s.scope  ==  target)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  target)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  target)  {	  if    (s.scope!=    target)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
213	[BUG]  [BUGGY]  if  (s.scope!=  scope  &&  s.isLocal())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  &&  s.isLocal())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  &&  s.isLocal())  {	  if    (s.scope!=    scope    &&    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
214	[BUG]  [BUGGY]  if  (s.scope!=  scope  &&  s.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  &&  s.isEmpty())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  &&  s.isEmpty())  {	  if    (s.scope!=    scope    &&    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
215	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  s.scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  s.scope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  s.scope  ==  jsScope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
216	[BUG]  [BUGGY]  Node  rValue  =  s.getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getNext();  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getNext();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  def,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  useNode);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
219	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vsScope.getVar(name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vsScope.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vsScope.getVar(name));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
220	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vsScope.getVar(name),  s);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vsScope.getVar(name),  s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(vsScope.getVar(name),  s);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
221	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  def)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  jsScope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  jsScope!=  def)  {	  if(s.scope    ==    scope    ||    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
222	[BUG]  [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  def)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  ||  s.scope!=  def)  {	  if    (s.scope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
223	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s  +  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s  +  1));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s  +  1));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name,    s));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
224	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.isEmpty())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.isEmpty())  {	  if    (s.scope    ==    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
225	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(jsScope.getVar(name);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(jsScope.getVar(name);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(jsScope.getVar(name);	  FlowState    <    MustDef>    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
226	[BUG]  [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  useNode)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope  ==  scope  ||  s.scope!=  useNode)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope  ==  scope  ||  s.scope!=  useNode)  {	  if    (s.scope    ==    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
227	[BUG]  [BUGGY]  if(scope  ==  scope  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  scope  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  scope  ||  jsScope!=  s.scope)  {	  if(s.scope    ==    scope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
228	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  def)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  def)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope  ==  def)  {	  if(s.scope!=    scope    ||    jsScope    ==    scope)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
229	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  null)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope  ==  null)  {	  if(s.scope!=    scope    ||    jsScope    ==    scope)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
230	[BUG]  [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  ||  jsScope  ==  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
231	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(def.getVar(name));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(def.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(def.getVar(name));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getVar(name));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
232	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  jsScope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  jsScope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  jsScope  ==  jsScope)  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
233	[BUG]  [BUGGY]  if(s.scope  ==  scope  ||  s.scope!=  name)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  scope  ||  s.scope!=  name)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  scope  ||  s.scope!=  name)  {	  if(s.scope    ==    jsScope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
234	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getJoin());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getJoin());  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(s.getJoin());	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s.getValue());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
235	[BUG]  [BUGGY]  if(s.scope  ==  null  &&  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  null  &&  s.scope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  null  &&  s.scope!=  jsScope)  {	  if    (s.scope!=    null    &&    s.scope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
236	[BUG]  [BUGGY]  if  (s.scope!=  scope  ||  s.isConstructor())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  ||  s.isConstructor())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  ||  s.isConstructor())  {	  if    (s.scope!=    scope    ||    s.isScope())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
237	[BUG]  [BUGGY]  if(jsScope  >=  s.scope  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  >=  s.scope  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  >=  s.scope  ||  jsScope  ==  s.scope)  {	  if(jsScope!=    s.scope    ||    jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
238	[BUG]  [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope  ==  jsScope  ||  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope  ==  jsScope  ||  jsScope!=  scope)  {	  if(s.scope!=    jsScope    ||    jsScope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
239	[BUG]  [BUGGY]  if(!(s.scope  ==  jsScope  ||  s.scope  ==  scope))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(!(s.scope  ==  jsScope  ||  s.scope  ==  scope))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(!(s.scope  ==  jsScope  ||  s.scope  ==  scope))  {	  if(jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
240	[BUG]  [BUGGY]  if(jsScope.getVar(name)  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope.getVar(name)  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope.getVar(name)  ==  s.scope)  {	  if(jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
241	[BUG]  [BUGGY]  if(!(s.scope  ==  jsScope  ||  s.scope  ==  def))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(!(s.scope  ==  jsScope  ||  s.scope  ==  def))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(!(s.scope  ==  jsScope  ||  s.scope  ==  def))  {	  if(jsScope    ==    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
242	[BUG]  [BUGGY]  if(jsScope!=  scope  ||  s.scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  scope  ||  s.scope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  scope  ||  s.scope  ==  jsScope)  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
243	[BUG]  [BUGGY]  if(jsScope!=  scope  ||  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  scope  ||  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  scope  ||  jsScope  ==  s.scope)  {	  if(s.scope!=    scope    ||    jsScope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
244	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s).reaching);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s).reaching);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s).reaching);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name,    s));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
245	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  def));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  def));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name,  def));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name,    s));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
246	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  null  ||  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  null  ||  jsScope!=  s.scope)  {	  if(s.scope!=    null    ||    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
247	[BUG]  [BUGGY]  FlowState  <  MustDef>  sValue  =  state.getIn().reachingDef.get(s);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  sValue  =  state.getIn().reachingDef.get(s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  sValue  =  state.getIn().reachingDef.get(s);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
248	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(var);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(var);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  state.getIn().reachingDef.get(var);	  FlowState    <    MustDef>    rValue    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
249	[BUG]  [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)  ==  null  &&  s.getVar(name).length()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  scope  &&  s.getVar(name)  ==  null  &&  s.getVar(name).length()  >  0)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  scope  &&  s.getVar(name)  ==  null  &&  s.getVar(name).length()  >  0)  {	  if(s.scope!=    scope    &&    s.getVar(name)!=    null    &&    s.getVar(name).length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
250	[BUG]  [BUGGY]  Node  rValue  =  s.getValue();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getValue();  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
251	[BUG]  [BUGGY]  Node  rValue  =  s.getLValue();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  Node  rValue  =  s.getLValue();  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	Node  rValue  =  s.getLValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
252	[BUG]  [BUGGY]  if(jsScope  ==  scope  &&  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  scope  &&  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  scope  &&  jsScope!=  s.scope)  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
253	[BUG]  [BUGGY]  if(scope  ==  jsScope  &&  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  jsScope  &&  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  jsScope  &&  jsScope!=  s.scope)  {	  if(s.scope    ==    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
254	[BUG]  [BUGGY]  if(jsScope!=  scope  &&  jsScope!=  s.scope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope!=  scope  &&  jsScope!=  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope!=  scope  &&  jsScope!=  s.scope)  {	  if(s.scope!=    scope    &&    jsScope!=    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
255	[BUG]  [BUGGY]  if(s.scope!=  target  ||  s.isReachingVar(s))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  target  ||  s.isReachingVar(s))  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  target  ||  s.isReachingVar(s))  {	  if    (s.scope!=    scope    ||    s.isReachingVar(s))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
256	[BUG]  [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(name  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  rValue  =  jsScope.getVar(name  +  1);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  rValue  =  jsScope.getVar(name  +  1);	  FlowState    <    MustDef>    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
257	[BUG]  [BUGGY]  if  (s.scope!=  target  &&  s.isScope())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  target  &&  s.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  target  &&  s.isScope())  {	  if    (s.scope!=    target)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
258	[BUG]  [BUGGY]  if(s.type!=  scope  ||  jsScope!=  scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.type!=  scope  ||  jsScope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.type!=  scope  ||  jsScope!=  scope)  {	  if(jsScope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
259	[BUG]  [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  state)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if  (s.scope!=  scope  ||  s.scope!=  state)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if  (s.scope!=  scope  ||  s.scope!=  state)  {	  if    (s.scope!=    scope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
260	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1,  s);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1,  s);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1,  s);	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(jsScope.getVar(name),    s);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
261	[BUG]  [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(wsScope.getVar(name));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(wsScope.getVar(name));  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	FlowState  <  MustDef>  escaped  =  state.getIn().reachingDef.get(wsScope.getVar(name));	  FlowState    <    MustDef>    escaped    =    state.getIn().reachingDef.get(s);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
262	[BUG]  [BUGGY]  if(jsScope  ==  jsScope  ||  s.scope!=  scope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  jsScope  ||  s.scope!=  scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  jsScope  ||  s.scope!=  scope)  {	  if(s.scope    ==    jsScope    ||    s.scope!=    scope)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
263	[BUG]  [BUGGY]  if(s.scope!=  null  &&  s.scope.isScope())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&  s.scope.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&  s.scope.isScope())  {	  if    (s.scope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
264	[BUG]  [BUGGY]  if(s.scope!=  null  &&!s.scope.isScope())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(s.scope!=  null  &&!s.scope.isScope())  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(s.scope!=  null  &&!s.scope.isScope())  {	  if    (s.scope!=    null)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  state);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  alpha);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  NodeTraversal.traverse(compiler,  s,  alpha);  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	NodeTraversal.traverse(compiler,  s,  alpha);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
267	[BUG]  [BUGGY]  if(scope  ==  s.scope  ||  s.scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  s.scope  ||  s.scope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  s.scope  ||  s.scope  ==  jsScope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
268	[BUG]  [BUGGY]  if(scope  ==  s.scope  ||  s.scope!=  jsScope)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(scope  ==  s.scope  ||  s.scope!=  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(scope  ==  s.scope  ||  s.scope!=  jsScope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
269	[BUG]  [BUGGY]  if(jsScope  ==  scope  ||  s.scope  ==  jsScope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if(jsScope  ==  scope  ||  s.scope  ==  jsScope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if(jsScope  ==  scope  ||  s.scope  ==  jsScope)  {	  if(s.scope    ==    scope    ||    s.scope    ==    jsScope)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
270	[BUG]  [BUGGY]  if((  s.scope!=  null)&&  jsScope  ==  s.scope)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {      [BUGGY]  if((  s.scope!=  null)&&  jsScope  ==  s.scope)  {  [BUGGY]      return  true;  }  }  return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.43301270189221935	432	432	3	replace	if((  s.scope!=  null)&&  jsScope  ==  s.scope)  {	  if    ((    s.scope!=    null)&&    jsScope!=    s.scope)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
