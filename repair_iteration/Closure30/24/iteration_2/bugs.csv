bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  this);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	NodeTraversal.traverse(compiler,  useNode,  this);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  Node  cfgNode  =  useNode.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Node  cfgNode  =  useNode.getParent();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Node  cfgNode  =  useNode.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  Node  parent  =  useNode.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Node  parent  =  useNode.getParent();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Node  parent  =  useNode.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  Node  cfgNode  =  useNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Node  cfgNode  =  useNode.getFirstChild();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Node  cfgNode  =  useNode.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  Node  target  =  useNode.getParent();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Node  target  =  useNode.getParent();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Node  target  =  useNode.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  FlowState  <  Node>  jsScope  =  state.getIn();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  FlowState  <  Node>  jsScope  =  state.getIn();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	FlowState  <  Node>  jsScope  =  state.getIn();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  Node  aNode  =  useNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Node  aNode  =  useNode.getFirstChild();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Node  aNode  =  useNode.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name),  useNode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name),  useNode);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(name),  useNode);	  Preconditions.checkArgument(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(name)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkNotNull(getCfg().hasNode(name));	  Preconditions.checkArgument(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(useNode,  name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(useNode,  name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(useNode,  name));	  Preconditions.checkArgument(getCfg().hasNode(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(name,  useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(name,  useNode));	  Preconditions.checkArgument(getCfg().hasNode(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name,  useNode)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name,  useNode)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(name,  useNode)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(name,  useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkNotNull(getCfg().hasNode(name,  useNode));	  Preconditions.checkArgument(getCfg().hasNode(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name,  useNode)||  state.getIn().reachingDef.contains(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name,  useNode)||  state.getIn().reachingDef.contains(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(name,  useNode)||  state.getIn().reachingDef.contains(name));	  Preconditions.checkArgument(getCfg().hasNode(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasVar(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasVar(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasVar(name));	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name,  useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasVar(name,  useNode));	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name),  useNode);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasVar(name),  useNode);	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name)||  getCfg().hasVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name)||  getCfg().hasVar(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasVar(name)||  getCfg().hasVar(name));	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkNotNull(getCfg().hasVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkNotNull(getCfg().hasVar(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkNotNull(getCfg().hasVar(name));	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().hasVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(!getCfg().hasVar(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().hasVar(name));	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(!getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(!getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(!getCfg().hasNode(useNode));	  Preconditions.checkNotNull(getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(isCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(isCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(isCfg().hasNode(useNode));	  Preconditions.checkNotNull(getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(name)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(name)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(name)||  getCfg().hasNode(useNode));	  Preconditions.checkState(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(name),  useNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(name),  useNode);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(name),  useNode);	  Preconditions.checkState(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(name),  useNode  ==  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(name),  useNode  ==  null);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(name),  useNode  ==  null);	  Preconditions.checkState(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(name),  useNode!=  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(name),  useNode!=  null);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(name),  useNode!=  null);	  Preconditions.checkState(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasVar(name)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isConstructor()  ||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isConstructor()  ||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isConstructor()  ||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(n));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(n));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(n));	  Preconditions.checkState(getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(name));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isReachingDefined(name));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(name,  useNode));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(name,  useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isReachingDefined(name,  useNode));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().isReachingDefined(useNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().isReachingDefined(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().isReachingDefined(useNode));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode,  name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode,  name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isReachingDefined(useNode,  name));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().isReachingDefined(useNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(!getCfg().isReachingDefined(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().isReachingDefined(useNode));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode),  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode),  name);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isReachingDefined(useNode),  name);	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().hasNode(name));	  Preconditions.checkArgument(!getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(name,  useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().hasNode(name,  useNode));	  Preconditions.checkArgument(!getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(n));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().hasNode(n));	  Preconditions.checkArgument(!getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(node));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(node));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(node));	  Preconditions.checkArgument(getCfg().hasNode(node));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name),  useNode  ==  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name),  useNode  ==  null);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasVar(name),  useNode  ==  null);	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name),  useNode!=  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name),  useNode!=  null);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasVar(name),  useNode!=  null);	  Preconditions.checkArgument(getCfg().hasVar(name));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(node));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(node));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().hasNode(node));	  Preconditions.checkArgument(!getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkNotNull(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(aNode)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(aNode)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(aNode)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name)&&  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name)&&  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(name)&&  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().containsNode(useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().containsNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().containsNode(useNode));	  Preconditions.checkState(getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkNotNull(getCfg().isReachingDefined(useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkNotNull(getCfg().isReachingDefined(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkNotNull(getCfg().isReachingDefined(useNode));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode)||  state.getIn().reachingDef.containsKey(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode)||  state.getIn().reachingDef.containsKey(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isReachingDefined(useNode)||  state.getIn().reachingDef.containsKey(name));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
52	[BUG]  [BUGGY]  FlowState  <  MustDef>  jsScope  =  state.getIn();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  FlowState  <  MustDef>  jsScope  =  state.getIn();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	FlowState  <  MustDef>  jsScope  =  state.getIn();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  FlowState  <  MustDef>  jsScope  =  getCfg().getNode(useNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  FlowState  <  MustDef>  jsScope  =  getCfg().getNode(useNode);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	FlowState  <  MustDef>  jsScope  =  getCfg().getNode(useNode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  FlowState  <  MustDef>  jsScope  =  getCfg().getNode(name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  FlowState  <  MustDef>  jsScope  =  getCfg().getNode(name);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	FlowState  <  MustDef>  jsScope  =  getCfg().getNode(name);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]  FlowState  <  MustDef>  jsScope  =  getCfg();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  FlowState  <  MustDef>  jsScope  =  getCfg();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	FlowState  <  MustDef>  jsScope  =  getCfg();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  Node  cfgNode  =  getCfg().getNode(name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Node  cfgNode  =  getCfg().getNode(name);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Node  cfgNode  =  getCfg().getNode(name);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isNode(useNode)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isNode(useNode)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isNode(useNode)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(useNode)||    getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
59	[BUG]  [BUGGY]  GraphNode  <  Node,  Branch>  jsScope  =  getCfg().getNode(useNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  GraphNode  <  Node,  Branch>  jsScope  =  getCfg().getNode(useNode);  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	GraphNode  <  Node,  Branch>  jsScope  =  getCfg().getNode(useNode);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  GraphNode  <  Node,  Branch>  jsScope  =  getCfg();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  GraphNode  <  Node,  Branch>  jsScope  =  getCfg();  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	GraphNode  <  Node,  Branch>  jsScope  =  getCfg();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode,  aNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode,  aNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isReachingDefined(useNode,  aNode));	  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(node)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(node)||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(node)||  getCfg().hasNode(useNode));	  Preconditions.checkArgument(getCfg().hasNode(node));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(useNode,  name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().hasNode(useNode,  name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(useNode,  name));	  Preconditions.checkArgument(getCfg().hasNode(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(!getCfg().hasNode(name));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(!getCfg().hasNode(name));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(!getCfg().hasNode(name));	  Preconditions.checkState(getCfg().hasNode(name));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().isConstructor()  ||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {    [BUGGY]  Preconditions.checkState(getCfg().isConstructor()  ||  getCfg().hasNode(useNode));  [BUGGY]    GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().isConstructor()  ||  getCfg().hasNode(useNode));	  Preconditions.checkState(getCfg().hasNode(useNode));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
