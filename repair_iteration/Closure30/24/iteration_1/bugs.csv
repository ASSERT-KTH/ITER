bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(name));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkState(getCfg().hasNode(useNode));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(useNode));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkArgument(getCfg().hasVar(name));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasVar(name));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkArgument(!getCfg().hasNode(useNode));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(!getCfg().hasNode(useNode));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name,  useNode));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(name,  useNode));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(name,  useNode));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkNotNull(getCfg().hasNode(useNode));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkNotNull(getCfg().hasNode(useNode));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]    [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	  	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(getCfg().hasNode(name));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkState(getCfg().hasNode(name));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkState(getCfg().hasNode(name));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(useNode)||  getCfg().hasNode(useNode));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkArgument(getCfg().isReachingDefined(useNode));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().isReachingDefined(useNode));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(node));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  [BUGGY]  Preconditions.checkArgument(getCfg().hasNode(node));  [BUGGY]  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  return  false;  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	426	426	3	replace	Preconditions.checkArgument(getCfg().hasNode(node));	Preconditions.checkArgument(getCfg().hasNode(useNode));  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
