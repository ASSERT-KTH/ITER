bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(n)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(n)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)||  predicate.apply(n)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(n)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
2	[BUG]  [BUGGY]  if(predicate.apply(cur)||  isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)||  isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)||  isLeftOf(expressionRoot,  predicate))  {	  if(predicate.apply(n)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
3	[BUG]  [BUGGY]  if(cur.apply(n)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(n)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
4	[BUG]  [BUGGY]  if(predicate.apply(cur)||  isLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)||  isLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)||  isLeftOf(n,  expressionRoot))  {	  if(predicate.apply(n)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
5	[BUG]  [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  &&  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
6	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(expressionRoot,  predicate))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
7	[BUG]  [BUGGY]  if(!predicate.removeLast()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLast()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLast()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
8	[BUG]  [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.getFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
9	[BUG]  [BUGGY]  if(!predicate.getFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.getFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.getFirst()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
10	[BUG]  [BUGGY]  if(!cur.removeFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.removeFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.removeFirst()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
11	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
12	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
13	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
14	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot  +  1))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
15	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
16	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
17	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  cur))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
18	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(cur,  predicate))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
19	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  ||  predicate.apply(cur,  cur))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
20	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur,  cur  +  1))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur,  cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur,  cur  +  1))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
21	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
22	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
23	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  true))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  true))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  true))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
24	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&  isLeftOf(p,  expressionRoot))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
25	[BUG]  [BUGGY]  if(!predicate.apply(p)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(p)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(p)&&  isLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
26	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&  isLeftOf(n,  expressionRoot))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
27	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  &&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  &&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  &&  cur.apply(predicate))  {	  if(!predicate.removeFirstChild()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
28	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirstChild()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
29	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  &&  predicate.apply(cur))  {	  if(!predicate.removeFirstChild()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
30	[BUG]  [BUGGY]  if(!predicate.getFirstChild()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.getFirstChild()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.getFirstChild()  &&  predicate.apply(cur))  {	  if(!predicate.removeFirstChild()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
31	[BUG]  [BUGGY]  if(!cur.removeFirstChild()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.removeFirstChild()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.removeFirstChild()  &&  predicate.apply(cur))  {	  if(!predicate.removeFirstChild()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
32	[BUG]  [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  &&  predicate.apply(cur,  cur))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
33	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(cur,  predicate))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
34	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur,  cur  +  1))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur,  cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(cur,  cur  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
35	[BUG]  [BUGGY]  if(!predicate.removeLast()  ||  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLast()  ||  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLast()  ||  predicate.apply(cur,  cur))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
36	[BUG]  [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.getFirstChild()  ||  predicate.apply(cur,  cur))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
37	[BUG]  [BUGGY]  if(cur.apply(predicate)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(cur)||    isLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
38	[BUG]  [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(cur)||    isLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
39	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(cur)||    isLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
40	[BUG]  [BUGGY]  if(p.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(cur)||    isLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
41	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot,  predicate)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot,  predicate)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot,  predicate)||  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(cur)||    isLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
42	[BUG]  [BUGGY]  if(cur.apply(defNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defNode,  predicate))  {	  if(cur.apply(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
43	[BUG]  [BUGGY]  if(cur.apply(predicate,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  expressionRoot))  {	  if(cur.apply(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
44	[BUG]  [BUGGY]  if(cur.apply(predicate,  defNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  defNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  defNode))  {	  if(cur.apply(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
45	[BUG]  [BUGGY]  if(!cur.apply(defNode,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(defNode,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(defNode,  expressionRoot))  {	  if(cur.apply(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
46	[BUG]  [BUGGY]  if(!cur.apply(defNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(defNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(defNode,  predicate))  {	  if(cur.apply(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
47	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentNode(cur,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentNode(cur,  expressionRoot);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
48	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  p);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentNode(cur,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentNode(cur,  p);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
49	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentNode(cur,  expressionRoot,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentNode(cur,  expressionRoot,  predicate);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
50	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  p);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentNode(cur,  predicate,  p);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
51	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  expressionRoot);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentNode(cur,  predicate,  expressionRoot);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
52	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(n,  predicate);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentNode(n,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentNode(n,  predicate);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
53	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  def);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  def);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentNode(cur,  predicate,  def);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
54	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
55	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  p.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  p.apply(cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
56	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  p.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)&&  p.apply(cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
57	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
58	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
59	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
60	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)&&!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)&&!predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(n,  expressionRoot)&&!predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
61	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur  +  1))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
62	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)&&!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)&&!predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(p,  expressionRoot)&&!predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
63	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur),  true)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur),  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur),  true)  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
64	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithin    	non-compiled	[CE]  <identifier>  expected	50	None	replace
65	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinCfgNode  ||  numUseWithinCfgNode  ||  numUseWithinCfgNode  ||  numUseWithin  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinCfgNode  ||  numUseWithinCfgNode  ||  numUseWithinCfgNode  ||  numUseWithin  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinCfgNode  ||  numUseWithinCfgNode  ||  numUseWithinCfgNode  ||  numUseWithin	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithin    	non-compiled	[CE]  <identifier>  expected	50	None	replace
66	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinOfCfgNode  ||  numUseWithinOfCfgNode  ||  numUseWithinOfCfgNode  ||  numUseWithin  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinOfCfgNode  ||  numUseWithinOfCfgNode  ||  numUseWithinOfCfgNode  ||  numUseWithin  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinOfCfgNode  ||  numUseWithinOfCfgNode  ||  numUseWithinOfCfgNode  ||  numUseWithin	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithin    	non-compiled	[CE]  <identifier>  expected	50	None	replace
67	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  &&  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
68	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
69	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
70	[BUG]  [BUGGY]  if(cur.removeFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.removeFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.removeFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
71	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  &&  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  &&  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  &&  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
72	[BUG]  [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
73	[BUG]  [BUGGY]  if(cur.apply(predicate)&&!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)&&!NodeUtil.isExpressionNode(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)&&!NodeUtil.isExpressionNode(cur))  {	  if(cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
74	[BUG]  [BUGGY]  if(cur.apply(predicate)||!NodeUtil.mayHaveSideEffects(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||!NodeUtil.mayHaveSideEffects(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||!NodeUtil.mayHaveSideEffects(cur))  {	  if(cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
75	[BUG]  [BUGGY]  if(!cur.apply(predicate)&&!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(predicate)&&!NodeUtil.isExpressionNode(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(predicate)&&!NodeUtil.isExpressionNode(cur))  {	  if(cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
76	[BUG]  [BUGGY]  if(!cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))  {	  if(cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
77	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getFirstChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getFirstChild();	  Predicate    <    Node>    cfgNode    =    predicate.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
78	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getLastChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getLastChild();	  Predicate    <    Node>    cfgNode    =    predicate.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
79	[BUG]  [BUGGY]  Predicates.  <  Node>  cfgNode  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicates.  <  Node>  cfgNode  =  cur.getFirstChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicates.  <  Node>  cfgNode  =  cur.getFirstChild();	  Predicate    <    Node>    cfgNode    =    predicate.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
80	[BUG]  [BUGGY]  Node  cfgNode  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Node  cfgNode  =  cur.getFirstChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Node  cfgNode  =  cur.getFirstChild();	  Predicate    <    Node>    cfgNode    =    predicate.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
81	[BUG]  [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
82	[BUG]  [BUGGY]  if(!cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
83	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  cur)||  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
84	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
85	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
86	[BUG]  [BUGGY]  if(!cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
87	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  def);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  def);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  def);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
88	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  numUseWithinUseCfgNode);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  numUseWithinUseCfgNode);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
89	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defCfgNode);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defCfgNode);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defCfgNode);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
90	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(n,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(n,  expressionRoot,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(n,  expressionRoot,  predicate);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
91	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  p,  predicate);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  p,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  p,  predicate);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
92	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  n);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  n);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  n);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
93	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  p);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur,  p);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
94	[BUG]  [BUGGY]  NodeUtil.removeChild(cur.getString());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur.getString());  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur.getString());	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
95	[BUG]  [BUGGY]  NodeUtil.removeChild(cur.getNext());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur.getNext());  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur.getNext());	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
96	[BUG]  [BUGGY]  NodeUtil.removeChild(cur.getString(),  predicate);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur.getString(),  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur.getString(),  predicate);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
97	[BUG]  [BUGGY]  NodeUtil.removeChild(cur.getFirstChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur.getFirstChild());  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur.getFirstChild());	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
98	[BUG]  [BUGGY]  if(!p.apply(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur,  predicate))  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
99	[BUG]  [BUGGY]  if(!p.apply(cur)&&!predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)&&!predicate.isLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)&&!predicate.isLeftOf(cur))  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
100	[BUG]  [BUGGY]  if(!p.apply(cur)||!predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)||!predicate.isLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)||!predicate.isLeftOf(cur))  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
101	[BUG]  [BUGGY]  if(!p.apply(cur)&&!predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)&&!predicate.equals(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)&&!predicate.equals(cur.getString()))  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
102	[BUG]  [BUGGY]  if(!p.apply(cur),  predicate)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur),  predicate)  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
103	[BUG]  [BUGGY]  if(!p.apply(cur)&&!predicate.contains(cur))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)&&!predicate.contains(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)&&!predicate.contains(cur))  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
104	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.apply(predicate))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
105	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(expressionRoot))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
106	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(p))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
107	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(cfgNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(cfgNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(cfgNode,  predicate))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
108	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(cfgNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(cfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(cfgNode))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
109	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(expressionRoot,  predicate))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
110	[BUG]  [BUGGY]  if(!cur.removeFirstChild()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.removeFirstChild()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.removeFirstChild()  ||  cur.apply(predicate))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
111	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(cur))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
112	[BUG]  [BUGGY]  if(!cur.removeFirstChild()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.removeFirstChild()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.removeFirstChild()  ||  predicate.apply(cur))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
113	[BUG]  [BUGGY]  if(cur.removeFirstChild()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.removeFirstChild()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.removeFirstChild()  ||  cur.apply(predicate))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
114	[BUG]  [BUGGY]  if(!p.removeFirstChild()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.removeFirstChild()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.removeFirstChild()  ||  cur.apply(predicate))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
115	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(p))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
116	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(p,  expressionRoot)&&  predicate.apply(cur))  {	  if(predicate.checkLeftOf(p,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
117	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(p))  {	  if(predicate.checkLeftOf(p,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
118	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(defCfgNode))  {	  if(predicate.checkLeftOf(p,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
119	[BUG]  [BUGGY]  if(p.apply(cur)&&!predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)&&!predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)&&!predicate.hasChildren())  {	  if(p.apply(cur)||!predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
120	[BUG]  [BUGGY]  if(cur.apply(p)||!predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||!predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||!predicate.hasChildren())  {	  if(p.apply(cur)||!predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
121	[BUG]  [BUGGY]  if(predicate.apply(cur)||!predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)||!predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)||!predicate.hasChildren())  {	  if(p.apply(cur)||!predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
122	[BUG]  [BUGGY]  if(!p.apply(cur)&&!predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)&&!predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)&&!predicate.hasChildren())  {	  if(p.apply(cur)||!predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
123	[BUG]  [BUGGY]  if(!p.apply(cur)||!predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)||!predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)||!predicate.hasChildren())  {	  if(p.apply(cur)||!predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
124	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  ||  cur.apply(predicate))  {	  if(!predicate.removeLastChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
125	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.removeLastChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
126	[BUG]  [BUGGY]  if(!predicate.removeLast()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLast()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLast()  &&  predicate.apply(cur))  {	  if(!predicate.removeLast()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
127	[BUG]  [BUGGY]  if(!predicate.removeLast()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLast()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLast()  ||  cur.apply(predicate))  {	  if(!predicate.removeLast()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
128	[BUG]  [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.getFirstChild()  ||  predicate.apply(cur))  {	  if(!predicate.removeLast()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
129	[BUG]  [BUGGY]  if(!predicate.contains(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur)||  predicate.apply(cur))  {	  if(!predicate.removeLast()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
130	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  null))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  null))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
131	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
132	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate,  null))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate,  null))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
133	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot,  null))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  expressionRoot,  null))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
134	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
135	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  true))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  true))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot,  true))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
136	[BUG]  [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  &&  predicate.apply(cur.getNext()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
137	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(cur.getLastChild()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
138	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(cur.getString()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
139	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(cur.getNext()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
140	[BUG]  [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.getFirstChild()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.getFirstChild()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
141	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur.getNext()  +  1))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur.getNext()  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(cur.getNext()  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
142	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur))    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
143	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur))    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
144	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur))    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
145	[BUG]  [BUGGY]  if(checkLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(checkLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(checkLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur))    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
146	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  cur)||  predicate.checkLeftOf(n,  expressionRoot,  cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  cur)||  predicate.checkLeftOf(n,  expressionRoot,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot,  cur)||  predicate.checkLeftOf(n,  expressionRoot,  cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur))    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
147	[BUG]  [BUGGY]  if(predicate.apply(cur,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
148	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
149	[BUG]  [BUGGY]  if(predicate.apply(n,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(n,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(n,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
150	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
151	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
152	[BUG]  [BUGGY]  if(cur.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
153	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {	  if(predicate.checkLeftOf(n,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
154	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(n,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
155	[BUG]  [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {	  if(predicate.checkLeftOf(n,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
156	[BUG]  [BUGGY]  if(p.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(n,  expressionRoot)&&  predicate.apply(cur))  {	  if(predicate.checkLeftOf(n,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
157	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(p))  {	  if(predicate.checkLeftOf(n,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
158	[BUG]  [BUGGY]  if(cur.apply(p,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p,  predicate))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
159	[BUG]  [BUGGY]  if(!cur.apply(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(p,  expressionRoot))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
160	[BUG]  [BUGGY]  if(cur.apply(cfgNode,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cfgNode,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cfgNode,  expressionRoot))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
161	[BUG]  [BUGGY]  if(cur.apply(p)||  isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  isLeftOf(expressionRoot,  predicate))  {	  if(predicate.apply(p)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
162	[BUG]  [BUGGY]  if(cur.apply(p)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(p)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
163	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  isLeftOf(expressionRoot,  predicate))  {	  if(predicate.apply(p)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
164	[BUG]  [BUGGY]  if(!cur.removeFirst()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.removeFirst()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.removeFirst()  ||  cur.apply(predicate))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
165	[BUG]  [BUGGY]  if(!predicate.removeFirst()  &&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  &&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  &&  cur.apply(predicate))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
166	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(cur))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
167	[BUG]  [BUGGY]  if(cur.removeFirst()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.removeFirst()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.removeFirst()  ||  cur.apply(predicate))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
168	[BUG]  [BUGGY]  if(!cur.removeFirst()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.removeFirst()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.removeFirst()  ||  predicate.apply(cur))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
169	[BUG]  [BUGGY]  if(!p.removeFirst()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.removeFirst()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.removeFirst()  ||  cur.apply(predicate))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
170	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(p))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
171	[BUG]  [BUGGY]  if(!predicate.apply(cur),  false)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur),  false)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur),  false)  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
172	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  true)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  true)  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
173	[BUG]  [BUGGY]  if(!predicate.apply(cur,  false))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  false))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  false))  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
174	[BUG]  [BUGGY]  if(!predicate.apply(cur,  true))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  true))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  true))  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
175	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode)  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
176	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  true)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&  true)  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
177	[BUG]  [BUGGY]  if(!p.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur,  expressionRoot))  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
178	[BUG]  [BUGGY]  if(cur.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur,  expressionRoot))  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
179	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)||  cur.apply(predicate))  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
180	[BUG]  [BUGGY]  if(cur.apply(cur),  predicate)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur),  predicate)  {	  if(p.apply(cur),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
181	[BUG]  [BUGGY]  if(p.apply(cur),  expressionRoot)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur),  expressionRoot)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur),  expressionRoot)  {	  if(p.apply(cur),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
182	[BUG]  [BUGGY]  if(cur.apply(p),  predicate)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p),  predicate)  {	  if(p.apply(cur),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
183	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot),  predicate)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot),  predicate)  {	  if(p.apply(cur),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
184	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
185	[BUG]  [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(n,  expressionRoot))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
186	[BUG]  [BUGGY]  if(!cur.checkLeftOf(defNode,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(defNode,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(defNode,  expressionRoot))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
187	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  predicate))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
188	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  expressionRoot,  predicate))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
189	[BUG]  [BUGGY]  if(!cur.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(p,  expressionRoot))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
190	[BUG]  [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(def,  expressionRoot))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
191	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  &&  predicate.apply(cur  +  1))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
192	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(cur  +  1))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
193	[BUG]  [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLastChild()  ||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLastChild()  ||  predicate.apply(cur  +  1))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
194	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getNext()  +  1))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getNext()  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getNext()  +  1))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
195	[BUG]  [BUGGY]  if(cur.apply(cfgNode,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cfgNode,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cfgNode,  expressionRoot,  predicate))  {	  if(cur.apply(cfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
196	[BUG]  [BUGGY]  if(!cur.apply(cfgNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(cfgNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(cfgNode,  predicate))  {	  if(cur.apply(cfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
197	[BUG]  [BUGGY]  if(!cur.apply(cfgNode,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(cfgNode,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(cfgNode,  expressionRoot))  {	  if(cur.apply(cfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
198	[BUG]  [BUGGY]  if(cur.apply(n,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n,  expressionRoot,  predicate))  {	  if(cur.apply(cfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
199	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(n))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
200	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(predicate))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
201	[BUG]  [BUGGY]  if(cur.apply(cur)&&  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)&&  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)&&  cur.apply(n))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
202	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(p))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
203	[BUG]  [BUGGY]  if(p.apply(cur)&&  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)&&  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)&&  cur.apply(n))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
204	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(n,  predicate))  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(n,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(n,  predicate))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
205	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(c))  {  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(c))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(c))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
206	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  &&  predicate.apply(cur.getNext()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
207	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
208	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getString()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
209	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(cur.getNext()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
210	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getLineno()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getLineno()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getLineno()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
211	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  &&  predicate.apply(cur))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
212	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  ||  cur.apply(predicate))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
213	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
214	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
215	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  ||  predicate.apply(cur,  cur))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
216	[BUG]  [BUGGY]  if(!predicate.containsChild(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsChild(cur)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsChild(cur)||  predicate.apply(cur))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
217	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
218	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
219	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
220	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
221	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)&&  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
222	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(predicate))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
223	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(p))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
224	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(expressionRoot))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
225	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  &&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.FUNCTION  &&  cur.apply(predicate))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
226	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(cfgNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(cfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(cfgNode))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
227	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(defRoot))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
228	[BUG]  [BUGGY]  if(!p.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.checkLeftOf(cur,  expressionRoot))  {	  if(p.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
229	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.equals(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)||  predicate.equals(cur.getString()))  {	  if(p.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
230	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.equals(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.equals(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.equals(expressionRoot))  {	  if(p.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
231	[BUG]  [BUGGY]  if(!cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(defRoot))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
232	[BUG]  [BUGGY]  if(cur.apply(defRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defRoot,  predicate))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
233	[BUG]  [BUGGY]  if(!cur.apply(defNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(defNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(defNode))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
234	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)||!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)||!predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(n,  expressionRoot)||!predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)||!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
235	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(cur  +  1))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)||!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
236	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)||!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)||!predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(p,  expressionRoot)||!predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)||!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
237	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(p))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)||!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
238	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(cur),  true)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(cur),  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.apply(cur),  true)  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)||!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
239	[BUG]  [BUGGY]  if(!cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(p))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
240	[BUG]  [BUGGY]  if(!cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(expressionRoot))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
241	[BUG]  [BUGGY]  if(!cur.apply(cfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(cfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(cfgNode))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
242	[BUG]  [BUGGY]  if(!cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(n))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
243	[BUG]  [BUGGY]  if(!cur.apply(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(cur))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
244	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur,  expressionRoot))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
245	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur,  cur))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
246	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur  +  1))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
247	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)&&!numUseWithinUseCfgNode)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)&&!numUseWithinUseCfgNode)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)&&!numUseWithinUseCfgNode)  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
248	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||  predicate.hasChildren())  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
249	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||  predicate.getType()  ==  Token.FUNCTION)  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
250	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.getType()  ==  Token.NAME)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||  predicate.getType()  ==  Token.NAME)  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
251	[BUG]  [BUGGY]  if(cur.apply(predicate)||  isLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  isLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  isLeftOf(p,  expressionRoot))  {	  if(predicate.apply(cur)||    isLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
252	[BUG]  [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)&&  isLeftOf(p,  expressionRoot))  {	  if(predicate.apply(cur)||    isLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
253	[BUG]  [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)&&  isLeftOf(p,  expressionRoot))  {	  if(predicate.apply(cur)||    isLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
254	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  isLeftOf(p,  expressionRoot))  {	  if(predicate.apply(cur)||    isLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
255	[BUG]  [BUGGY]  if(cur.apply(defCfgNode)||  isLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode)||  isLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode)||  isLeftOf(p,  expressionRoot))  {	  if(predicate.apply(cur)||    isLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
256	[BUG]  [BUGGY]  if(!p.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur.getNext()))  {	  if(p.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
257	[BUG]  [BUGGY]  if(p.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur.getNext()))  {	  if(p.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
258	[BUG]  [BUGGY]  if(!cur.checkLeftOf(def,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(def,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(def,  expressionRoot))  {	  if(cur.checkLeftOf(defCfgNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
259	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  predicate))  {	  if(cur.checkLeftOf(defCfgNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
260	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  defCfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  defCfgNode))  {	  if(cur.checkLeftOf(defCfgNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
261	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  cur)&&  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
262	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  expressionRoot)&&  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
263	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
264	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
265	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(p))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
266	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(n,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
267	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
268	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(n,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
269	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(n,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
270	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
271	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)||  cur.apply(defCfgNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)||  cur.apply(defCfgNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)||  cur.apply(defCfgNode,  predicate))  {	  if(p.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
272	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {	  if(p.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
273	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
274	[BUG]  [BUGGY]  if(!isLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!isLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!isLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
275	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)||  predicate.apply(p))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
276	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)||  predicate.apply(predicate))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
277	[BUG]  [BUGGY]  if(!isLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!isLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!isLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
278	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
279	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
280	[BUG]  [BUGGY]  if(cur.apply(n)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n)||  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
281	[BUG]  [BUGGY]  if(cur.apply(defCfgNode)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode)||  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
282	[BUG]  [BUGGY]  if(cur.apply(defCfgNode)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode)&&  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
283	[BUG]  [BUGGY]  if(cur.apply(defNode)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defNode)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defNode)||  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
284	[BUG]  [BUGGY]  if(cur.apply(predicate)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  cur.apply(p))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
285	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
286	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
287	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
288	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
289	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  cur)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
290	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
291	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
292	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&  cur.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
293	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  cur)&&  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
294	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
295	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot,  true)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot,  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur),  expressionRoot,  true)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
296	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(p,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
297	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.FUNCTION)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
298	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.NAME)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
299	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.GETPROP)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur),  expressionRoot  ||  cur.getType()  ==  Token.GETPROP)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
300	[BUG]  [BUGGY]  if(!predicates.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicates.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicates.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWith    	non-compiled	[CE]  <identifier>  expected	52	None	replace
301	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUs  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUs  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUs	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWith    	non-compiled	[CE]  <identifier>  expected	52	None	replace
302	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWith    	non-compiled	[CE]  <identifier>  expected	52	None	replace
303	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(def))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(def))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
304	[BUG]  [BUGGY]  if(cur.apply(cur)&&  cur.apply(def))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)&&  cur.apply(def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)&&  cur.apply(def))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
305	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(def))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  cur.apply(def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  cur.apply(def))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
306	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(defCfgNode))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
307	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(defNode))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(defNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(defNode))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
308	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(def,  predicate))  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(def,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(def,  predicate))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
309	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur))  {	  if(predicate.checkLeftOf(n,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
310	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(n,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
311	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(n))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(n))  {	  if(predicate.checkLeftOf(n,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
312	[BUG]  [BUGGY]  if(defCfgNode.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(defCfgNode.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(defCfgNode.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
313	[BUG]  [BUGGY]  if(p.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
314	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.getType()))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.getType()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.getType()))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
315	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.next()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.next()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.next()))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
316	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  true))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  true))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  true))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
317	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getNext();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  predicate.getNext();	  Predicate    <    Node>    cfgNode    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
318	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getNext()  +  1;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getNext()  +  1;  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getNext()  +  1;	  Predicate    <    Node>    cfgNode    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
319	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getPrevious();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getPrevious();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getPrevious();	  Predicate    <    Node>    cfgNode    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
320	[BUG]  [BUGGY]  if(predicate.apply(cur)||!predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)||!predicate.isLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)||!predicate.isLeftOf(cur))  {	  if(p.apply(cur)||!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
321	[BUG]  [BUGGY]  if(p.apply(cur)&&!predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)&&!predicate.isLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)&&!predicate.isLeftOf(cur))  {	  if(p.apply(cur)||!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
322	[BUG]  [BUGGY]  if(cur.apply(p)||!predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||!predicate.isLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||!predicate.isLeftOf(cur))  {	  if(p.apply(cur)||!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
323	[BUG]  [BUGGY]  if(!predicate.apply(cur)||!predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||!predicate.isLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||!predicate.isLeftOf(cur))  {	  if(p.apply(cur)||!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
324	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||  p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||  p.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||  p.apply(cur))  {	  if(p.apply(cur)||!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
325	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(expressionRoot,  predicate))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
326	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(p,  expressionRoot))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
327	[BUG]  [BUGGY]  if(!cur.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
328	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
329	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
330	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
331	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
332	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  cur)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
333	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  expressionRoot);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
334	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  p);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  p);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
335	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  expressionRoot,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  expressionRoot,  predicate);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
336	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  p);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate,  p);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
337	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  expressionRoot);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate,  expressionRoot);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
338	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(n,  predicate);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(n,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(n,  predicate);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
339	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  def);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  def);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate,  def);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
340	[BUG]  [BUGGY]  if(cur.apply(cfgNode)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cfgNode)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cfgNode)||  cur.apply(predicate))  {	  if(cur.apply(p)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
341	[BUG]  [BUGGY]  if(cur.apply(n)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n)||  cur.apply(predicate))  {	  if(cur.apply(p)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
342	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  cur.apply(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  cur.apply(expressionRoot,  predicate))  {	  if(cur.apply(p)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
343	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  cur.apply(defRoot))  {	  if(cur.apply(p)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
344	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur,  expressionRoot);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
345	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  predicate,  p);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur,  predicate,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur,  predicate,  p);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
346	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  predicate);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(n,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(n,  predicate);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
347	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  predicate,  expressionRoot);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur,  predicate,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur,  predicate,  expressionRoot);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
348	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  predicate,  def);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur,  predicate,  def);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur,  predicate,  def);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
349	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
350	[BUG]  [BUGGY]  if(!cur.apply(predicate)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(predicate)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(predicate)&&  isLeftOf(cur,  expressionRoot))  {	  if(cur.apply(predicate)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
351	[BUG]  [BUGGY]  if(cur.apply(defCfgNode)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode)||  isLeftOf(cur,  expressionRoot))  {	  if(cur.apply(predicate)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
352	[BUG]  [BUGGY]  if(cur.apply(defCfgNode)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode)&&  isLeftOf(cur,  expressionRoot))  {	  if(cur.apply(predicate)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
353	[BUG]  [BUGGY]  if(!cur.apply(predicate)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(predicate)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(predicate)||  isLeftOf(cur,  expressionRoot))  {	  if(cur.apply(predicate)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
354	[BUG]  [BUGGY]  if(cur.apply(predicate)||  isLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  isLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  isLeftOf(n,  expressionRoot))  {	  if(cur.apply(predicate)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
355	[BUG]  [BUGGY]  if(cur.apply(n,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n,  predicate))  {	  if(cur.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
356	[BUG]  [BUGGY]  if(!cur.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(n,  expressionRoot))  {	  if(cur.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
357	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  cur))  {	  if(!predicate.checkLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
358	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur  +  1))  {	  if(!predicate.checkLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
359	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur),  true)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur),  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur),  true)  {	  if(!predicate.checkLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
360	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(cur))  {	  if(!predicate.checkLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
361	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur))  {	  if(!predicate.checkLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
362	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot,  predicate.next()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot,  predicate.next()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot,  predicate.next()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
363	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  predicate.next()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  predicate.next()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  predicate.next()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
364	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot,  cur.getNext()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
365	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot,  cur.getNext()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
366	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot,  predicate.getNext()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot,  predicate.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot,  predicate.getNext()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
367	[BUG]  [BUGGY]  if(cur.apply(p)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)&&  isLeftOf(cur,  expressionRoot))  {	  if(cur.apply(predicate)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
368	[BUG]  [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)&&  isLeftOf(n,  expressionRoot))  {	  if(cur.apply(predicate)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
369	[BUG]  [BUGGY]  if(cur.apply(n)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n)&&  isLeftOf(cur,  expressionRoot))  {	  if(cur.apply(predicate)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
370	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(p,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
371	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(p,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
372	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(p,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
373	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
374	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
375	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)||  predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur)||  predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  cur)||  predicate.checkLeftOf(p,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
376	[BUG]  [BUGGY]  if(!predicate.contains(cur.getString()))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur.getString()))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
377	[BUG]  [BUGGY]  if(!predicate.contains(cur.getType()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur.getType()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur.getType()))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
378	[BUG]  [BUGGY]  if(!predicate.contains(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur.getNext()))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
379	[BUG]  [BUGGY]  if(!predicate.contains(cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur.getLastChild()))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
380	[BUG]  [BUGGY]  if(!predicate.contains(cur.getString())||!predicate.contains(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur.getString())||!predicate.contains(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur.getString())||!predicate.contains(cur.getString()))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
381	[BUG]  [BUGGY]  if(!predicate.containsKey(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsKey(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsKey(cur.getString()))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
382	[BUG]  [BUGGY]  if(!predicate.contains(cur.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur.getFirstChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur.getFirstChild()))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
383	[BUG]  [BUGGY]  if(cur.apply(def,  cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def,  cur))  {	  if(cur.apply(defCfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
384	[BUG]  [BUGGY]  if(cur.apply(def,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def,  expressionRoot,  predicate))  {	  if(cur.apply(defCfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
385	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(predicate);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(predicate);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
386	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  def);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  def);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  def);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
387	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
388	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(n,  predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(n,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(n,  predicate);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
389	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(p,  predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(p,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(p,  predicate);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
390	[BUG]  [BUGGY]  NodeUtil.checkDeprecated(cur,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkDeprecated(cur,  expressionRoot,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkDeprecated(cur,  expressionRoot,  predicate);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
391	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  p);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  p);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
392	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getPredicate();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getPredicate();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getPredicate();	  Predicate    <    Node>    cfgNode    =    cur.getParent();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
393	[BUG]  [BUGGY]  if(cur.apply(expressionRoot)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(expressionRoot)||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(expressionRoot)||  cur.apply(p))  {	  if(cur.apply(expressionRoot)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
394	[BUG]  [BUGGY]  if(cur.apply(expressionRoot)&&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(expressionRoot)&&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(expressionRoot)&&  cur.apply(predicate))  {	  if(cur.apply(expressionRoot)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
395	[BUG]  [BUGGY]  if(cur.apply(defCfgNode)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode)||  cur.apply(predicate))  {	  if(cur.apply(expressionRoot)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
396	[BUG]  [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(n,  expressionRoot,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
397	[BUG]  [BUGGY]  if(!cur.checkLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(expressionRoot,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
398	[BUG]  [BUGGY]  if(!cur.checkLeftOf(n,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(n,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(n,  expressionRoot,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
399	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
400	[BUG]  [BUGGY]  if(!cur.checkLeftOf(p,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.checkLeftOf(p,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.checkLeftOf(p,  expressionRoot,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
401	[BUG]  [BUGGY]  if(!p.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)&&  isLeftOf(cur,  expressionRoot))  {	  if(p.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
402	[BUG]  [BUGGY]  if(p.apply(cur)||  isLeftOf(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)||  isLeftOf(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)||  isLeftOf(cur,  predicate))  {	  if(p.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
403	[BUG]  [BUGGY]  if(!p.apply(cur)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)||  isLeftOf(cur,  expressionRoot))  {	  if(p.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
404	[BUG]  [BUGGY]  if(!predicate.getFirst()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.getFirst()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.getFirst()  &&  predicate.apply(cur))  {	  if(!predicate.removeFirst()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
405	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getParent();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  cur.getParent();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  cur.getParent();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
406	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getNext();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  cur.getNext();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  cur.getNext();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
407	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getPredicate();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  cur.getPredicate();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  cur.getPredicate();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
408	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  cur.getLastChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  cur.getLastChild();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
409	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getPrevious();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  cur.getPrevious();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  cur.getPrevious();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
410	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  cur.getFirstChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  cur.getFirstChild();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
411	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  predicate.getNext();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  predicate.getNext();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
412	[BUG]  [BUGGY]  if(predicate.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
413	[BUG]  [BUGGY]  if(predicate.apply(cur,  expressionRoot)||  predicate.apply(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur,  expressionRoot)||  predicate.apply(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur,  expressionRoot)||  predicate.apply(p,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
414	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
415	[BUG]  [BUGGY]  if(cur.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur,  expressionRoot)&&  predicate.apply(n,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
416	[BUG]  [BUGGY]  if(cur.apply(cur,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
417	[BUG]  [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(def,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
418	[BUG]  [BUGGY]  if(!cur.apply(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(expressionRoot,  predicate))  {	  if(cur.apply(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
419	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  expressionRoot,  predicate))  {	  if(cur.apply(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
420	[BUG]  [BUGGY]  if(cur.apply(def,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def,  predicate))  {	  if(cur.apply(def,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
421	[BUG]  [BUGGY]  if(!cur.apply(def,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(def,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(def,  expressionRoot))  {	  if(cur.apply(def,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
422	[BUG]  [BUGGY]  if(cur.apply(cfgNode,  def,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cfgNode,  def,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cfgNode,  def,  expressionRoot))  {	  if(cur.apply(def,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
423	[BUG]  [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  &&  predicate.apply(cur  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
424	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(cur  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
425	[BUG]  [BUGGY]  if(!predicate.removeLast()  ||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeLast()  ||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeLast()  ||  predicate.apply(cur  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
426	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur  +  1);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(cur  +  1);	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
427	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getName();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getName();	  Predicate    <    Node>    cfgNode    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	110	None	replace
428	[BUG]  [BUGGY]  if(cur.apply(cur)&&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)&&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)&&  cur.apply(predicate))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
429	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(expressionRoot))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
430	[BUG]  [BUGGY]  if(cur.apply(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  predicate.apply(cur))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
431	[BUG]  [BUGGY]  if(cur.apply(cur)||  cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cur)||  cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cur)||  cur.apply(defRoot))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
432	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
433	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
434	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
435	[BUG]  [BUGGY]  if(defCfgNode.checkLeftOf(cur,  expressionRoot)||  defCfgNode.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(defCfgNode.checkLeftOf(cur,  expressionRoot)||  defCfgNode.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(defCfgNode.checkLeftOf(cur,  expressionRoot)||  defCfgNode.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
436	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
437	[BUG]  [BUGGY]  if(cur.apply(predicate,  defCfgNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  defCfgNode))  {	  if(cur.apply(defCfgNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
438	[BUG]  [BUGGY]  if(cur.apply(p,  defCfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p,  defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p,  defCfgNode))  {	  if(cur.apply(defCfgNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
439	[BUG]  [BUGGY]  if(!predicate.apply(n)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(n)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(n)||  isLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
440	[BUG]  [BUGGY]  if(!predicate.apply(p)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(p)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(p)||  isLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
441	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot,  cur.getType()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot,  cur.getType()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot,  cur.getType()))  {	  if(!predicate.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
442	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  cur)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  cur)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  cur)&&  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
443	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  cur)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  cur)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  cur)||  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
444	[BUG]  [BUGGY]  if(cur.apply(defNode,  cur)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defNode,  cur)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defNode,  cur)&&  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
445	[BUG]  [BUGGY]  if(cur.apply(defNode,  cur)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defNode,  cur)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defNode,  cur)||  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
446	[BUG]  [BUGGY]  if(defCfgNode.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(defCfgNode.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(defCfgNode.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
447	[BUG]  [BUGGY]  if(cur.apply(def,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
448	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  cur)||  predicate.apply(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  cur)||  predicate.apply(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  cur)||  predicate.apply(p,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
449	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
450	[BUG]  [BUGGY]  if(predicate.apply(cur,  expressionRoot)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur,  expressionRoot)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur,  expressionRoot)&&  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
451	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  isLeftOf(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  isLeftOf(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)||  isLeftOf(cur,  predicate))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
452	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
453	[BUG]  [BUGGY]  if(predicate.apply(n,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(n,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(n,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
454	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  cur)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  cur)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  cur)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
455	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {	  if(p.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
456	[BUG]  [BUGGY]  if(!p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {	  if(p.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
457	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(p.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
458	[BUG]  [BUGGY]  if(!predicate.containsFirst()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  &&  predicate.apply(cur))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
459	[BUG]  [BUGGY]  if(!predicate.containsFirst()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  ||  cur.apply(predicate))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
460	[BUG]  [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
461	[BUG]  [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
462	[BUG]  [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  ||  predicate.apply(cur.getLastChild()))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
463	[BUG]  [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  ||  predicate.apply(cur,  cur))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
464	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot,  predicate))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
465	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot,  null))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot,  null))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
466	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot),  true)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot),  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot),  true)  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
467	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isFunctionDeclaration(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isFunctionDeclaration(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isFunctionDeclaration(cur))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
468	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot,  cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot,  cur))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
469	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isFunctionAnonymous(cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isFunctionAnonymous(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isFunctionAnonymous(cur))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
470	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(cfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  cur.apply(cfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  cur.apply(cfgNode))  {	  if(cur.apply(cfgNode))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
471	[BUG]  [BUGGY]  if(cur.apply(cfgNode)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cfgNode)||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cfgNode)||  cur.apply(p))  {	  if(cur.apply(cfgNode))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
472	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getType()  ==  Token.NAME)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  &&  cur.getType()  ==  Token.NAME)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
473	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  &&  cur.getType()  ==  Token.FUNCTION)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
474	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.NAME)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
475	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.FUNCTION)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
476	[BUG]  [BUGGY]  if(!cur.detachFromParent())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.detachFromParent())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.detachFromParent())  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
477	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  &&  cur.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
478	[BUG]  [BUGGY]  if(!predicate.detachFromRoot())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromRoot())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromRoot())  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
479	[BUG]  [BUGGY]  if(!predicate.apply(cur)||!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUse    	non-compiled	[CE]  <identifier>  expected	53	None	replace
480	[BUG]  [BUGGY]  if(!predicates.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicates.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicates.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUse    	non-compiled	[CE]  <identifier>  expected	53	None	replace
481	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  +  1  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  +  1  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  +  1	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUse    	non-compiled	[CE]  <identifier>  expected	53	None	replace
482	[BUG]  [BUGGY]  if(!predicate.clear()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  &&  predicate.apply(cur))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
483	[BUG]  [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
484	[BUG]  [BUGGY]  if(!predicate.clear()  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  cur.apply(predicate))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
485	[BUG]  [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  predicate.apply(cur,  cur))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
486	[BUG]  [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
487	[BUG]  [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  predicate.apply(cur.getString()))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
488	[BUG]  [BUGGY]  n.removeChild(cur.getString());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.removeChild(cur.getString());  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.removeChild(cur.getString());	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
489	[BUG]  [BUGGY]  n.removeChild(cur.getNext());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.removeChild(cur.getNext());  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.removeChild(cur.getNext());	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
490	[BUG]  [BUGGY]  n.removeChild(predicate);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.removeChild(predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.removeChild(predicate);	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
491	[BUG]  [BUGGY]  n.removeChild(cur.cloneTree());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.removeChild(cur.cloneTree());  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.removeChild(cur.cloneTree());	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
492	[BUG]  [BUGGY]  n.removeChild(cur.getFirstChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.removeChild(cur.getFirstChild());  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.removeChild(cur.getFirstChild());	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
493	[BUG]  [BUGGY]  n.replaceChild(cur,  predicate);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.replaceChild(cur,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.replaceChild(cur,  predicate);	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
494	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(p))  {	  if(predicate.checkLeftOf(p,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
495	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(defCfgNode))  {	  if(predicate.checkLeftOf(p,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
496	[BUG]  [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
497	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUs    	non-compiled	[CE]  <identifier>  expected	51	None	replace
498	[BUG]  [BUGGY]  if(!predicate.containsKey(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsKey(cur)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsKey(cur)||  predicate.apply(cur))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
499	[BUG]  [BUGGY]  if(predicate.containsFirst()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.containsFirst()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.containsFirst()  ||  predicate.apply(cur))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
500	[BUG]  [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  ||  predicate.apply(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {	  if(!predicate.containsFirst()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
501	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate,  expressionRoot);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate,  expressionRoot);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  predicate,  expressionRoot);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
502	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(predicate,  cur);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(predicate,  cur);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(predicate,  cur);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
503	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate,  p);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  predicate,  p);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
504	[BUG]  [BUGGY]  if(cur.apply(cfgNode,  predicate)||  cur.apply(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cfgNode,  predicate)||  cur.apply(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cfgNode,  predicate)||  cur.apply(expressionRoot,  predicate))  {	  if(cur.apply(cfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
505	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  false)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  false)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  false)  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
506	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  *  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  *  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur  *  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
507	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  ||  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
508	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
509	[BUG]  [BUGGY]  if(cur.apply(def)||  cur.apply(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def)||  cur.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def)||  cur.apply(cur))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
510	[BUG]  [BUGGY]  if(p.apply(cur)&&  cur.apply(def))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)&&  cur.apply(def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)&&  cur.apply(def))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
511	[BUG]  [BUGGY]  if(cur.apply(p,  expressionRoot)||  cur.apply(n,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p,  expressionRoot)||  cur.apply(n,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p,  expressionRoot)||  cur.apply(n,  predicate))  {	  if(cur.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
512	[BUG]  [BUGGY]  if(predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(n,  expressionRoot))  {	  if(cur.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
513	[BUG]  [BUGGY]  if(cur.apply(predicate,  cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  cur))  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
514	[BUG]  [BUGGY]  if(p.apply(cur,  predicate)||!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  predicate)||!NodeUtil.isExpressionNode(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  predicate)||!NodeUtil.isExpressionNode(cur))  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
515	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)||  predicate!=  null)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)||  predicate!=  null)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)||  predicate!=  null)  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
516	[BUG]  [BUGGY]  if(p.apply(cur,  predicate)&&!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  predicate)&&!NodeUtil.isExpressionNode(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  predicate)&&!NodeUtil.isExpressionNode(cur))  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
517	[BUG]  [BUGGY]  if(!predicate.contains(p))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(p))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
518	[BUG]  [BUGGY]  if(!predicate.contains(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur,  expressionRoot))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
519	[BUG]  [BUGGY]  if(!predicate.containsKey(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsKey(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsKey(cur))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
520	[BUG]  [BUGGY]  if(!predicate.contains(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
521	[BUG]  [BUGGY]  if(p.apply(cur)||  predicate  ==  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)||  predicate  ==  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)||  predicate  ==  SIDE_EFFECT_PREDICATE)  {	  if(p.apply(cur),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
522	[BUG]  [BUGGY]  if(p.apply(cur)||  predicate!=  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)||  predicate!=  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)||  predicate!=  SIDE_EFFECT_PREDICATE)  {	  if(p.apply(cur),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
523	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot),  predicate)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot),  predicate)  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
524	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.mayHaveSideEffects(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.mayHaveSideEffects(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.mayHaveSideEffects(cur))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
525	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isExpressionNode(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isExpressionNode(cur))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
526	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  predicate.equals(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  predicate.equals(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)||  predicate.equals(expressionRoot))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
527	[BUG]  [BUGGY]  if(!predicate.apply(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(p,  expressionRoot))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
528	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(expressionRoot))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
529	[BUG]  [BUGGY]  if(cur.apply(p,  defNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p,  defNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p,  defNode))  {	  if(cur.apply(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
530	[BUG]  [BUGGY]  if(cur.apply(n,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
531	[BUG]  [BUGGY]  if(predicate.apply(p,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(p,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(p,  expressionRoot)||  predicate.apply(n,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
532	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  cur  ==  expressionRoot  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  cur  ==  expressionRoot  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  cur  ==  expressionRoot	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinU    	non-compiled	[CE]  <identifier>  expected	55	None	replace
533	[BUG]  [BUGGY]  if(cur.apply(p)&&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)&&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)&&  cur.apply(predicate))  {	  if(cur.apply(p)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
534	[BUG]  [BUGGY]  if(cur.apply(predicate)||!predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||!predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||!predicate.hasChildren())  {	  if(p.apply(cur)||!predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
535	[BUG]  [BUGGY]  if(!predicate.equals(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.equals(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.equals(cur))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
536	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.equals(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.equals(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||  predicate.equals(expressionRoot))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
537	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.hasChildren())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||!predicate.hasChildren())  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
538	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)&&!NodeUtil.isFunction(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)&&!NodeUtil.isFunction(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)&&!NodeUtil.isFunction(cur))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
539	[BUG]  [BUGGY]  if(!predicate.isLeftOf(p))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(p))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
540	[BUG]  [BUGGY]  if(!cur.apply(defCfgNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(defCfgNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(defCfgNode,  predicate))  {	  if(cur.apply(defCfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
541	[BUG]  [BUGGY]  if(cur.apply(defNode,  predicate)||  cur.apply(defCfgNode,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defNode,  predicate)||  cur.apply(defCfgNode,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defNode,  predicate)||  cur.apply(defCfgNode,  predicate))  {	  if(cur.apply(defCfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
542	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  predicate)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  predicate)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  predicate)||  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
543	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  predicate)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  predicate)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  predicate)&&  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
544	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  p)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  p)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  p)||  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
545	[BUG]  [BUGGY]  if(cur.apply(def,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def,  expressionRoot)&&  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
546	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  predicate)||  cur.apply(defParent,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  predicate)||  cur.apply(defParent,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  predicate)||  cur.apply(defParent,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
547	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||!cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||!cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||!cur.apply(predicate))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
548	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||!cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||!cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  ||!cur.apply(predicate))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
549	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||!cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||!cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||!cur.apply(p))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
550	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
551	[BUG]  [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)&&  isLeftOf(expressionRoot,  predicate))  {	  if(cur.apply(predicate)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
552	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  null)||  predicate.checkLeftOf(n,  expressionRoot,  null))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  null)||  predicate.checkLeftOf(n,  expressionRoot,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot,  null)||  predicate.checkLeftOf(n,  expressionRoot,  null))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
553	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getLastChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getLastChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  predicate.getLastChild();	  Predicate    <    Node>    cfgNode    =    predicate.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
554	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getfirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getfirstChild();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getfirstChild();	  Predicate    <    Node>    cfgNode    =    predicate.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
555	[BUG]  [BUGGY]  if(!predicate.containsNext()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsNext()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsNext()  ||  predicate.apply(cur))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
556	[BUG]  [BUGGY]  if(predicate.apply(n)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(n)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(n)&&  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(n)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
557	[BUG]  [BUGGY]  if(predicate.apply(n)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(n)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(n)||  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(n)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
558	[BUG]  [BUGGY]  if(cur.apply(n)||  isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n)||  isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n)||  isLeftOf(expressionRoot,  predicate))  {	  if(predicate.apply(n)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
559	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  expressionRoot)&&  predicate.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
560	[BUG]  [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
561	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
562	[BUG]  [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(def,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
563	[BUG]  [BUGGY]  if(predicate.apply(p,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(p,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(p,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
564	[BUG]  [BUGGY]  if(predicate.apply(cfgNode,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cfgNode,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cfgNode,  expressionRoot)||  predicate.apply(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
565	[BUG]  [BUGGY]  if(predicate.removeFirst()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.removeFirst()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.removeFirst()  ||  predicate.apply(cur))  {	  if(!predicate.removeFirst()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
566	[BUG]  [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
567	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)&&  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
568	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  predicate.cloneTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  predicate.cloneTree();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  predicate.cloneTree();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
569	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getGrandparent();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  p  =  cur.getGrandparent();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  p  =  cur.getGrandparent();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
570	[BUG]  [BUGGY]  Predicates.  <  Node>  p  =  cur.getParent();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicates.  <  Node>  p  =  cur.getParent();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicates.  <  Node>  p  =  cur.getParent();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
571	[BUG]  [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.removeFirstChild()  ||  predicate.apply(cur))  {	  if(!predicate.removeFirstChild()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
572	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
573	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(p,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
574	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(cur,  expressionRoot))  {	  if(p.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
575	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)||  predicate.checkLeftOf(n,  expressionRoot))  {	  if(p.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
576	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  predicate))  {	  if(p.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
577	[BUG]  [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(p,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(p,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
578	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(expressionRoot))  {	  if(predicate.checkLeftOf(p,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
579	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.checkLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.checkLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.checkLeftOf(expressionRoot,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
580	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.checkLeftOf(n,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.checkLeftOf(n,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  cur.checkLeftOf(n,  expressionRoot,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
581	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  predicate))  {	  if(cur.checkLeftOf(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
582	[BUG]  [BUGGY]  if(cur.contains(p)||  cur.apply(cfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.contains(p)||  cur.apply(cfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.contains(p)||  cur.apply(cfgNode))  {	  if(cur.apply(cfgNode))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
583	[BUG]  [BUGGY]  if(cur.apply(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode))  {	  if(cur.apply(cfgNode))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
584	[BUG]  [BUGGY]  if(cur.apply(p)||  predicate.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  predicate.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  predicate.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
585	[BUG]  [BUGGY]  if(defCfgNode.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(defCfgNode.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(defCfgNode.apply(cur)||  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(cur)||    isLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
586	[BUG]  [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)&&  isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)&&  isLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.apply(cur)||    isLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
587	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  cur.apply(n))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
588	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.NAME  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.NAME  ||  cur.apply(predicate))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
589	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  ||  predicate.apply(cur))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
590	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(n))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
591	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  &&  predicate.apply(cur,  predicate))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
592	[BUG]  [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
593	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(p,  cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(p,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(p,  cur))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
594	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(predicate.getNext()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(predicate.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(predicate.getNext()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
595	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  &&  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  &&  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  &&  predicate.apply(cur.getNext()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
596	[BUG]  [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.removeFirstChild()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.removeFirstChild()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
597	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(defRoot))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
598	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(defRoot))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
599	[BUG]  [BUGGY]  if(cur.apply(expressionRoot)||  cur.apply(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(expressionRoot)||  cur.apply(defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(expressionRoot)||  cur.apply(defCfgNode))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
600	[BUG]  [BUGGY]  if(cur.apply(predicate)||  isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  isLeftOf(expressionRoot,  predicate))  {	  if(predicate.apply(p)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
601	[BUG]  [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)&&  isLeftOf(expressionRoot,  predicate))  {	  if(predicate.apply(p)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
602	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.FUNCTION)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
603	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  &&  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  &&  cur.getType()!=  Token.FUNCTION)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
604	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  cur.getType()  ==  Token.VAR)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
605	[BUG]  [BUGGY]  if(cur.contains(p)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.contains(p)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.contains(p)||  cur.apply(predicate))  {	  if(cur.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
606	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(p))  {	  if(cur.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
607	[BUG]  [BUGGY]  if(cur.contains(p)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.contains(p)||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.contains(p)||  cur.apply(p))  {	  if(cur.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
608	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUse    	non-compiled	[CE]  <identifier>  expected	54	None	replace
609	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numU  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numU  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numU	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUse    	non-compiled	[CE]  <identifier>  expected	54	None	replace
610	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot)&&  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
611	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(p))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
612	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(expressionRoot,  cur)&&!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(expressionRoot,  cur)&&!predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(expressionRoot,  cur)&&!predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
613	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  predicate  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeChild(cur,  predicate  -  1);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeChild(cur,  predicate  -  1);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
614	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(p))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(p))  {	  if(!predicate.checkLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
615	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(n,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
616	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  n  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  n  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  n	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUse    	non-compiled	[CE]  <identifier>  expected	53	None	replace
617	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(cur,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
618	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(n,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
619	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot),  predicate)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot),  predicate)  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
620	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)||!predicate.checkLeftOf(p,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
621	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  cur)||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  cur)||  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  cur)||  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
622	[BUG]  [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)||  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(n,  expressionRoot)||  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
623	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot)||  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
624	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  expressionRoot)||  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
625	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
626	[BUG]  [BUGGY]  if(predicate.apply(p)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(p)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(p)&&  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
627	[BUG]  [BUGGY]  if(cur.apply(predicate)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  cur.apply(predicate))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
628	[BUG]  [BUGGY]  if(p.apply(cur)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)||  cur.apply(expressionRoot))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
629	[BUG]  [BUGGY]  if(cur.apply(p)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  predicate.apply(cur))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
630	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {	  if(p.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
631	[BUG]  [BUGGY]  if(p.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(cur))  {	  if(p.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
632	[BUG]  [BUGGY]  if(!predicate.apply(n)&&  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(n)&&  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(n)&&  isLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
633	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithin    	non-compiled	[CE]  <identifier>  expected	50	None	replace
634	[BUG]  [BUGGY]  if(p.apply(predicate)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(predicate)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(predicate)||  isLeftOf(cur,  expressionRoot))  {	  if(p.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
635	[BUG]  [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  &&  predicate.apply(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  &&  predicate.apply(cur,  predicate))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
636	[BUG]  [BUGGY]  if(predicate.removeFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.removeFirst()  ||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.removeFirst()  ||  predicate.apply(cur,  expressionRoot))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
637	[BUG]  [BUGGY]  if(cur.apply(p)||!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||!NodeUtil.isExpressionNode(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||!NodeUtil.isExpressionNode(cur))  {	  if(cur.apply(predicate)||!NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
638	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot,  cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot,  cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur))    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
639	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getCfgNode();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getCfgNode();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getCfgNode();	  Predicate    <    Node>    cfgNode    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
640	[BUG]  [BUGGY]  if(cur.checkLeftOf(predicate,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(predicate,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(predicate,  expressionRoot))  {	  if(cur.checkLeftOf(defCfgNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
641	[BUG]  [BUGGY]  if(cur.apply(predicate,  def))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  def))  {	  if(cur.apply(def,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
642	[BUG]  [BUGGY]  if(!cur.apply(def,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(def,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(def,  predicate))  {	  if(cur.apply(def,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
643	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.checkLeftOf(p,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
644	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(n,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(n,  expressionRoot))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
645	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.cloneTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.cloneTree();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  predicate.cloneTree();	  Predicate    <    Node>    cfgNode    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	110	None	replace
646	[BUG]  [BUGGY]  n.removeChild(p);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.removeChild(p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.removeChild(p);	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
647	[BUG]  [BUGGY]  n.addChildToFront(cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  n.addChildToFront(cur);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	n.addChildToFront(cur);	  n.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
648	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot)||  predicate.equals(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot)||  predicate.equals(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  isLeftOf(cur,  expressionRoot)||  predicate.equals(expressionRoot))  {	  if(!predicate.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
649	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  cur)&&  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
650	[BUG]  [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(n,  expressionRoot)&&  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
651	[BUG]  [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(def,  expressionRoot)&&  predicate.apply(cur))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
652	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(p),  expressionRoot)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(p),  expressionRoot)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(p),  expressionRoot)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
653	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(expressionRoot),  predicate)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(expressionRoot),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(expressionRoot),  predicate)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
654	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  predicate.equals(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur),  expressionRoot  ||  predicate.equals(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur),  expressionRoot  ||  predicate.equals(expressionRoot))  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
655	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWith    	non-compiled	[CE]  <identifier>  expected	52	None	replace
656	[BUG]  [BUGGY]  if(predicate.apply(p,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(p,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(p,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
657	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
658	[BUG]  [BUGGY]  if(defCfgNode.checkLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(defCfgNode.checkLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(defCfgNode.checkLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
659	[BUG]  [BUGGY]  NodeUtil.redeclareVars(cur,  predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.redeclareVars(cur,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.redeclareVars(cur,  predicate);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
660	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(cur);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(cur);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.redeclareVarsInsideBranch(cur);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
661	[BUG]  [BUGGY]  NodeUtil.clearChild(cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.clearChild(cur);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.clearChild(cur);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
662	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)||  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
663	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate)||  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
664	[BUG]  [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(p,  expressionRoot)||  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
665	[BUG]  [BUGGY]  if(p.apply(predicate,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(predicate,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(predicate,  expressionRoot))  {	  if(p.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
666	[BUG]  [BUGGY]  if(!p.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(predicate))  {	  if(p.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
667	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)&&  p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(n,  expressionRoot)&&  p.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(n,  expressionRoot)&&  p.apply(cur))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
668	[BUG]  [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur,  predicate.next()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defCfgNode,  cur,  predicate.next()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defCfgNode,  cur,  predicate.next()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
669	[BUG]  [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot,  predicate.next()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot,  predicate.next()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(def,  expressionRoot,  predicate.next()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
670	[BUG]  [BUGGY]  if(!cur.apply(p,  predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(p,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(p,  predicate))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
671	[BUG]  [BUGGY]  if(cur.apply(n,  expressionRoot)||  cur.apply(p,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(n,  expressionRoot)||  cur.apply(p,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(n,  expressionRoot)||  cur.apply(p,  predicate))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
672	[BUG]  [BUGGY]  if(cur.contains(p)||  cur.apply(p,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.contains(p)||  cur.apply(p,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.contains(p)||  cur.apply(p,  predicate))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
673	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(expressionRoot))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
674	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(p))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
675	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.apply(n))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
676	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
677	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(n))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)||  predicate.apply(n))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
678	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.FUNCTION  &&  cur.apply(expressionRoot))  {	  if(cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
679	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  &&  cur.apply(predicate))  {	  if(cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
680	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  defNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  defNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  defNode))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
681	[BUG]  [BUGGY]  if(cur.apply(expressionRoot,  predicate)||  isLeftOf(n,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(expressionRoot,  predicate)||  isLeftOf(n,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(expressionRoot,  predicate)||  isLeftOf(n,  expressionRoot,  predicate))  {	  if(cur.apply(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
682	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur  +  21))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur  +  21))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(cur  +  21))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
683	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(predicate  +  1))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(predicate  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(predicate  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
684	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur  +  3))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  predicate.apply(cur  +  3))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  predicate.apply(cur  +  3))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
685	[BUG]  [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirst()  ||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirst()  ||  predicate.apply(cur  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
686	[BUG]  [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  predicate.apply(cur  +  1))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
687	[BUG]  [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(n,  expressionRoot)&&  cur.apply(predicate))  {	  if(predicate.checkLeftOf(n,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
688	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(predicate.getNext()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(predicate.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(predicate.getNext()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
689	[BUG]  [BUGGY]  if(predicate.clear()  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.clear()  ||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.clear()  ||  predicate.apply(cur))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
690	[BUG]  [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  predicate.apply(cur)&&!NodeUtil.mayHaveSideEffects(cur))  {	  if(!predicate.clear()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
691	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(predicate,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(predicate,  expressionRoot,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(predicate,  expressionRoot,  predicate);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
692	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  21))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  21))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  21))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
693	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(predicate  +  1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(predicate  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(predicate  +  1))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
694	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  3))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  3))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  3))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
695	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  2))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  2))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  2))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
696	[BUG]  [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(p,  expressionRoot)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(p,  expressionRoot)&&  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(p,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
697	[BUG]  [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirst()  ||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirst()  ||  cur.apply(expressionRoot))  {	  if(!predicate.removeFirst()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
698	[BUG]  [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(def,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(def,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
699	[BUG]  [BUGGY]  if(!p.contains(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.contains(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.contains(cur))  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
700	[BUG]  [BUGGY]  if(!p.apply(cur)||  predicate  ==  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)||  predicate  ==  null)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)||  predicate  ==  null)  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
701	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  p);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  p);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  p);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
702	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  n);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate,  n);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
703	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.CALL  &&!cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.CALL  &&!cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.CALL  &&!cur.apply(predicate))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
704	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  &&!cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  &&!cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  &&!cur.apply(predicate))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
705	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&!cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&!cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.NAME  &&!cur.apply(predicate))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
706	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||!cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  ||!cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  ||!cur.apply(predicate))  {	  if(!cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
707	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getFirstChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getFirstChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
708	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur  +  cur.getString()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
709	[BUG]  [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.clear()  ||  predicate.apply(cur  +  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.clear()  ||  predicate.apply(cur  +  cur.getLastChild()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur    +    cur.getLastChild()))    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
710	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  numUse  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  numUse  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  numUse	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUse    	non-compiled	[CE]  <identifier>  expected	54	None	replace
711	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  num  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  num  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  num	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUse    	non-compiled	[CE]  <identifier>  expected	54	None	replace
712	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUse    	non-compiled	[CE]  <identifier>  expected	54	None	replace
713	[BUG]  [BUGGY]  if(p.apply(cur)||  isLeftOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)||  isLeftOf(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)||  isLeftOf(p,  expressionRoot))  {	  if(predicate.apply(cur)||    isLeftOf(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
714	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinU    	non-compiled	[CE]  <identifier>  expected	55	None	replace
715	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)||  p.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)||  p.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)||  p.apply(predicate))  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
716	[BUG]  [BUGGY]  if(p.apply(cur,  expressionRoot)&&  predicate.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  expressionRoot)&&  predicate.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  expressionRoot)&&  predicate.getType()!=  Token.FUNCTION)  {	  if(p.apply(cur,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
717	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)||!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
718	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cur  =  predicate.getNext();	  Predicate    <    Node>    cfgNode    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
719	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  null)||  predicate.checkLeftOf(cur,  expressionRoot,  null))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  null)||  predicate.checkLeftOf(cur,  expressionRoot,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot,  null)||  predicate.checkLeftOf(cur,  expressionRoot,  null))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    null))    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
720	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur),  expressionRoot)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur),  expressionRoot)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur),  expressionRoot)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
721	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur)||!predicate.checkLeftOf(cur,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
722	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur)&&!predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur)&&!predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur)&&!predicate.checkLeftOf(cur,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
723	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur)&&!predicate.checkLeftOf(cur),  expressionRoot)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur)&&!predicate.checkLeftOf(cur),  expressionRoot)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur)&&!predicate.checkLeftOf(cur),  expressionRoot)  {	  if(!predicate.checkLeftOf(cur),    expressionRoot)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
724	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur,  cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  predicate.apply(cur,  cur))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur,    cur))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
725	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  numUs  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  numUs  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  &&  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  &&  numUs	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUse    	non-compiled	[CE]  <identifier>  expected	53	None	replace
726	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(cur,  predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(cur,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.redeclareVarsInsideBranch(cur,  predicate);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
727	[BUG]  [BUGGY]  NodeUtil.clearChild(cur,  predicate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.clearChild(cur,  predicate);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.clearChild(cur,  predicate);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
728	[BUG]  [BUGGY]  if(!predicate.apply(cur)),  true)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)),  true)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)),  true)  {	  if(!predicate.apply(cur),    true)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
729	[BUG]  [BUGGY]  if(predicate  ==  null  ||!predicate.contains(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate  ==  null  ||!predicate.contains(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate  ==  null  ||!predicate.contains(cur))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
730	[BUG]  [BUGGY]  if(!predicate.contains(cur)||!predicate.contains(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur)||!predicate.contains(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur)||!predicate.contains(cur))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
731	[BUG]  [BUGGY]  if(!predicate.contains(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.contains(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.contains(cur  +  1))  {	  if(!predicate.contains(cur))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
732	[BUG]  [BUGGY]  if(!Predicate.checkLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!Predicate.checkLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!Predicate.checkLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
733	[BUG]  [BUGGY]  if(!checkLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!checkLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!checkLeftOf(cur,  expressionRoot,  predicate))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
734	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(p)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)||  predicate.apply(p)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)||  predicate.apply(p)||  isLeftOf(cur,  expressionRoot))  {	  if(predicate.apply(p)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
735	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
736	[BUG]  [BUGGY]  if(predicate.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot  +  1))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur,  expressionRoot)||  predicate.apply(cur,  expressionRoot  +  1))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
737	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.NAME)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.NAME)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
738	[BUG]  [BUGGY]  if(!predicate.removeFirstChild())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild())  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
739	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.VAR)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
740	[BUG]  [BUGGY]  if(!predicate.removeFromParent())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFromParent())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFromParent())  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
741	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.CALL)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  cur.getType()!=  Token.CALL)  {	  if(!predicate.detachFromParent())    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
742	[BUG]  [BUGGY]  if(!p.apply(cur)&&!predicate.isLeft())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!p.apply(cur)&&!predicate.isLeft())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!p.apply(cur)&&!predicate.isLeft())  {	  if(!p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
743	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  &&  cur.apply(p))  {	  if(cur.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
744	[BUG]  [BUGGY]  if(cur.insert(p,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.insert(p,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.insert(p,  predicate))  {	  if(cur.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
745	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.apply(p))  {	  if(cur.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
746	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)||  checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)||  checkLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
747	[BUG]  [BUGGY]  if(cur.apply(expressionRoot,  predicate)||  checkLeftOf(n,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(expressionRoot,  predicate)||  checkLeftOf(n,  expressionRoot,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(expressionRoot,  predicate)||  checkLeftOf(n,  expressionRoot,  predicate))  {	  if(cur.apply(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
748	[BUG]  [BUGGY]  if(cur.apply(expressionRoot,  predicate)&&!NodeUtil.isExpressionNode(cur.getType()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(expressionRoot,  predicate)&&!NodeUtil.isExpressionNode(cur.getType()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(expressionRoot,  predicate)&&!NodeUtil.isExpressionNode(cur.getType()))  {	  if(cur.apply(expressionRoot,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
749	[BUG]  [BUGGY]  if(p.apply(cur,  predicate)||  isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur,  predicate)||  isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur,  predicate)||  isLeftOf(cur,  expressionRoot))  {	  if(p.apply(cur)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
750	[BUG]  [BUGGY]  NodeUtil.removeCurrentStructure(cur);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.removeCurrentStructure(cur);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.removeCurrentStructure(cur);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
751	[BUG]  [BUGGY]  NodeUtil.clearCurrentStructure(cur);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  NodeUtil.clearCurrentStructure(cur);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	NodeUtil.clearCurrentStructure(cur);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
752	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
753	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)&&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)&&  cur.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
754	[BUG]  [BUGGY]  if(cur.apply(predicate,  expressionRoot)||  cur.apply(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  expressionRoot)||  cur.apply(p,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  expressionRoot)||  cur.apply(p,  expressionRoot))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
755	[BUG]  [BUGGY]  if(cur.apply(predicate,  expressionRoot)||  cur.apply(p,  predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  expressionRoot)||  cur.apply(p,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  expressionRoot)||  cur.apply(p,  predicate))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
756	[BUG]  [BUGGY]  if(!cur.apply(predicate,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(predicate,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(predicate,  expressionRoot))  {	  if(cur.apply(p,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
757	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.apply(predicate))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
758	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.apply(p))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
759	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.apply(expressionRoot))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
760	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.NAME  &&  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.NAME  &&  cur.apply(n))  {	  if(cur.getType()    ==    Token.NAME    &&    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
761	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.checkLeftOf(cur,  expressionRoot))  {	  if(!predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
762	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(p  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
763	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||!predicate.isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||!predicate.isLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)||!predicate.isLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
764	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isLabelName(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isLabelName(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isLabelName(cur.getString()))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
765	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)||  checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)||  checkLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
766	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isExpressionNode(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isExpressionNode(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&!NodeUtil.isExpressionNode(cur.getString()))  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
767	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!predicate.isLeft())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur,  expressionRoot)&&!predicate.isLeft())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur,  expressionRoot)&&!predicate.isLeft())  {	  if(!predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
768	[BUG]  [BUGGY]  if(isLeftOf(cur,  expressionRoot)&&  isLeftOf(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  expressionRoot)&&  isLeftOf(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  expressionRoot)&&  isLeftOf(cur,  predicate))  {	  if(predicate.apply(cur,    expressionRoot)||    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
769	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)&&  cur.apply(predicate))  {	  if(p.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
770	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)&&  p.apply(cur))  {	  if(p.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
771	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  defParent)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  defParent)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  defParent)&&  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
772	[BUG]  [BUGGY]  if(cur.apply(defCfgNode,  defParent)||  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defCfgNode,  defParent)||  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defCfgNode,  defParent)||  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
773	[BUG]  [BUGGY]  if(cur.apply(def,  cur)&&  predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def,  cur)&&  predicate.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def,  cur)&&  predicate.apply(cur,  expressionRoot))  {	  if(cur.apply(defCfgNode,    expressionRoot)||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
774	[BUG]  [BUGGY]  if(cur.checkLeftOf(predicate,  defCfgNode))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(predicate,  defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(predicate,  defCfgNode))  {	  if(cur.checkLeftOf(defCfgNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
775	[BUG]  [BUGGY]  if(cur.apply(predicate)||  cur.apply(cfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  cur.apply(cfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  cur.apply(cfgNode))  {	  if(cur.apply(cfgNode))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
776	[BUG]  [BUGGY]  if(predicate.removeFirst()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.removeFirst()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.removeFirst()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
777	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur.getNext()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  ||  predicate.apply(cur.getNext()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  ||  predicate.apply(cur.getNext()))  {	  if(!predicate.removeFirst()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
778	[BUG]  [BUGGY]  if(!predicate.detachFromParent()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.detachFromParent()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.detachFromParent()  &&  predicate.apply(cur))  {	  if(!predicate.removeFirst()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
779	[BUG]  [BUGGY]  if(!predicate.isLeft()  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeft()  &&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeft()  &&  predicate.apply(cur))  {	  if(!predicate.removeFirst()    &&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
780	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate,  cur.getParent();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate,  cur.getParent();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  predicate,  cur.getParent();	  Predicate    <    Node>    cfgNode    =    cur.getParent();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
781	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  &&  cur.apply(defRoot))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
782	[BUG]  [BUGGY]  if(cur.apply(defRoot)||  cur.apply(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defRoot)||  cur.apply(defCfgNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defRoot)||  cur.apply(defCfgNode))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
783	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.apply(defRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.apply(defRoot))  {	  if(cur.apply(defRoot))    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
784	[BUG]  [BUGGY]  if(isLeftOf(cur,  predicate)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(isLeftOf(cur,  predicate)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(isLeftOf(cur,  predicate)&&  predicate.apply(cur))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
785	[BUG]  [BUGGY]  if(!checkLeftOf(cur,  expressionRoot)&&  isLeftOf(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!checkLeftOf(cur,  expressionRoot)&&  isLeftOf(cur,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!checkLeftOf(cur,  expressionRoot)&&  isLeftOf(cur,  predicate))  {	  if(isLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
786	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot)&&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur,  expressionRoot)&&!NodeUtil.mayHaveSideEffects(n))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
787	[BUG]  [BUGGY]  if(predicate.apply(cur,  expressionRoot)||  predicate.apply(n,  cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur,  expressionRoot)||  predicate.apply(n,  cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur,  expressionRoot)||  predicate.apply(n,  cur))  {	  if(predicate.apply(cur,    expressionRoot)||    predicate.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
788	[BUG]  [BUGGY]  if(cur.apply(cfgNode,  expressionRoot)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(cfgNode,  expressionRoot)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(cfgNode,  expressionRoot)||  cur.apply(predicate))  {	  if(cur.apply(cfgNode,    predicate))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
789	[BUG]  [BUGGY]  if(!cur.apply(n,  predicate))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!cur.apply(n,  predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!cur.apply(n,  predicate))  {	  if(cur.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
790	[BUG]  [BUGGY]  if(cur.apply(p,  expressionRoot)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p,  expressionRoot)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p,  expressionRoot)||  cur.apply(predicate))  {	  if(cur.apply(n,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
791	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()!=  Token.FUNCTION  ||  cur.apply(predicate))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
792	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.apply(predicate))  {	  if(cur.getType()    ==    Token.FUNCTION    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
793	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(n))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
794	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(permutationRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  cur.apply(permutationRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  cur.apply(permutationRoot))  {	  if(!predicate.removeFirstChild()    ||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
795	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(p))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    predicate.apply(p))    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
796	[BUG]  [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  true))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  true))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  true))  {	  if(predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
797	[BUG]  [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  null))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  null))  {	  if(predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
798	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p)||  cur.apply(p))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p)||  cur.apply(p))  {	  if(cur.apply(p)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
799	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkRightOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkRightOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.checkRightOf(cur,  expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
800	[BUG]  [BUGGY]  if(cur.checkLeftOf(predicate,  defNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(predicate,  defNode))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(predicate,  defNode))  {	  if(cur.checkLeftOf(defNode,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
801	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  p.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)||  p.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)||  p.checkLeftOf(cur,  expressionRoot))  {	  if(p.checkLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
802	[BUG]  [BUGGY]  if(cur.apply(def)||  cur.apply(def))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(def)||  cur.apply(def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(def)||  cur.apply(def))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
803	[BUG]  [BUGGY]  if(cur.apply(predicate)||  cur.apply(def))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  cur.apply(def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  cur.apply(def))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
804	[BUG]  [BUGGY]  if(cur.apply(defNode)||  cur.apply(def))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defNode)||  cur.apply(def))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defNode)||  cur.apply(def))  {	  if(p.apply(cur)||    cur.apply(def))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
805	[BUG]  [BUGGY]  if(cur.apply(predicate,  expressionRoot)||  cur.apply(def,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate,  expressionRoot)||  cur.apply(def,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate,  expressionRoot)||  cur.apply(def,  expressionRoot))  {	  if(cur.apply(def,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
806	[BUG]  [BUGGY]  if(predicate.checkLeftOf(p,  cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(p,  cur)&&  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(p,  cur)&&  predicate.apply(cur))  {	  if(predicate.checkLeftOf(p,    expressionRoot)&&    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
807	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  null))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  null))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&  isLeftOf(cur,  expressionRoot,  null))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
808	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&  checkLeftOf(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&  checkLeftOf(cur,  expressionRoot))  {	  if(!predicate.apply(cur)&&    isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
809	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)||  predicate.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
810	[BUG]  [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(cur,  expressionRoot)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(cur,  expressionRoot)||  cur.apply(predicate))  {	  if(cur.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
811	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur,  expressionRoot)&&  p.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur,  expressionRoot)&&  p.apply(cur,  expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur,  expressionRoot)&&  p.apply(cur,  expressionRoot))  {	  if(p.apply(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
812	[BUG]  [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getParent()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getParent()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.removeFirstChild()  ||  predicate.apply(cur.getParent()))  {	  if(!predicate.removeFirstChild()    ||    predicate.apply(cur.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
813	[BUG]  [BUGGY]  if(p.apply(cur)&&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.apply(cur)&&  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.apply(cur)&&  cur.apply(predicate))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
814	[BUG]  [BUGGY]  if(cur.apply(defRoot)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(defRoot)||  cur.apply(predicate))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(defRoot)||  cur.apply(predicate))  {	  if(p.apply(cur)||    cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
815	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithInUseCfgNode  ||  numUseWith  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithInUseCfgNode  ||  numUseWith  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithInUseCfgNode  ||  numUseWith	  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWithinUseCfgNode    ||    numUseWith    	non-compiled	[CE]  <identifier>  expected	52	None	replace
816	[BUG]  [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(p,  expressionRoot)&&  predicate.apply(expressionRoot))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)&&    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
817	[BUG]  [BUGGY]  if(predicate.checkLeftOf(p,  cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(p,  cur)||  predicate.apply(cur))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(p,  cur)||  predicate.apply(cur))  {	  if(predicate.checkLeftOf(p,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
818	[BUG]  [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate,  cur.next()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(expressionRoot,  predicate,  cur.next()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(expressionRoot,  predicate,  cur.next()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
819	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot,  cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot,  cur.getLastChild()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
820	[BUG]  [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot,  predicate.next()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.checkLeftOf(defNode,  expressionRoot,  predicate.next()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.checkLeftOf(defNode,  expressionRoot,  predicate.next()))  {	  if(predicate.checkLeftOf(cur,    expressionRoot,    cur.next()))    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
821	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getGrandparent();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getGrandparent();  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	Predicate  <  Node>  cfgNode  =  cur.getGrandparent();	  Predicate    <    Node>    cfgNode    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	110	None	replace
822	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  *  1))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  *  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur  *  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
823	[BUG]  [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(p.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur  +  1))  {	  if(predicate.checkLeftOf(cur,    expressionRoot)||    predicate.apply(cur    +    1))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
824	[BUG]  [BUGGY]  if(cur.apply(predicate)||  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)||  cur.apply(n))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)||  cur.apply(n))  {	  if(p.apply(cur)||    cur.apply(n))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
825	[BUG]  [BUGGY]  if(cur.apply(expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(expressionRoot)||  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
826	[BUG]  [BUGGY]  if(cur.apply(predicate)&&  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(predicate)&&  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(predicate)&&  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
827	[BUG]  [BUGGY]  if(cur.apply(p,  predicate)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(cur.apply(p,  predicate)||  cur.apply(expressionRoot))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(cur.apply(p,  predicate)||  cur.apply(expressionRoot))  {	  if(cur.apply(predicate)||    cur.apply(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
828	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.equals(cur.getString()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||!predicate.equals(cur.getString()))  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
829	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.isExtern())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.isExtern())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||!predicate.isExtern())  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
830	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.isVarArgs())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.isLeftOf(cur)||!predicate.isVarArgs())  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.isLeftOf(cur)||!predicate.isVarArgs())  {	  if(!predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
831	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur  +  1))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur  +  1))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  ||  predicate.apply(cur  +  1))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
832	[BUG]  [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur.getLastChild()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.containsFirstChild()  ||  predicate.apply(cur.getLastChild()))  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.containsFirstChild()  ||  predicate.apply(cur.getLastChild()))  {	  if(!predicate.containsFirstChild()    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
833	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur);  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur);	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
834	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur),  predicate)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {      [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur),  predicate)  {  [BUGGY]      return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3849001794597505	485	485	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot)&&!predicate.apply(cur),  predicate)  {	  if(!predicate.checkLeftOf(cur,    expressionRoot)&&!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
