bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(def  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(def  ==  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null)  {  return  false;  }	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.scope);	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.name);	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  scope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
8	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  state);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  state);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  state);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
9	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
10	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
11	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope)!=  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope)!=  null;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(jsScope)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope)!=  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope)!=  null;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name)!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name)!=  null;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(jsScope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.jsScope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
20	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  state.getIn().reachingDef.get(s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  escaped.add(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getVar(name));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  name);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).toString());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope  ==  s.scope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)  {  return  false;  }	  if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  if(jsScope!=  s.scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  s.scope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)  {  return  false;  }	  if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  if(jsScope  ==  s)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope  ==  s)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s)  {  return  false;  }	  if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  ||  s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  ||  s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope  ==  jsScope)  {  return  false;  }	  if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  ||  s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  ||  s.scope!=  jsScope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope!=  jsScope)  {  return  false;  }	  if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  State  state  =  jsScope.getScope();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  State  state  =  jsScope.getScope();  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getScope();	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope!=  scope)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  nisips.put(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  nisips.put(name,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  jsScope);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  s.scope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  if(jsScope!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
40	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
41	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
42	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
43	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
44	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  jsScope)  {  return  true;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)  {  return  true;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
45	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)  {  return  true;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  resultMap.put(name,  jsScope);  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(name,  jsScope);  return  false;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope);  return  false;	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  resultMap.put(name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(name,  s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.scope);	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(s.name,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope);	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  resultMap.put(name,  s);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(name,  s);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s);	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
55	[BUG]  [BUGGY]  resultMap.put(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(s,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s,  jsScope);	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  resultMap.put(name,  s.jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(name,  s.jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.jsScope);	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  resultMap.put(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(s.scope,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.scope,  jsScope);	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
59	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
60	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
61	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
62	[BUG]  [BUGGY]  if(jsScope!=  s)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  s)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  s.scope)return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  parent!=  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  parent!=  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
71	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
72	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
73	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name));	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
74	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  cfgNode);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  cfgNode);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
75	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
76	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
77	[BUG]  [BUGGY]  if(jsScope!=  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
78	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
79	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  s.scope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
80	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
81	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(s.scope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.name);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(s,  jsScope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
84	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  useNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  useNode);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  useNode);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
85	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(jsScope.getVar(name));	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Definition  def  =  def.reachingDef.get(s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(s.scope);	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
87	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()!=  Token.VAR;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()!=  Token.VAR;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION)&&  n.getType()!=  Token.VAR;	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
88	[BUG]  [BUGGY]  if(s.scope!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
89	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
90	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  jsScope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.scope)!=  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.scope)!=  null;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(s.scope)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
93	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
94	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
95	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn());  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Preconditions.checkState(def.depends!=  null);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
97	[BUG]  [BUGGY]  parent  ==  jsScope.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  parent  ==  jsScope.getParent();  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope.getParent();	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  luate(jsScope,  s.depends))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  luate(jsScope,  s.depends))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(jsScope,  s.depends))  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(def.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Preconditions.checkState(def.depends  ==  null);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends  ==  null);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Preconditions.checkArgument(def.depends!=  null);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
101	[BUG]  [BUGGY]  luate(jsScope,  s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  luate(jsScope,  s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(jsScope,  s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Preconditions.checkArgument(def.depends  ==  null);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends  ==  null);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
103	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(name,  jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.getVar(name));	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.target);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.target);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.target);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
105	[BUG]  [BUGGY]  escaped.add(def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  escaped.add(def);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(def);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  this);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  this);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
107	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
108	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
109	[BUG]  [BUGGY]  n  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  n  =  jsScope.getVar(name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  jsScope.getVar(name);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
110	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  State  state  =  jsScope.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  State  state  =  jsScope.getParent();  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getParent();	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
112	[BUG]  [BUGGY]  if(s.scope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
113	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope!=  jsScope;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  parent  ==  jsScope  ||  s.scope!=  jsScope;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope!=  jsScope;	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
114	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  parent  ==  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
115	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  jsScope;	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
116	[BUG]  [BUGGY]  if(jsScope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
117	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDeclaration(jsScope);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
118	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  aughtExceptionHandler.handleMissingDependency(jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(jsScope);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
119	[BUG]  [BUGGY]  ||(def!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  ||(def!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
120	[BUG]  [BUGGY]  ||(def!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  ||(def!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def!=  null  &&  def.depends.contains(s)))  {  return  false;  }	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
121	[BUG]  [BUGGY]  if(def!=  null  ||  def.depends!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(def!=  null  ||  def.depends!=  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null  ||  def.depends!=  null)  {  return  false;  }	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
122	[BUG]  [BUGGY]  if(def!=  null  ||  def.depends  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(def!=  null  ||  def.depends  ==  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null  ||  def.depends  ==  null)  {  return  false;  }	  if(def!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
123	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
124	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  jsScope)return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  false;  }	  if(s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
125	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  s.scope)return  false;  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  false;	  if(s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
126	[BUG]  [BUGGY]  if(jsScope!=  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
127	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
128	[BUG]  [BUGGY]  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
129	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
130	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.createChildFlowState(s.scope));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  resultMap.put(name,  jsScope.createChildFlowState(s.scope));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.createChildFlowState(s.scope));	  resultMap.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
131	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
132	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
133	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
134	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope!=  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
135	[BUG]  [BUGGY]  if(jsScope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
136	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.scope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
137	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(def,  jsScope);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
138	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope,  name);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
139	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope);	  if(s.scope!=    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
140	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
141	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
142	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
143	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
144	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
145	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(jsScope  ==  s.scope)return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)return  false;  }	  if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
146	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  if(s.scope  ==  jsScope)return  false;  }  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  false;  }	  if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
147	[BUG]  [BUGGY]  escaped.add(s.getString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  escaped.add(s.getString());  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.getString());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>());  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
149	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  s.scope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  s.scope);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
150	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }    [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]    }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
