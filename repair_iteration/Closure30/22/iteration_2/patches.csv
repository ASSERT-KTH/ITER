bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
2	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getVar(name));	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
3	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
4	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
5	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name  +  name);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name  +  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name  +  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
6	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.scope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
7	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  cfgNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  cfgNode);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
8	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  lhs);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  lhs);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  lhs);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
9	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  pn);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  pn);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  pn);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
10	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	  parent!=    jsScope    ||    s.scope    ==    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
11	[BUG]  [BUGGY]  escaped  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  false;  }	  parent!=    jsScope    ||    s.scope    ==    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
12	[BUG]  [BUGGY]  escaped  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	  parent!=    jsScope    ||    s.scope    ==    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
13	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.type  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.type  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  else  if(s.type  ==  jsScope)  {  return  true;  }	  parent!=    jsScope    ||    s.scope    ==    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
14	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s,  s.scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  return(s.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(s.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(s.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(s.depends!=  null);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(n.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(n.depends!=  null);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(des.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(des.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(des.depends!=  null);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(depends.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(depends.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(depends.depends!=  null);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
22	[BUG]  [BUGGY]  if(s.scope  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  null)  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
23	[BUG]  [BUGGY]  if(s.scope!=  null  ||  s.scope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||  s.scope!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||  s.scope!=  null)  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
24	[BUG]  [BUGGY]  if(s.scope!=  null  ||  s.scope  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||  s.scope  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||  s.scope  ==  null)  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
25	[BUG]  [BUGGY]  ||  s.scope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  s.scope!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope!=  null)  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
26	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
27	[BUG]  [BUGGY]  return!(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
28	[BUG]  [BUGGY]  return!(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
29	[BUG]  [BUGGY]  return!(s.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(s.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(s.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
30	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.contains(s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.contains(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.contains(s.scope);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
31	[BUG]  [BUGGY]  resultMap.put(name,  s.reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.reachingDef);	  resultMap.put(name,    s);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
32	[BUG]  [BUGGY]  resultMap.put(name,  s.toString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.toString());	  resultMap.put(name,    s);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
33	[BUG]  [BUGGY]  resultMap.put(name,  s.node);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.node);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.node);	  resultMap.put(name,    s);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
34	[BUG]  [BUGGY]  resultMap.put(name,  s.definition);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.definition);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.definition);	  resultMap.put(name,    s);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
35	[BUG]  [BUGGY]  resultMap.put(name,  s.isScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.isScope());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.isScope());	  resultMap.put(name,    s);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
36	[BUG]  [BUGGY]  resultMap.put(name,  s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.scope.getVar(name));	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
37	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.getVar(s.name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope.getVar(s.name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.getVar(s.name));	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
38	[BUG]  [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.get(jsScope.getVar(name)));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.get(jsScope.getVar(name)));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  state.getIn().reachingDef.get(jsScope.getVar(name)));	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
39	[BUG]  [BUGGY]  resultMap.put(name,  s.getVar(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.getVar(name));	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
40	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.getVar(name));	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
41	[BUG]  [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.get(s.scope));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.get(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  state.getIn().reachingDef.get(s.scope));	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
42	[BUG]  [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  state.getIn().reachingDef.get(jsScope.getVar(name));	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
43	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s);	  return(def!=    null)?    null    :    def.reachingDef.get(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
44	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s,  jsScope);	  return(def!=    null)?    null    :    def.reachingDef.get(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
45	[BUG]  [BUGGY]  if(s.scope!=  null)  {  if(jsScope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null)  {  if(jsScope!=  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)  {  if(jsScope!=  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
46	[BUG]  [BUGGY]  if(s.scope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
47	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
48	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope!=  scope)return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
49	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope  ==  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
50	[BUG]  [BUGGY]  if(s.scope!=  null)  {  if(jsScope  ==  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null)  {  if(jsScope  ==  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)  {  if(jsScope  ==  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
51	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR  &&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
52	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.VAR  &&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
53	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
54	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
55	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  s.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  s.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR  ||  s.getType()!=  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
56	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(s.scope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
57	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
58	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(s.scope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
59	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  def);	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
60	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope,  s.scope);	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
61	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope,  def);	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
62	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope,  s);	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
63	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  useNode);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  useNode);	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
64	[BUG]  [BUGGY]  State  state  =  s.getScope();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  s.getScope();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  s.getScope();	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
65	[BUG]  [BUGGY]  State  state  =  s.scope.getScope();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  s.scope.getScope();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  s.scope.getScope();	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
66	[BUG]  [BUGGY]  State  state  =  jsScope.getScope(s.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getScope(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getScope(s.scope);	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
67	[BUG]  [BUGGY]  State  state  =  jsScope.getScopeOwnScope();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getScopeOwnScope();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getScopeOwnScope();	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
68	[BUG]  [BUGGY]  State  state  =  jsScope.getScopeInstance();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getScopeInstance();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getScopeInstance();	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
69	[BUG]  [BUGGY]  State  state  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getVar(name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getVar(name);	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
70	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
71	[BUG]  [BUGGY]  return(state.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(state.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(state.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
72	[BUG]  [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
73	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
74	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope,  def);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
75	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  useNode);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
76	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
77	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
78	[BUG]  [BUGGY]  resultMap.put(s.name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  s.scope);	  resultMap.put(name,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
79	[BUG]  [BUGGY]  resultMap.put(name,  s.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.getScope());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.getScope());	  resultMap.put(name,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
80	[BUG]  [BUGGY]  resultMap.put(name,  s.getScopeName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.getScopeName());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.getScopeName());	  resultMap.put(name,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
81	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope,  name);	  return    state.getIn().reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
82	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  name,  def);	  return    state.getIn().reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
83	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  name,  jsScope);	  return    state.getIn().reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
84	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.jsScope,  name);	  return    state.getIn().reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
85	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.name,  s.scope);	  return    state.getIn().reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
86	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name  +  1);  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  name  +  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  name  +  1);	  return    state.getIn().reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
87	[BUG]  [BUGGY]  if(jsScope!=  null)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)return  true;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
88	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  true;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  jsScope)return  true;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  true;  if(!s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
89	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  true;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
90	[BUG]  [BUGGY]  if(s.scope!=  null)  {  if(jsScope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null)  {  if(jsScope!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)  {  if(jsScope!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    >=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
91	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    >=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
92	[BUG]  [BUGGY]  if(s.scope!=  null  ||  jsScope!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||  jsScope!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||  jsScope!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    >=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
93	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)return  false;  }	  if(jsScope!=    null)    {    if(s.scope    >=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
94	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)  {  if(s.scope  ==  jsScope)return  false;  }	  if(jsScope!=    null)    {    if(s.scope    >=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
95	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(def,  jsScope,  s.scope);	  aughtExceptionHandler.handleMissingDependency(def,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
96	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(jsScope,  def);	  aughtExceptionHandler.handleMissingDependency(def,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
97	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(s,  jsScope);	  aughtExceptionHandler.handleMissingDependency(def,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
98	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(des,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(des,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(des,  jsScope);	  aughtExceptionHandler.handleMissingDependency(def,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
99	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope,  useNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(def,  jsScope,  useNode);	  aughtExceptionHandler.handleMissingDependency(def,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
100	[BUG]  [BUGGY]  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope!=  jsScope)  {  return  false;  }	  parent    ==    jsScope    ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
101	[BUG]  [BUGGY]  jsScope  ||  s.scope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope!=  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope!=  scope)  {  return  false;  }	  parent    ==    jsScope    ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
102	[BUG]  [BUGGY]  Scope  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Scope  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Scope  jsScope  ||  s.scope!=  jsScope)  {  return  false;  }	  parent    ==    jsScope    ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
103	[BUG]  [BUGGY]  jsScope  ||  s.scope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope!=  null)  {  return  false;  }	  parent    ==    jsScope    ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
104	[BUG]  [BUGGY]  escaped  ||  s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped  ||  s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped  ||  s.scope!=  jsScope)  {  return  false;  }	  parent    ==    jsScope    ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
105	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.jsScope);	  return    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
106	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope);	  return    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
107	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name,  state);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name,  state);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
108	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope,  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  scope,  name);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
109	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name,  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  name,  state.getIn());	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
110	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state,  name);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
111	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  name);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
112	[BUG]  [BUGGY]  escaped.add(s.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.getVar(name));	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
113	[BUG]  [BUGGY]  escaped.add(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.scope.getVar(name));	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
114	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getVar(name),  s.scope);	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
115	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name,  s.scope));  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope.getVar(name,  s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getVar(name,  s.scope));	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
116	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name,  s));  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope.getVar(name,  s));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getVar(name,  s));	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
117	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name),  s);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope.getVar(name),  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getVar(name),  s);	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  def);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  this,  def);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  this);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  jsScope,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  this,  useNode);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  this);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  this);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  useNode,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  def,  this);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
125	[BUG]  [BUGGY]  if(jsScope!=  scope)  return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  scope)  return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  scope)  return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
126	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  jsScope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  jsScope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
127	[BUG]  [BUGGY]  if(jsScope!=  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
128	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  jsScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
129	[BUG]  [BUGGY]  Definition  def  =  s.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  s.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  s.reachingDef.get(jsScope.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
130	[BUG]  [BUGGY]  Definition  def  =  state.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.reachingDef.get(jsScope.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
131	[BUG]  [BUGGY]  Definition  def  =  state.getOut().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getOut().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getOut().reachingDef.get(jsScope.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
132	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.scope.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
133	[BUG]  [BUGGY]  Definition  def  =  state.getReachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getReachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getReachingDef.get(jsScope.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
134	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.getVar(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(s.depends  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(s.depends  ==  null);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.length  >  0);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.length  >  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.length  >  0);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null,  s.scope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends  ==  null,  s.scope);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(des.depends  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(des.depends  ==  null);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkArgument(n.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(n.depends  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(n.depends  ==  null);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
140	[BUG]  [BUGGY]  ||!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||!isReachingDefinition(s.scope))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
141	[BUG]  [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(isReachingDefinition(s.scope)||  isReachingDefinition(s.scope))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
142	[BUG]  [BUGGY]  if(!isReachingDefinition(jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(!isReachingDefinition(jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(!isReachingDefinition(jsScope))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
143	[BUG]  [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(isReachingDefinition(s.scope)||  isReachingDefinition(s.jsScope))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
144	[BUG]  [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(isReachingDefinition(s.scope)||  isReachingDefinition(jsScope))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
145	[BUG]  [BUGGY]  if(isReachingDefinition(s.scope)||!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(isReachingDefinition(s.scope)||!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(isReachingDefinition(s.scope)||!isReachingDefinition(s.scope))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
146	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
147	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
148	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(s.depends!=  null);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.length  >  0);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.length  >  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.length  >  0);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(des.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(des.depends!=  null);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkArgument(n.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(n.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(n.depends!=  null);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null,  s.scope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null,  s.scope);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
154	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
155	[BUG]  [BUGGY]  return  s  ==  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s  ==  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s  ==  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
156	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
157	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  s.scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
158	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
159	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name  +  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name  +  1);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
160	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state.getIn());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
161	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
162	[BUG]  [BUGGY]  jsScope.setParent(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.setParent(n);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.setParent(n);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
163	[BUG]  [BUGGY]  jsScope.setParent(parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.setParent(parent);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.setParent(parent);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
164	[BUG]  [BUGGY]  parent!=  jsScope.getParent();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent!=  jsScope.getParent();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  jsScope.getParent();	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
165	[BUG]  [BUGGY]  jsScope.removeChild(s);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.removeChild(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.removeChild(s);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
166	[BUG]  [BUGGY]  jsScope.getParent();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.getParent();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.getParent();	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
167	[BUG]  [BUGGY]  nisips.put(name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  nisips.put(name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  s.scope);	  nisips.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
168	[BUG]  [BUGGY]  nisips.put(name,  s.jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  nisips.put(name,  s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  s.jsScope);	  nisips.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
169	[BUG]  [BUGGY]  nisips.put(name,  s);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  nisips.put(name,  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  s);	  nisips.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
170	[BUG]  [BUGGY]  nisips.put(name,  jsScope.getVar(s.name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  nisips.put(name,  jsScope.getVar(s.name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  jsScope.getVar(s.name));	  nisips.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
171	[BUG]  [BUGGY]  nisips.put(name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  nisips.put(name,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  jsScope.getVar(name));	  nisips.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
172	[BUG]  [BUGGY]  nisips.put(name,  jsScope.getVar(s.scope));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  nisips.put(name,  jsScope.getVar(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  jsScope.getVar(s.scope));	  nisips.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
173	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s.scope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    s.scope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
174	[BUG]  [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
175	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  s.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  s.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  s.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
176	[BUG]  [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
177	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  s.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  &&  s.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION  &&  s.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
178	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
179	[BUG]  [BUGGY]  escaped.add(s);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
180	[BUG]  [BUGGY]  escaped.add(s.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.scope);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
181	[BUG]  [BUGGY]  escaped.add(jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
182	[BUG]  [BUGGY]  escaped.add(def,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(def,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(def,  jsScope);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
183	[BUG]  [BUGGY]  escaped.add(s,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s,  def);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
184	[BUG]  [BUGGY]  escaped.put(name,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.put(name,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.put(name,  def);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
185	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  scope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
186	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  scope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  scope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
187	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.name,  s.scope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
188	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
189	[BUG]  [BUGGY]  if(jsScope!=  null)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
190	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.jsScope,  s.scope);	  return    state.getIn().reachingDef.get(s.scope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
191	[BUG]  [BUGGY]  return  s.scope.get(state.getIn().reachingDef.get(s.scope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s.scope.get(state.getIn().reachingDef.get(s.scope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s.scope.get(state.getIn().reachingDef.get(s.scope,  s.scope);	  return    state.getIn().reachingDef.get(s.scope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
192	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  s.jsScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  s.jsScope);	  return    state.getIn().reachingDef.get(s.scope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
193	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  state);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(s,  state);	  return(def!=    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
194	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(jsScope,  s);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(jsScope,  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(jsScope,  s);	  return(def!=    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
195	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
196	[BUG]  [BUGGY]  Definition  def  =  jsScope.getIn().reachingDef.get(state.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  jsScope.getIn().reachingDef.get(state.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  jsScope.getIn().reachingDef.get(state.getVar(name));	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
197	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s.scope));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  s.scope));	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
198	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.depends);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
199	[BUG]  [BUGGY]  return(s.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
200	[BUG]  [BUGGY]  ||  jsScope!=  s.scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  jsScope!=  s.scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  jsScope!=  s.scope)  {  return  false;  }	  ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
201	[BUG]  [BUGGY]  ||  s.scope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  s.scope!=  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope!=  scope)  {  return  false;  }	  ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
202	[BUG]  [BUGGY]  ||  jsScope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  jsScope!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  jsScope!=  null)  {  return  false;  }	  ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
203	[BUG]  [BUGGY]  ||  s.scope!=  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  s.scope!=  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope!=  jsScope)  {  return  true;  }	  ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
204	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
205	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
206	[BUG]  [BUGGY]  return!(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
207	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.NAME);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
208	[BUG]  [BUGGY]  return!(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
209	[BUG]  [BUGGY]  return!(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
210	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
211	[BUG]  [BUGGY]  return(jsScope.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(jsScope.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(jsScope.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
212	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name),  def);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
213	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.construct(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.construct(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.construct(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
214	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
215	[BUG]  [BUGGY]  luate(s,  jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s,  jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s,  jsScope))  {  return  false;  }	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
216	[BUG]  [BUGGY]  luate(s.scope,  jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s.scope,  jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s.scope,  jsScope))  {  return  false;  }	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
217	[BUG]  [BUGGY]  luate(jsScope,  s.scope))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(jsScope,  s.scope))  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(jsScope,  s.scope))  {  return  true;  }	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
218	[BUG]  [BUGGY]  luate(s.scope,  jsScope))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s.scope,  jsScope))  {  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s.scope,  jsScope))  {  return  false;	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
219	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
220	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope.hasVar(name))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  jsScope.hasVar(name))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  jsScope.hasVar(name))  {  return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
221	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  jsScope.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  jsScope.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
222	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  jsScope)return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  false;	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
223	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope)return  true;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  true;	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
224	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s.scope)return  true;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)return  true;	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
225	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s.scope)return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)return  false;	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
226	[BUG]  [BUGGY]  State  state  =  s.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  s.getParent();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  s.getParent();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
227	[BUG]  [BUGGY]  State  state  =  s.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  s.getNext();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  s.getNext();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
228	[BUG]  [BUGGY]  State  state  =  jsScope.getFunctionDeclaration();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getFunctionDeclaration();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getFunctionDeclaration();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
229	[BUG]  [BUGGY]  State  state  =  jsScope.getConstructor();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getConstructor();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getConstructor();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
230	[BUG]  [BUGGY]  State  state  =  jsScope.getCurrentParent();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getCurrentParent();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getCurrentParent();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
231	[BUG]  [BUGGY]  ||(def.depends!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def.depends!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def.depends!=  null  &&  def.depends.contains(s)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
232	[BUG]  [BUGGY]  ||(s.depends!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(s.depends!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(s.depends!=  null  &&  def.depends.contains(s)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
233	[BUG]  [BUGGY]  ||(s!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(s!=  null  &&  def.depends.contains(s)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(s!=  null  &&  def.depends.contains(s)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
234	[BUG]  [BUGGY]  ||(def  ==  null  &&  def.depends.contains(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def  ==  null  &&  def.depends.contains(s)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def  ==  null  &&  def.depends.contains(s)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
235	[BUG]  [BUGGY]  ||(s!=  null  &&  s.depends.contains(def)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(s!=  null  &&  s.depends.contains(def)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(s!=  null  &&  s.depends.contains(def)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
236	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getIn());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getIn());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
237	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getScope());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getScope());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getScope());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
238	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getVar(name));	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
239	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getAnnotation());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getAnnotation());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getAnnotation());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
240	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getParent());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getParent());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getParent());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
241	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
242	[BUG]  [BUGGY]  if(jsScope!=  null)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)return  false;  if(!s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
243	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.name,  jsScope);	  return    def!=    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
244	[BUG]  [BUGGY]  jsScope  ||  s.scope!=  scope;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope!=  scope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope!=  scope;	  parent    ==    jsScope    ||    s.scope!=    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
245	[BUG]  [BUGGY]  jsScope  ||  s.scope  ==  scope;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope  ==  scope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope  ==  scope;	  parent    ==    jsScope    ||    s.scope!=    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
246	[BUG]  [BUGGY]  scope  ==  jsScope  ||  s.scope!=  jsScope;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  scope  ==  jsScope  ||  s.scope!=  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	scope  ==  jsScope  ||  s.scope!=  jsScope;	  parent    ==    jsScope    ||    s.scope!=    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
247	[BUG]  [BUGGY]  jsScope  ||  s.scope!=  jsScope;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope!=  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope!=  jsScope;	  parent    ==    jsScope    ||    s.scope!=    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
248	[BUG]  [BUGGY]  if(jsScope!=  s.scope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)  {  return  true;  }	  if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
249	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s.scope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)  {  return  true;  }	  if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
250	[BUG]  [BUGGY]  if(jsScope  ==  s)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s)  {  return  true;  }	  if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
251	[BUG]  [BUGGY]  if(jsScope!=  s)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s)  {  return  true;  }	  if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
252	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope.getVar(name));	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
253	[BUG]  [BUGGY]  return  s.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s.reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
254	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
255	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  s);	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
256	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  s.scope));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  s.scope));	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
257	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
258	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(s,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(s,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(s,  name);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
259	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope,  name,  s.scope);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
260	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope,  name,  def);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
261	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  state);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope,  name,  state);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
262	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  escaped);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  name,  escaped);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope,  name,  escaped);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
263	[BUG]  [BUGGY]  if(def  ==  null  ||  def.depends!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null  ||  def.depends!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null  ||  def.depends!=  null)  {  return  false;  }	  if(def!=    null    ||    def.depends!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
264	[BUG]  [BUGGY]  if(def!=  null  &&  def.depends!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def!=  null  &&  def.depends!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null  &&  def.depends!=  null)  {  return  false;  }	  if(def!=    null    ||    def.depends!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
265	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.name);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
266	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.reachingDef);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
267	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.type);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.type);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.type);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
268	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.sourceName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.sourceName);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.sourceName);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
269	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(jsScope)!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(jsScope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(jsScope)!=  null;	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
270	[BUG]  [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(s.scope)!=  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(s.scope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  true  :  def.reachingDef.get(s.scope)!=  null;	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
271	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.name)!=  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.name)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(s.name)!=  null;	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
272	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.jsScope)!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.jsScope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(s.jsScope)!=  null;	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
273	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(s);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(s);	  aughtExceptionHandler.handleMissingDependency(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
274	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(def);	  aughtExceptionHandler.handleMissingDependency(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
275	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
276	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
277	[BUG]  [BUGGY]  return!(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
278	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
279	[BUG]  [BUGGY]  return!(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
280	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
281	[BUG]  [BUGGY]  resultMap.put(name,  s.jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.jsScope,  def);	  resultMap.put(name,    s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
282	[BUG]  [BUGGY]  resultMap.put(s.name,  s.jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  s.jsScope);	  resultMap.put(name,    s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
283	[BUG]  [BUGGY]  resultMap.put(name,  s.jsScope,  state);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.jsScope,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.jsScope,  state);	  resultMap.put(name,    s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
284	[BUG]  [BUGGY]  resultMap.put(name,  s.jsScope,  useNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.jsScope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.jsScope,  useNode);	  resultMap.put(name,    s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
285	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(jsScope);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
286	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(s.jsScope);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
287	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  jsScope);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
288	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.scope);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
289	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(s.name);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
290	[BUG]  [BUGGY]  Return(s  ==  null)?  null  :  s.reachingDef.get(def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(s  ==  null)?  null  :  s.reachingDef.get(def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(s  ==  null)?  null  :  s.reachingDef.get(def);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
291	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(jsScope.getVar(name));	  return(def!=    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
292	[BUG]  [BUGGY]  return(s!=  null)?  null  :  s.reachingDef.get(def.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s!=  null)?  null  :  s.reachingDef.get(def.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s!=  null)?  null  :  s.reachingDef.get(def.name);	  return(def!=    null)?    null    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
293	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getScope().reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getScope().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getScope().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn().reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
294	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn().reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
295	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn().reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
296	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getReachingDef());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getReachingDef());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope.getReachingDef());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn().reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
297	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn().reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
298	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getOut().reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getOut().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getOut().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn().reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
299	[BUG]  [BUGGY]  Definition  def  =  s.reachingDef.get(def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  s.reachingDef.get(def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  s.reachingDef.get(def);	  Definition    def    =    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
300	[BUG]  [BUGGY]  Definition  def  =  state.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.reachingDef.get(s.scope);	  Definition    def    =    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
301	[BUG]  [BUGGY]  Definition  def  =  jsScope.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  jsScope.reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  jsScope.reachingDef.get(s.scope);	  Definition    def    =    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
302	[BUG]  [BUGGY]  Definition  def  =  state.getOut().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getOut().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getOut().reachingDef.get(s.scope);	  Definition    def    =    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
303	[BUG]  [BUGGY]  if(s!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s!=  jsScope)  {  return  false;  }	  if(jsScope!=    s)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
304	[BUG]  [BUGGY]  if(s  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s  ==  jsScope)  {  return  false;  }	  if(jsScope!=    s)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
305	[BUG]  [BUGGY]  ||  jsScope!=  s)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  jsScope!=  s)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  jsScope!=  s)  {  return  false;  }	  if(jsScope!=    s)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
306	[BUG]  [BUGGY]  return  jsScope  ==  null?  false  :  def.reachingDef.get(jsScope)!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  jsScope  ==  null?  false  :  def.reachingDef.get(jsScope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  jsScope  ==  null?  false  :  def.reachingDef.get(jsScope)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
307	[BUG]  [BUGGY]  ||(def.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
308	[BUG]  [BUGGY]  ||(def  ==  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def  ==  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def  ==  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
309	[BUG]  [BUGGY]  ||(s.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(s.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(s.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
310	[BUG]  [BUGGY]  ||(def!=  null  &&  state.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def!=  null  &&  state.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def!=  null  &&  state.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
311	[BUG]  [BUGGY]  ||(des.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(des.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(des.depends!=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
312	[BUG]  [BUGGY]  ||(def  >=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def  >=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def  >=  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
313	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope,  s.scope);	  Definition    def    =    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
314	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope);	  Definition    def    =    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
315	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.jsScope);	  Definition    def    =    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
316	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.scope,  jsScope);	  Definition    def    =    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
317	[BUG]  [BUGGY]  if(def  ==  null  ||!def.depends.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null  ||!def.depends.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null  ||!def.depends.isEmpty())  {  return  false;  }	  if(def    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
318	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name),  def);	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
319	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope,  s.scope.getVar(name));	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
320	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.jsScope,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.jsScope,  jsScope.getVar(name));	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
321	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.name,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.name,  jsScope.getVar(name));	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
322	[BUG]  [BUGGY]  return  s.reachingDef.get(state.getIn().reachingDef,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s.reachingDef.get(state.getIn().reachingDef,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s.reachingDef.get(state.getIn().reachingDef,  jsScope.getVar(name));	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
323	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  jsScope.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  jsScope.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
324	[BUG]  [BUGGY]  return(s.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
325	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
326	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
327	[BUG]  [BUGGY]  return!(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
328	[BUG]  [BUGGY]  return!(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
329	[BUG]  [BUGGY]  return!(s.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(s.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(s.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
330	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  s.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  s.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
331	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope)!=  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(jsScope)!=  null;	  return    def!=    null?    false    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
332	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope)  ==  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope)  ==  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope)  ==  null;	  return    def!=    null?    false    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
333	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
334	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.depends);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.depends);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
335	[BUG]  [BUGGY]  ||  jsScope  ==  s)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  jsScope  ==  s)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  jsScope  ==  s)  {  return  false;  }	  if(jsScope    ==    s)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
336	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(s.scope);	  aughtExceptionHandler.handleMissingName(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
337	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(s,  jsScope);	  aughtExceptionHandler.handleMissingName(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
338	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(s);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(s);	  aughtExceptionHandler.handleMissingName(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
339	[BUG]  [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
340	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
341	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  s.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  s.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
342	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION)&&  n.getType()  ==  Token.VAR;	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
343	[BUG]  [BUGGY]  ||  jsScope  ==  s.scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  jsScope  ==  s.scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  jsScope  ==  s.scope)  {  return  false;  }	  ||    s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
344	[BUG]  [BUGGY]  ||  s.scope  ==  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  s.scope  ==  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope  ==  scope)  {  return  false;  }	  ||    s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
345	[BUG]  [BUGGY]  resultMap.put(s.scope,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.scope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.scope,  def);	  resultMap.put(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
346	[BUG]  [BUGGY]  resultMap.put(s.scope,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.scope,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.scope,  jsScope.getVar(name));	  resultMap.put(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
347	[BUG]  [BUGGY]  resultMap.put(s.scope,  jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.scope,  jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.scope,  jsScope,  def);	  resultMap.put(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
348	[BUG]  [BUGGY]  n  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  state.getIn().reachingDef.get(jsScope.getVar(name));	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
349	[BUG]  [BUGGY]  n  =  s.getVar(name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  s.getVar(name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  s.getVar(name);	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
350	[BUG]  [BUGGY]  n  =  jsScope.getVar(name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  jsScope.getVar(name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  jsScope.getVar(name,  s.scope);	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
351	[BUG]  [BUGGY]  n  =  jsScope.getVar(name,  s);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  jsScope.getVar(name,  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  jsScope.getVar(name,  s);	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
352	[BUG]  [BUGGY]  n  =  jsScope.getVar(name)+  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  jsScope.getVar(name)+  1;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  jsScope.getVar(name)+  1;	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
353	[BUG]  [BUGGY]  n  =  s.scope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  s.scope.getVar(name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  s.scope.getVar(name);	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
354	[BUG]  [BUGGY]  if(jsScope  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
355	[BUG]  [BUGGY]  if(jsScope!=  null  ||!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
356	[BUG]  [BUGGY]  if(jsScope!=  null  ||!isReachingDefinition(s.scope))  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||!isReachingDefinition(s.scope))  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||!isReachingDefinition(s.scope))  return  false;	  if(jsScope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
357	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s.scope)return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)return  true;  }	  if(jsScope    ==    s.scope)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
358	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  jsScope)  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)  return  false;	  if(jsScope    ==    s.scope)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
359	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope.getVar(name));	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
360	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s.scope);	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
361	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
362	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s);	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
363	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.scope.getVar(name));	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
364	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(s);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDeclaration(s);	  aughtExceptionHandler.handleMissingDeclaration(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
365	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDeclaration(s,  jsScope);	  aughtExceptionHandler.handleMissingDeclaration(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
366	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDeclaration(def);	  aughtExceptionHandler.handleMissingDeclaration(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
367	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDeclaration(jsScope,  def);	  aughtExceptionHandler.handleMissingDeclaration(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
368	[BUG]  [BUGGY]  escaped.handleMissingDeclaration(jsScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.handleMissingDeclaration(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.handleMissingDeclaration(jsScope);	  aughtExceptionHandler.handleMissingDeclaration(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
369	[BUG]  [BUGGY]  if(s.scope!=  null  ||!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
370	[BUG]  [BUGGY]  if(s.scope  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
371	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  scope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
372	[BUG]  [BUGGY]  return(useNode  ==  null)?  null  :  def.deserialize(s,  jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(useNode  ==  null)?  null  :  def.deserialize(s,  jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(useNode  ==  null)?  null  :  def.deserialize(s,  jsScope,  def);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
373	[BUG]  [BUGGY]  resultMap.put(name,  s.scope.createChildFlowState(jsScope));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.scope.createChildFlowState(jsScope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.scope.createChildFlowState(jsScope));	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
374	[BUG]  [BUGGY]  resultMap.put(name,  state.createChildFlowState(s.scope));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  state.createChildFlowState(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  state.createChildFlowState(s.scope));	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
375	[BUG]  [BUGGY]  resultMap.put(name,  state.getScope().createChildFlowState(s.scope));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  state.getScope().createChildFlowState(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  state.getScope().createChildFlowState(s.scope));	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
376	[BUG]  [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.createChildFlowState(s.scope));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  state.getIn().reachingDef.createChildFlowState(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  state.getIn().reachingDef.createChildFlowState(s.scope));	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
377	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  s.getType()!=  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  s.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION)&&  s.getType()!=  Token.VAR;	  return(n.getType()    ==    Token.FUNCTION)&&    n.getType()!=    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
378	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)||  n.getType()!=  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION)||  n.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION)||  n.getType()!=  Token.VAR;	  return(n.getType()    ==    Token.FUNCTION)&&    n.getType()!=    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
379	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  s.scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope!=  s.scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope  ||  jsScope!=  s.scope)  {  return  false;  }	  if(jsScope!=    s.scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
380	[BUG]  [BUGGY]  resultMap.put(name,  s.scope);  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.scope);  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.scope);  return  false;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
381	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope);  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope);  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope);  return  false;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
382	[BUG]  [BUGGY]  resultMap.put(name,  jsScope);  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope);  return  true;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope);  return  true;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
383	[BUG]  [BUGGY]  resultMap.put(name,  s);  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s);  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s);  return  false;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
384	[BUG]  [BUGGY]  escaped.put(name,  jsScope);  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.put(name,  jsScope);  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.put(name,  jsScope);  return  false;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
385	[BUG]  [BUGGY]  resultMap.put(name,  s.jsScope);  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.jsScope);  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.jsScope);  return  false;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
386	[BUG]  [BUGGY]  resultMap.put(s,  jsScope);  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s,  jsScope);  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s,  jsScope);  return  false;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
387	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.target);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.target);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.target);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.target);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
388	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.target,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.target,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.target,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.target);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
389	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.target);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.target);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.target);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.target);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
390	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope,  state);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope,  state);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
391	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope  +  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope  +  1);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
392	[BUG]  [BUGGY]  if(jsScope!=  scope)  return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  scope)  return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  scope)  return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
393	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
394	[BUG]  [BUGGY]  if(jsScope!=  n)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  n)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  n)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
395	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name,  jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
396	[BUG]  [BUGGY]  return  s  ==  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def.depends);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s  ==  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s  ==  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.depends);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
397	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  s.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.depends);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
398	[BUG]  [BUGGY]  return  s!=  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def.depends);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s!=  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s!=  null?  false  :  s.reachingDef.get(jsScope.getVar(name),  def.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.depends);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
399	[BUG]  [BUGGY]  return  s  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.depends);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
400	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.reachingDef);	  resultMap.put(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
401	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.definition);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.definition);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.definition);	  resultMap.put(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
402	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.getName());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.getName());	  resultMap.put(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
403	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.cloneTree());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.cloneTree());	  resultMap.put(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
404	[BUG]  [BUGGY]  escaped.add(s.getString(),  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.getString(),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.getString(),  def);	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
405	[BUG]  [BUGGY]  escaped.add(s.getString()  + ": ");  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.getString()  + ": ");  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.getString()  + ": ");	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
406	[BUG]  [BUGGY]  escaped.add(s.getString(),  name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.getString(),  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.getString(),  name);	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
407	[BUG]  [BUGGY]  escaped.add(jsScope.getString());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope.getString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getString());	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
408	[BUG]  [BUGGY]  escaped.add(s.getName());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.getName());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.getName());	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
409	[BUG]  [BUGGY]  escaped.add(s.getValue());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.getValue());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.getValue());	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
410	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.jsScope));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.jsScope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.jsScope));	  return    def    ==    null?    false    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
411	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
412	[BUG]  [BUGGY]  if(s.scope!=  null  ||  s.scope!=  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||  s.scope!=  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||  s.scope!=  jsScope)  {  return  true;  }	  if(s.scope!=    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
413	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
414	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  jsScope.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  jsScope.scope  ==  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
415	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope  ==  jsScope)return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope  ==  jsScope)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)  {  if(s.scope  ==  jsScope)return  false;  }	  if(jsScope!=    null)    {    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
416	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope)return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  true;  }	  if(jsScope!=    s.scope)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
417	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getScope());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getScope());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state.getScope());	  return(def    ==    null)?    null    :    def.deserialize(s,    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
418	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.deserialize(s,    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
419	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state.getIn());	  return(def    ==    null)?    null    :    def.deserialize(s,    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
420	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getReachingDefinition());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getReachingDefinition());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state.getReachingDefinition());	  return(def    ==    null)?    null    :    def.deserialize(s,    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
421	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  &&  n.getType()!=  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
422	[BUG]  [BUGGY]  return!(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.NAME  &&  n.getType()!=  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
423	[BUG]  [BUGGY]  return!(s.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(s.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(s.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
424	[BUG]  [BUGGY]  return!(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()!=  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
425	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(jsScope);	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
426	[BUG]  [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  true  :  def.reachingDef.get(s.scope);	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
427	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(s.jsScope);	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
428	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(s.name);	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
429	[BUG]  [BUGGY]  resultMap.put(s,  jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s,  jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s,  jsScope,  def);	  resultMap.put(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
430	[BUG]  [BUGGY]  resultMap.put(s,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s,  jsScope.getVar(name));	  resultMap.put(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
431	[BUG]  [BUGGY]  resultMap.put(n,  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(n,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(n,  jsScope);	  resultMap.put(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
432	[BUG]  [BUGGY]  resultMap.put(s,  state);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s,  state);	  resultMap.put(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(s.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(s.depends  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(s.depends  ==  null);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(n.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(n.depends  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(n.depends  ==  null);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(des.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(des.depends  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(des.depends  ==  null);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(state.depends  ==  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(state.depends  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(state.depends  ==  null);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
437	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.name,  jsScope);	  Definition    def    =    state.getIn().reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
438	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  s.name);	  Definition    def    =    state.getIn().reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
439	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.name,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.name,  jsScope.getVar(name));	  Definition    def    =    state.getIn().reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
440	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope,  s.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope,  s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope,  s.name);	  Definition    def    =    state.getIn().reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
441	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).name);	  Definition    def    =    state.getIn().reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
442	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  useNode);	  return(def!=    null)?    null    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
443	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  jsScope);	  return    def!=    null?    false    :    def.reachingDef.get(s.scope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
444	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  scope;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  scope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  scope;	  parent    ==    jsScope    ||    s.scope    ==    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
445	[BUG]  [BUGGY]  jsScope  ||  s.scope  ==  jsScope;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope  ==  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope  ==  jsScope;	  parent    ==    jsScope    ||    s.scope    ==    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
446	[BUG]  [BUGGY]  ||  s.scope  ==  jsScope;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  s.scope  ==  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope  ==  jsScope;	  parent    ==    jsScope    ||    s.scope    ==    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
447	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  state.reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  state.reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  state.reachingDef);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    state);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
448	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  scope,  jsScope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    state);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
449	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope,  state);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  scope,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  scope,  state);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    state);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
450	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s.scope,  jsScope);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
451	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(jsScope,  s.scope);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
452	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  s.scope);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
453	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s,  jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
454	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  state.getIn().reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  state.getIn().reachingDef.get(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  state.getIn().reachingDef.get(jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
455	[BUG]  [BUGGY]  if(def  ==  null  ||  def.depends  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null  ||  def.depends  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null  ||  def.depends  ==  null)  {  return  false;  }	  if(def!=    null    ||    def.depends    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
456	[BUG]  [BUGGY]  if(def!=  null  &&  def.depends  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def!=  null  &&  def.depends  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null  &&  def.depends  ==  null)  {  return  false;  }	  if(def!=    null    ||    def.depends    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
457	[BUG]  [BUGGY]  if(def!=  null  ||  def.depends  ==  null)return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def!=  null  ||  def.depends  ==  null)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null  ||  def.depends  ==  null)return  false;  }	  if(def!=    null    ||    def.depends    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
458	[BUG]  [BUGGY]  escaped  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	  parent!=    jsScope    ||    s.scope    ==    null)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
459	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	  parent!=    jsScope    ||    s.scope    ==    null)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
460	[BUG]  [BUGGY]  parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;	  parent!=    jsScope    ||    s.scope    ==    null)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
461	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.type  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.type  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  else  if(s.type  ==  jsScope)  {  return  true;  }	  parent!=    jsScope    ||    s.scope    ==    null)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
462	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope.getVar(name).toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope.getVar(name).toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
463	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.toString());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
464	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  def);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
465	[BUG]  [BUGGY]  return  s.reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s.reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s.reachingDef.get(jsScope.getVar(name).toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
466	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
467	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.toString());  [CE]  illegal  start  of  expression  [FE]                                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
468	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  false;  if(!s.isReachingDefinition())  {  return  false;  }	  if(s.scope    ==    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
469	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state,  scope);	  return(def    ==    null)?    null    :    def.deserialize(s,    state,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
470	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope,  name);	  return(def    ==    null)?    null    :    def.deserialize(s,    state,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
471	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope,  useNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state,  jsScope,  useNode);	  return(def    ==    null)?    null    :    def.deserialize(s,    state,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
472	[BUG]  [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  s.scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope  ||  jsScope  ==  s.scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope  ||  jsScope  ==  s.scope)  {  return  false;  }	  if(jsScope    ==    s.scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
473	[BUG]  [BUGGY]  if(jsScope!=  s.scope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s.scope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s.scope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
474	[BUG]  [BUGGY]  if(jsScope!=  null)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
475	[BUG]  [BUGGY]  luate(s,  jsScope.depends))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s,  jsScope.depends))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s,  jsScope.depends))  {  return  false;  }	  luate(jsScope,    s.depends))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
476	[BUG]  [BUGGY]  luate(s.depends,  jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s.depends,  jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s.depends,  jsScope))  {  return  false;  }	  luate(jsScope,    s.depends))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
477	[BUG]  [BUGGY]  luate(s,  s.depends))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s,  s.depends))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s,  s.depends))  {  return  false;  }	  luate(jsScope,    s.depends))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
478	[BUG]  [BUGGY]  luate(jsScope,  s.depends))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(jsScope,  s.depends))  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(jsScope,  s.depends))  {  return  true;  }	  luate(jsScope,    s.depends))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
479	[BUG]  [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
480	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  s.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  s.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR  ||  s.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
481	[BUG]  [BUGGY]  if(s!=  null)return  false;  if(jsScope.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s!=  null)return  false;  if(jsScope.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s!=  null)return  false;  if(jsScope.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    null)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
482	[BUG]  [BUGGY]  if(s!=  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s!=  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s!=  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    null)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
483	[BUG]  [BUGGY]  if(jsScope  ==  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    null)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
484	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n,  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n,  state.getIn());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
485	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n  +  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n  +  1);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
486	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(n,  s.name);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(n,  s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(n,  s.name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
487	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n,  state);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n,  state);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
493	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
494	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
495	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope));	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
496	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  name);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
497	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  useNode);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
498	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope,  jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
499	[BUG]  [BUGGY]  return  jsScope  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  jsScope  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  jsScope  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
500	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(jsScope,  s.scope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
501	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  state);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  state);	  return(def    ==    null)?    null    :    def.deserialize(s,    state);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
502	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state.reachingDef);	  return(def    ==    null)?    null    :    def.deserialize(s,    state);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
503	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getAnnotation());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state.getAnnotation());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state.getAnnotation());	  return(def    ==    null)?    null    :    def.deserialize(s,    state);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
504	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name)!=  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.name)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.name)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
505	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  jsScope)!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  jsScope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name,  jsScope)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.name)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
506	[BUG]  [BUGGY]  return  s.name  ==  null?  false  :  def.reachingDef.get(s.name)!=  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s.name  ==  null?  false  :  def.reachingDef.get(s.name)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s.name  ==  null?  false  :  def.reachingDef.get(s.name)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.name)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
507	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR)&&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
508	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
509	[BUG]  [BUGGY]  Return(def!=  null)?  null  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def!=  null)?  null  :  def.reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def!=  null)?  null  :  def.reachingDef.get(s.scope);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
510	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name);	  Return(def    ==    null)?    null    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
511	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  s.target);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  s.target);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  s.target);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.target);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
512	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.target,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.target,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.target,  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.target);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
513	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  n);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  n);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
514	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
515	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  n);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  n);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s,  n);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
516	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }	  parent    ==    jsScope    ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
517	[BUG]  [BUGGY]  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }	  parent    ==    jsScope    ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
518	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  def);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
519	[BUG]  [BUGGY]  ||  s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  s.scope  ==  jsScope)  {  return  true;  }	  ||    s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
520	[BUG]  [BUGGY]  scope  ==  jsScope  ||  s.scope  ==  jsScope;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  scope  ==  jsScope  ||  s.scope  ==  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	scope  ==  jsScope  ||  s.scope  ==  jsScope;	  parent    ==    jsScope    ||    s.scope    ==    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
521	[BUG]  [BUGGY]  Scope  jsScope  ||  s.scope  ==  jsScope;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Scope  jsScope  ||  s.scope  ==  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Scope  jsScope  ||  s.scope  ==  jsScope;	  parent    ==    jsScope    ||    s.scope    ==    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
522	[BUG]  [BUGGY]  escaped  ||  s.scope  ==  jsScope;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped  ||  s.scope  ==  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped  ||  s.scope  ==  jsScope;	  parent    ==    jsScope    ||    s.scope    ==    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  def.depends.length  >  0);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  def.depends.length  >  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null  &&  def.depends.length  >  0);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(def.depends  ==  null  &&  def.depends.length  >  0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends  ==  null  &&  def.depends.length  >  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends  ==  null  &&  def.depends.length  >  0);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  def.depends.length  ==  0);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  def.depends.length  ==  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null  &&  def.depends.length  ==  0);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||  s.depends!=  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||  s.depends!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends  ==  null  ||  s.depends!=  null);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(def!=  null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def!=  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def!=  null);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
528	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state.getIn());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
529	[BUG]  [BUGGY]  resultMap.put(s.scope,  jsScope);  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.scope,  jsScope);  return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.scope,  jsScope);  return  false;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
530	[BUG]  [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
531	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name),  state.getIn().reachingDef.get(s.scope)!=  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name),  state.getIn().reachingDef.get(s.scope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name),  state.getIn().reachingDef.get(s.scope)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.name)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
532	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name),  state.getIn().reachingDef.get(jsScope.getVar(name))!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name),  state.getIn().reachingDef.get(jsScope.getVar(name))!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name),  state.getIn().reachingDef.get(jsScope.getVar(name))!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.name)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
533	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  def);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
534	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  state);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.length  ==  0);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.length  ==  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.length  ==  0);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  s.depends.length  >  0);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  s.depends.length  >  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  s.depends.length  >  0);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
537	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  jsScope)return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  true;  }	  if(s.scope!=    jsScope)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
538	[BUG]  [BUGGY]  State  state  =  jsScope.getIn();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getIn();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getIn();	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
539	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(s.scope,  jsScope);	  aughtExceptionHandler.handleMissingName(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
540	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.getVar(name),  s.scope);	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
541	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  s);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(def,  s);	  aughtExceptionHandler.handleMissingDependency(def,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
542	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope,  escaped);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDependency(def,  jsScope,  escaped);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDependency(def,  jsScope,  escaped);	  aughtExceptionHandler.handleMissingDependency(def,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
543	[BUG]  [BUGGY]  ||(def!=  null  &&  def.depends.containsKey(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def!=  null  &&  def.depends.containsKey(s)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def!=  null  &&  def.depends.containsKey(s)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
544	[BUG]  [BUGGY]  ||(def  >=  null  &&  def.depends.contains(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def  >=  null  &&  def.depends.contains(s)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def  >=  null  &&  def.depends.contains(s)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
545	[BUG]  [BUGGY]  resultMap.put(name,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  def);	  resultMap.put(name,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
546	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope.toString());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope.toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope.toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
547	[BUG]  [BUGGY]  def!=  null  &&  def.depends!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  def!=  null  &&  def.depends!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	def!=  null  &&  def.depends!=  null)  {  return  false;  }	  if(def!=    null    ||    def.depends!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
548	[BUG]  [BUGGY]  escaped.handleMissingDependency(jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.handleMissingDependency(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.handleMissingDependency(jsScope);	  aughtExceptionHandler.handleMissingDependency(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
549	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.get(s.scope);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
550	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope).reachingDef;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope).reachingDef;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope).reachingDef;	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
551	[BUG]  [BUGGY]  ||(def!=  null  &&  def.depends.containsKey(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def!=  null  &&  def.depends.containsKey(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def!=  null  &&  def.depends.containsKey(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
552	[BUG]  [BUGGY]  ||(def  [Delete]  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def  [Delete]  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def  [Delete]  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
553	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  state.getIn());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  state.getIn());	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
554	[BUG]  [BUGGY]  def!=  null  &&  def.depends  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  def!=  null  &&  def.depends  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	def!=  null  &&  def.depends  ==  null)  {  return  false;  }	  if(def!=    null    ||    def.depends    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
555	[BUG]  [BUGGY]  parent!=  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent!=  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  if(s.scope!=  jsScope)  {  return  false;  }	  if(jsScope!=    s.scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
556	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScope();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Scope  s  =  jsScope.getScope();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Scope  s  =  jsScope.getScope();	  if(jsScope!=    s.scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
557	[BUG]  [BUGGY]  escaped.add(s.scope.getString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.scope.getString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.scope.getString());	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
558	[BUG]  [BUGGY]  escaped.add(s.toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(s.toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(s.toString());	  escaped.add(s.getString());    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
559	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name)+  1);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope.getVar(name)+  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getVar(name)+  1);	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
560	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  state.getIn());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  state.getIn());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  state.getIn());	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
561	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
562	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null)  {  if(s.scope  ==  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
563	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  s.jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  s.jsScope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
564	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name));	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
565	[BUG]  [BUGGY]  resultMap.put(name,  s.jsScope  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.jsScope  +  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.jsScope  +  1);	  resultMap.put(name,    s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
566	[BUG]  [BUGGY]  if(def  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
567	[BUG]  [BUGGY]  if(def!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
568	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  &&  n.getType()  >>  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
569	[BUG]  [BUGGY]  return(def.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()!=  Token.FUNCTION  &&  n.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
570	[BUG]  [BUGGY]  if(s.scope!=  null  ||!s.scope.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||!s.scope.isEmpty())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||!s.scope.isEmpty())  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
571	[BUG]  [BUGGY]  if(s.scope!=  null  ||  s.depends!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||  s.depends!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||  s.depends!=  null)  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
572	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(name,  jsScope);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
573	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope,  def);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
574	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  s.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(jsScope,  s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingName(jsScope,  s.name);	  aughtExceptionHandler.handleMissingName(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
575	[BUG]  [BUGGY]  resultMap.put(s.name,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  def);	  resultMap.put(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
576	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.getVar(name),  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.getVar(name),  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.getVar(name),  jsScope);	  resultMap.put(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
577	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  s.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.scope,  s.name);	  Definition    def    =    state.getIn().reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
578	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(s.scope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(s.scope,  name);	  Definition    def    =    state.getIn().reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
579	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope  +  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope  +  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope  +  1);	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
580	[BUG]  [BUGGY]  return!(def.getType()  ==  Token.NAME  ||  def.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(def.getType()  ==  Token.NAME  ||  def.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(def.getType()  ==  Token.NAME  ||  def.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
581	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.containsKey(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.containsKey(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.containsKey(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
582	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
583	[BUG]  [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
584	[BUG]  [BUGGY]  jsScope.reachingDef.put(s.scope,  jsScope.getParent());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.reachingDef.put(s.scope,  jsScope.getParent());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.reachingDef.put(s.scope,  jsScope.getParent());	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
585	[BUG]  [BUGGY]  jsScope.defineDeclaration(def,  s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.defineDeclaration(def,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.defineDeclaration(def,  s.scope);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
586	[BUG]  [BUGGY]  jsScope.defineDeclaration(def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.defineDeclaration(def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.defineDeclaration(def);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
587	[BUG]  [BUGGY]  jsScope.reachingDef.put(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.reachingDef.put(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.reachingDef.put(s.scope,  jsScope);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
588	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
589	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  name);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  name);	  return(def!=    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
590	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
591	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
592	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
593	[BUG]  [BUGGY]  if(jsScope!=  cfgNode)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  cfgNode)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  cfgNode)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
594	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);	  return    def    ==    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
595	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name  +  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name  +  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name  +  name);	  return    def    ==    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
596	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(def.name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(def.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(def.name);	  return    def    ==    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
597	[BUG]  [BUGGY]  parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  jsScope  ||  s.scope  ==  null)  {  return  false;  }	  parent!=    jsScope    ||    s.scope    ==    null)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
598	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  null)  {  return  false;  }	  parent!=    jsScope    ||    s.scope    ==    null)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
599	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state).reachingDef;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  state).reachingDef;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  state).reachingDef;	  return(def    ==    null)?    null    :    def.deserialize(s,    state);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
600	[BUG]  [BUGGY]  State  state  =  jsScope.getOwnScope(s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getOwnScope(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getOwnScope(s.scope);	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
601	[BUG]  [BUGGY]  State  state  =  jsScope.getFunctionDeclaration(s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getFunctionDeclaration(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getFunctionDeclaration(s.scope);	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
602	[BUG]  [BUGGY]  Return(def  ==  null)?  null  :  def.deserialize(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Return(def  ==  null)?  null  :  def.deserialize(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Return(def  ==  null)?  null  :  def.deserialize(s,  jsScope);	  return(def!=    null)?    null    :    def.deserialize(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
603	[BUG]  [BUGGY]  if(jsScope!=  cfgNode)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  cfgNode)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  cfgNode)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
604	[BUG]  [BUGGY]  if(jsScope!=  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
605	[BUG]  [BUGGY]  if(jsScope!=  n)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  n)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  n)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
606	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  state);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  state);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    state);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
607	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  state,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  state,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(s,  state,  jsScope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    state);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  state.getIn().reachingDef  ==  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  state.getIn().reachingDef  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  state.getIn().reachingDef  ==  null);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
609	[BUG]  [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
610	[BUG]  [BUGGY]  return(jsScope.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(jsScope.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(jsScope.getType()  ==  Token.FUNCTION  ||  s.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
611	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  jsScope)return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  true;  }	  if(s.scope    ==    jsScope)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
612	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s);	  return(def!=    null)?    null    :    def.reachingDef.get(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  state.getIn().reachingDef  ==  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  state.getIn().reachingDef  ==  null);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null  &&  state.getIn().reachingDef  ==  null);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends!=  null,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null,  state.getIn().reachingDef);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null,  s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends!=  null,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null,  s.scope);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
616	[BUG]  [BUGGY]  parent!=  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent!=  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  jsScope  ||  s.scope  ==  jsScope)  {  return  false;  }	  parent!=    jsScope    ||    s.scope    ==    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
617	[BUG]  [BUGGY]  if(s.scope!=  null)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
618	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  jsScope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  false;  if(isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
619	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  s.depends);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  s.depends);	  return    state.getIn().reachingDef.get(s.scope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
620	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null)  {  if(s.scope!=  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
621	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null)  {  if(s.scope!=  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
622	[BUG]  [BUGGY]  Definition  def  =  state.reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.reachingDef.get(s.scope.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
623	[BUG]  [BUGGY]  escaped.add(defJoin);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(defJoin);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(defJoin);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
624	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getIn();	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn().reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
625	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  s.jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  s.jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
626	[BUG]  [BUGGY]  return!(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
627	[BUG]  [BUGGY]  if(!isReachingDefinition(def))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(!isReachingDefinition(def))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(!isReachingDefinition(def))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(!isReachingDefinition(s.scope));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(!isReachingDefinition(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(!isReachingDefinition(s.scope));	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
629	[BUG]  [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.depends))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.depends))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(isReachingDefinition(s.scope)||  isReachingDefinition(s.depends))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
630	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  true;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
631	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
632	[BUG]  [BUGGY]  if(s  ==  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s  ==  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s  ==  null)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    null)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
633	[BUG]  [BUGGY]  if(jsScope!=  null)return  false;  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null)return  false;  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null)return  false;  if(s.scope!=  jsScope)  {  return  false;  }	  if(jsScope!=    null)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
634	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  >>  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
635	[BUG]  [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  >=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
636	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  useNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  useNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  useNode);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
637	[BUG]  [BUGGY]  if(s.scope!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
638	[BUG]  [BUGGY]  luate(s,  s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s,  s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s,  s.scope))  {  return  false;  }	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
639	[BUG]  [BUGGY]  Evaluate(s.scope,  jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Evaluate(s.scope,  jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Evaluate(s.scope,  jsScope))  {  return  false;  }	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
640	[BUG]  [BUGGY]  Evaluate(s,  s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Evaluate(s,  s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Evaluate(s,  s.scope))  {  return  false;  }	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
641	[BUG]  [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  >=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
642	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s,  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
643	[BUG]  [BUGGY]  resultMap.put(s,  jsScope.getVar(name),  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s,  jsScope.getVar(name),  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s,  jsScope.getVar(name),  jsScope);	  resultMap.put(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
644	[BUG]  [BUGGY]  resultMap.put(s,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s,  def);	  resultMap.put(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
645	[BUG]  [BUGGY]  return  s  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  def.depends);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  s  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  def.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  s  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  def.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.depends);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
646	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope.getVar(name),  s.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.depends);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
647	[BUG]  [BUGGY]  Evaluate(s,  s.depends))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Evaluate(s,  s.depends))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Evaluate(s,  s.depends))  {  return  false;  }	  luate(jsScope,    s.depends))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
648	[BUG]  [BUGGY]  s  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  s  =  jsScope.getVar(name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	s  =  jsScope.getVar(name);	  if(jsScope!=    s)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
649	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name,  state);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
650	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name  +  name,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
651	[BUG]  [BUGGY]  if(jsScope  ==  s)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(s.scope    ==    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
652	[BUG]  [BUGGY]  if(reachingDef!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(reachingDef!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(reachingDef!=  null)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
653	[BUG]  [BUGGY]  if(jsScope  ==  s)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope    ==    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
654	[BUG]  [BUGGY]  resultMap.put(s.scope,  jsScope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.scope,  jsScope.cloneTree());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.scope,  jsScope.cloneTree());	  resultMap.put(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
655	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(s,  jsScope,  name);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
656	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  this);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  this);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
657	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  def);	  return(def    ==    null)?    null    :    def.deserialize(s,    state,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
658	[BUG]  [BUGGY]  return(jsScope.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(jsScope.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(jsScope.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
659	[BUG]  [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()  ==  Token.FUNCTION  ||  s.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
660	[BUG]  [BUGGY]  resultMap.put(name,  s.cloneTree());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.cloneTree());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.cloneTree());	  resultMap.put(name,    s);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
661	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.createChildFlowState(s.scope));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.createChildFlowState(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.createChildFlowState(s.scope));	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
662	[BUG]  [BUGGY]  resultMap.put(name,  s.createChildFlowState(jsScope));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.createChildFlowState(jsScope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.createChildFlowState(jsScope));	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
663	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.createChildFlowState(s.scope),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope.createChildFlowState(s.scope),  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.createChildFlowState(s.scope),  def);	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
664	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR)&&  n.getType()!=  Token.FUNCTION;	  return(n.getType()    ==    Token.FUNCTION)&&    n.getType()!=    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
665	[BUG]  [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()  ==  Token.FUNCTION  ||  def.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
666	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
667	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.name,  state.getIn().reachingDef);	  return    def!=    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
668	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name  +  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name  +  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.name  +  name);	  return    def!=    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
669	[BUG]  [BUGGY]  if(jsScope!=  s)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  s)return  false;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  s)return  false;  if(!s.isReachingDefinition())  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(!s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
670	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
671	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()  >>  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  &&  n.getType()  >>  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  &&  n.getType()  >>  Token.FUNCTION);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
672	[BUG]  [BUGGY]  return(def.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
673	[BUG]  [BUGGY]  return(s.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
674	[BUG]  [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
675	[BUG]  [BUGGY]  if(s.scope!=  jsScope)turn  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  jsScope)turn  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)turn  false;	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
676	[BUG]  [BUGGY]  n  =  jsScope.getVar(name,  s.depends);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  jsScope.getVar(name,  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  jsScope.getVar(name,  s.depends);	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
677	[BUG]  [BUGGY]  n  =  state.getIn().reachingDef.get(jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  state.getIn().reachingDef.get(jsScope.getVar(name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  state.getIn().reachingDef.get(jsScope.getVar(name);	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
678	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name).depends);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name).depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name).depends);	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
679	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.root,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.root,  jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.root,  jsScope.getVar(name));	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
680	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name)+  1);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name)+  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope.getVar(name)+  1);	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
681	[BUG]  [BUGGY]  if(s.scope!=  null)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
682	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    true;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
683	[BUG]  [BUGGY]  if(s.scope!=  null  ||  jsScope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||  jsScope!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||  jsScope!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
684	[BUG]  [BUGGY]  if(jsScope!=  null  ||  s.scope!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  s.scope!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  s.scope!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
685	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.add(jsScope.getVar(name),  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.add(jsScope.getVar(name),  s.depends);	  escaped.add(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
686	[BUG]  [BUGGY]  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    null)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
687	[BUG]  [BUGGY]  if(jsScope!=  null  ||  s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    null)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
688	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  def);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
689	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)&&  state.getIn().reachingDef.get(s.scope);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
690	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.depends);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope,  s.depends);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
691	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
692	[BUG]  [BUGGY]  State  state  =  jsScope.getScopeRoot();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getScopeRoot();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getScopeRoot();	  State    state    =    jsScope.getScope();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
693	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  true;  if(isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  jsScope)return  true;  if(isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  true;  if(isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    jsScope)return    false;    if(isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
694	[BUG]  [BUGGY]  parent!=  if(s.scope!=  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent!=  if(s.scope!=  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent!=  if(s.scope!=  jsScope)  {  return  true;  }	  if(s.scope!=    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
695	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FOR  &&  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FOR  &&  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FOR  &&  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
696	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	NodeTraversal.traverse(compiler,  s,  this,  state);	  NodeTraversal.traverse(compiler,    s,    this);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
697	[BUG]  [BUGGY]  if(s.type!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.type!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.type!=  jsScope)  {  return  false;  }	  if(jsScope!=    s)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
698	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name,  s.scope);	  return    def    ==    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
699	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope,  s.depends);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope,  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name),  s.scope,  s.depends);	  return    def    ==    null?    false    :    def.reachingDef.get(jsScope.getVar(name),    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
700	[BUG]  [BUGGY]  nisips.put(name,  jsScope.createChildFlowState(s.scope));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  nisips.put(name,  jsScope.createChildFlowState(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	nisips.put(name,  jsScope.createChildFlowState(s.scope));	  nisips.put(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
701	[BUG]  [BUGGY]  if(jsScope!=  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  jsScope)return  true;  if(!isReachingDefinition(s.scope))  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
702	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  s.scope  +  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  s.scope  +  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  s.scope  +  name);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
703	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name),  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name),  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name  +  name),  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name    +    name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
704	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION)&&  n.getType()!=  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION)&&  n.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION)&&  n.getType()!=  Token.VAR;	  return(n.getType()    ==    Token.FUNCTION)&&    n.getType()!=    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
705	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getFirstChild()!=  Token.VAR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION)&&  n.getFirstChild()!=  Token.VAR;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION)&&  n.getFirstChild()!=  Token.VAR;	  return(n.getType()    ==    Token.FUNCTION)&&    n.getType()!=    Token.VAR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
706	[BUG]  [BUGGY]  ||  jsScope  ==  state.getIn())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  jsScope  ==  state.getIn())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  jsScope  ==  state.getIn())  {  return  false;  }	  ||    s.scope    ==    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
707	[BUG]  [BUGGY]  jsScope.reachingDef.put(name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.reachingDef.put(name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.reachingDef.put(name,  s.scope);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
708	[BUG]  [BUGGY]  Scope.Var  s  =  jsScope.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Scope.Var  s  =  jsScope.getParent();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Scope.Var  s  =  jsScope.getParent();	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
709	[BUG]  [BUGGY]  Scope.Var  s  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Scope.Var  s  =  jsScope.getVar(name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Scope.Var  s  =  jsScope.getVar(name);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
710	[BUG]  [BUGGY]  jsScope.defineDependency(def,  s.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope.defineDependency(def,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope.defineDependency(def,  s.scope);	  parent    ==    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
711	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  &&  state.getIn().reachingDef.contains(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  &&  state.getIn().reachingDef.contains(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  &&  state.getIn().reachingDef.contains(jsScope.getVar(name));	  return(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR)&&    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
712	[BUG]  [BUGGY]  Scope  jsScope  ||  s.scope!=  jsScope;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Scope  jsScope  ||  s.scope!=  jsScope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Scope  jsScope  ||  s.scope!=  jsScope;	  parent    ==    jsScope    ||    s.scope!=    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
713	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  def.depends.contains(s.scope));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends!=  null  &&  def.depends.contains(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null  &&  def.depends.contains(s.scope));	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
714	[BUG]  [BUGGY]  Preconditions.checkState(def.depends!=  null,  def.depends.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends!=  null,  def.depends.length);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends!=  null,  def.depends.length);	  Preconditions.checkState(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
715	[BUG]  [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)&&  state.getIn().reachingDef.get(s.scope);	  return(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
716	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  cfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  cfgNode);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  cfgNode);	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
717	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope)  >>  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.scope)  >>  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.scope)  >>  null;	  return    def!=    null?    false    :    def.reachingDef.get(s.scope)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
718	[BUG]  [BUGGY]  resultMap.put(s.name,  jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(s.name,  jsScope.getVar(name).toString());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(s.name,  jsScope.getVar(name).toString());	  resultMap.put(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
719	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.length  ==  0);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.length  ==  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.length  ==  0);	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||!def.depends.contains(s.scope));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||!def.depends.contains(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends  ==  null  ||!def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
721	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s.scope));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s.scope));  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
723	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.cloneTree());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.cloneTree());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.cloneTree());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
724	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FOR);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FOR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FOR);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
725	[BUG]  [BUGGY]  escaped.handleMissingName(jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  escaped.handleMissingName(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	escaped.handleMissingName(jsScope);	  aughtExceptionHandler.handleMissingName(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
726	[BUG]  [BUGGY]  ResultMap.put(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ResultMap.put(name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	ResultMap.put(name,  jsScope);	  resultMap.put(s,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
727	[BUG]  [BUGGY]  State  state  =  jsScope.getOwnerScope();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getOwnerScope();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getOwnerScope();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
728	[BUG]  [BUGGY]  State  state  =  jsScope.getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getCurrentScope();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getCurrentScope();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
729	[BUG]  [BUGGY]  State  state  =  jsScope.getStart();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  State  state  =  jsScope.getStart();  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	State  state  =  jsScope.getStart();	  State    state    =    jsScope.getParent();    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
730	[BUG]  [BUGGY]  ||(def!=  null  &&  def.depends.contains(s.name)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def!=  null  &&  def.depends.contains(s.name)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def!=  null  &&  def.depends.contains(s.name)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
731	[BUG]  [BUGGY]  ||(def.depends  ==  null  &&  def.depends.contains(s)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def.depends  ==  null  &&  def.depends.contains(s)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def.depends  ==  null  &&  def.depends.contains(s)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
732	[BUG]  [BUGGY]  if(isReachingDefinition(jsScope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(isReachingDefinition(jsScope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(isReachingDefinition(jsScope))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
733	[BUG]  [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.rValue))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(isReachingDefinition(s.scope)||  isReachingDefinition(s.rValue))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(isReachingDefinition(s.scope)||  isReachingDefinition(s.rValue))  {  return  false;  }	  if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
734	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
735	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope,  name,  jsScope);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
736	[BUG]  [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  return(n.getType()!=    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
737	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  jsScope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  jsScope,  name);	  return(def!=    null)?    null    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
738	[BUG]  [BUGGY]  jsScope!=  s.scope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope!=  s.scope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope!=  s.scope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	  parent!=    jsScope    ||    s.scope    ==    jsScope)    {    return    false;    }    else    if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
739	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  aughtExceptionHandler.handleMissingDeclaration(n);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	aughtExceptionHandler.handleMissingDeclaration(n);	  aughtExceptionHandler.handleMissingDeclaration(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
740	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(jsScope);	  Definition    def    =    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
741	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(s.scope,  jsScope);	  Definition    def    =    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
742	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(jsScope,  s.scope);	  Definition    def    =    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
743	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(jsScope.getVar(name),  s.depends);	  return(def    ==    null)?    null    :    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
744	[BUG]  [BUGGY]  return(def.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
745	[BUG]  [BUGGY]  if(def  ==  null  ||  def.depends  ==  null)return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null  ||  def.depends  ==  null)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null  ||  def.depends  ==  null)return  false;  }	  if(def!=    null    ||    def.depends    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
746	[BUG]  [BUGGY]  if(def.depends  ==  null  ||  def.depends  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def.depends  ==  null  ||  def.depends  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def.depends  ==  null  ||  def.depends  ==  null)  {  return  false;  }	  if(def!=    null    ||    def.depends    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
747	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
748	[BUG]  [BUGGY]  if(jsScope!=  jsScope)return  true;  if(!s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  jsScope)return  true;  if(!s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  jsScope)return  true;  if(!s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    jsScope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
749	[BUG]  [BUGGY]  return(s.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(s.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(s.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()!=    Token.FUNCTION    &&    n.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
750	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.getVar(name).reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope.getVar(name).reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.getVar(name).reachingDef);	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
751	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.getVar(name),  s);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope.getVar(name),  s);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.getVar(name),  s);	  resultMap.put(name,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
752	[BUG]  [BUGGY]  if(def.depends!=  null  ||  def.depends!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def.depends!=  null  ||  def.depends!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def.depends!=  null  ||  def.depends!=  null)  {  return  false;  }	  if(def!=    null    ||    def.depends!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
753	[BUG]  [BUGGY]  if(def  ==  null  ||  def.depends!=  null)return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null  ||  def.depends!=  null)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null  ||  def.depends!=  null)return  false;  }	  if(def!=    null    ||    def.depends!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
754	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s,  jsScope);	  return    def!=    null?    false    :    def.reachingDef.get(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
755	[BUG]  [BUGGY]  if(jsScope!=  null  ||  s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  s.scope!=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  s.scope!=  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
756	[BUG]  [BUGGY]  if(jsScope  ==  null)return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
757	[BUG]  [BUGGY]  if(jsScope!=  null  ||  s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope!=  null  ||  s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope!=  null  ||  s.scope  ==  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
758	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getOut());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getOut());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  state.getOut());	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    state.getIn());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
759	[BUG]  [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||!def.depends.contains(s.scope));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||!def.depends.contains(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends  ==  null  ||!def.depends.contains(s.scope));	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
760	[BUG]  [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||  def.depends.length  ==  0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||  def.depends.length  ==  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends  ==  null  ||  def.depends.length  ==  0);	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
761	[BUG]  [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||!def.depends.isEmpty());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends  ==  null  ||!def.depends.isEmpty());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends  ==  null  ||!def.depends.isEmpty());	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
762	[BUG]  [BUGGY]  Preconditions.checkState(def.depends  ==  null  &&  def.depends.contains(s.scope));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkState(def.depends  ==  null  &&  def.depends.contains(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkState(def.depends  ==  null  &&  def.depends.contains(s.scope));	  Preconditions.checkState(def.depends    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
763	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s.getVar(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  s.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope,  s.getVar(name));	  return    state.getIn().reachingDef.get(s.scope,    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
764	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  s.scope)!=  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name,  s.scope)!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name,  s.scope)!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.name)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
765	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name),  s.scope!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.name),  s.scope!=  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.name),  s.scope!=  null;	  return    def    ==    null?    false    :    def.reachingDef.get(s.name)!=    null;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
766	[BUG]  [BUGGY]  ||(def.depends  ==  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def.depends  ==  null  &&  def.depends.contains(s.scope)))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def.depends  ==  null  &&  def.depends.contains(s.scope)))  {  return  false;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
767	[BUG]  [BUGGY]  ||(def!=  null  &&  def.depends.contains(s.scope)))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||(def!=  null  &&  def.depends.contains(s.scope)))  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||(def!=  null  &&  def.depends.contains(s.scope)))  {  return  true;  }	  ||(def!=    null    &&    def.depends.contains(s.scope)))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
768	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(jsScope.getVar(name));	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
769	[BUG]  [BUGGY]  if(!(jsScope!=  s.scope  ||  jsScope!=  s.scope)return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(!(jsScope!=  s.scope  ||  jsScope!=  s.scope)return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(!(jsScope!=  s.scope  ||  jsScope!=  s.scope)return  false;	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
770	[BUG]  [BUGGY]  if(!(jsScope!=  s.scope  ||  jsScope!=  s.scope)return  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(!(jsScope!=  s.scope  ||  jsScope!=  s.scope)return  false);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(!(jsScope!=  s.scope  ||  jsScope!=  s.scope)return  false);	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
771	[BUG]  [BUGGY]  if(!(jsScope!=  s.scope  ||  jsScope  ==  s.scope)return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(!(jsScope!=  s.scope  ||  jsScope  ==  s.scope)return  false;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(!(jsScope!=  s.scope  ||  jsScope  ==  s.scope)return  false;	  if(jsScope!=    s.scope)return    false;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
772	[BUG]  [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name,  s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  false  :  def.reachingDef.get(s.name,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  false  :  def.reachingDef.get(s.name,  s.scope);	  return    def!=    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
773	[BUG]  [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(s.name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  true  :  def.reachingDef.get(s.name);	  return    def!=    null?    false    :    def.reachingDef.get(s.name);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
774	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).depends);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).depends);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).depends);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
775	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
776	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n).reachingDef;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n).reachingDef;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n).reachingDef;	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
777	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n),  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n),  state.getIn().reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name,  n),  state.getIn().reachingDef);	  return(def    ==    null)?    null    :    def.reachingDef.get(s.name,    n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
778	[BUG]  [BUGGY]  if(def  ==  null  ||!def.depends.contains(s))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null  ||!def.depends.contains(s))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null  ||!def.depends.contains(s))  {  return  false;  }	  if(def    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
779	[BUG]  [BUGGY]  if(def  ==  null  ||!def.depends.contains(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null  ||!def.depends.contains(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null  ||!def.depends.contains(s.scope))  {  return  false;  }	  if(def    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
780	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.deserialize(s,  scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.deserialize(s,  scope);	  return(def    ==    null)?    null    :    def.deserialize(s,    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
781	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    >=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
782	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(def  ==  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def  ==  null)  {  if(s.scope  >=  jsScope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope    >=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
783	[BUG]  [BUGGY]  resultMap.put(name,  jsScope);  return  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope);  return  null;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope);  return  null;	  resultMap.put(name,    jsScope);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
784	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.cloneTree());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.cloneTree());  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.cloneTree());	  return(def    ==    null)?    null    :    def.deserialize(jsScope,    s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
785	[BUG]  [BUGGY]  return(desef  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(desef  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(desef  ==  null)?  null  :  def.reachingDef.get(s.name,  jsScope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
786	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  jsScope).reachingDef;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.name,  jsScope).reachingDef;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.name,  jsScope).reachingDef;	  return(def!=    null)?    null    :    def.reachingDef.get(s.name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
787	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.NAME);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
788	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)&&  state.getIn().reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)&&  state.getIn().reachingDef.get(s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)&&  state.getIn().reachingDef.get(s.scope);	  return!(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
789	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  s.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  s.scope);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
790	[BUG]  [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  def);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return!(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  def);	  return!(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
791	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  s.scope);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  s.scope);	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
792	[BUG]  [BUGGY]  luate(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  luate(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	luate(s.scope))  {  return  false;  }	  luate(jsScope,    s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
793	[BUG]  [BUGGY]  resultMap.put(name,  state.reachingDef.createChildFlowState(s.scope));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  state.reachingDef.createChildFlowState(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  state.reachingDef.createChildFlowState(s.scope));	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
794	[BUG]  [BUGGY]  resultMap.put(name,  jsScope.createChildFlowState(s.scope),  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  jsScope.createChildFlowState(s.scope),  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope.createChildFlowState(s.scope),  jsScope);	  resultMap.put(name,    jsScope.createChildFlowState(s.scope));    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
795	[BUG]  [BUGGY]  jsScope  ==  s.scope;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  jsScope  ==  s.scope;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	jsScope  ==  s.scope;	  parent    ==    jsScope    ||    s.scope    ==    jsScope;    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
796	[BUG]  [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	parent  ==  jsScope  ||  s.scope  ==  jsScope)  {  return  true;  }	  if(s.scope    ==    jsScope)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
797	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  s.jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  s.jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.scope,  s.jsScope);	  return(def!=    null)?    null    :    def.reachingDef.get(s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
798	[BUG]  [BUGGY]  n  =  jsScope.getVar(name,  s.reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  jsScope.getVar(name,  s.reachingDef);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  jsScope.getVar(name,  s.reachingDef);	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
799	[BUG]  [BUGGY]  n  =  jsScope.getVar(name).reachingDef;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  n  =  jsScope.getVar(name).reachingDef;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	n  =  jsScope.getVar(name).reachingDef;	  n    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
800	[BUG]  [BUGGY]  if(s.scope!=  null  ||!s.scope.isLocal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||!s.scope.isLocal())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||!s.scope.isLocal())  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
801	[BUG]  [BUGGY]  if(s.scope!=  null  ||  escaped.contains(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||  escaped.contains(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||  escaped.contains(s.scope))  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
802	[BUG]  [BUGGY]  if(s.scope!=  null)return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null)return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
803	[BUG]  [BUGGY]  if(s.scope!=  null  ||!s.scope.isScope())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  ||!s.scope.isScope())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  ||!s.scope.isScope())  {  return  false;  }	  if(s.scope!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
804	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope)+  1;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(s.scope,  jsScope)+  1;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(s.scope,  jsScope)+  1;	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
805	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  jsScope.getIn().reachingDef.get(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  jsScope.getIn().reachingDef.get(s.scope,  jsScope);	  return    state.getIn().reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
806	[BUG]  [BUGGY]  if(s.scope!=  null  &&!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope!=  null  &&!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  null  &&!isReachingDefinition(s.scope))  {  return  false;  }	  if(s.scope!=    null)return    false;    if(!isReachingDefinition(s.scope))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
807	[BUG]  [BUGGY]  if(jsScope  ==  s)return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s)return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s)return  false;  }	  if(s.scope    ==    jsScope)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
808	[BUG]  [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(n.getType()!=  Token.FUNCTION  ||  s.getType()!=  Token.VAR);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()!=  Token.FUNCTION  ||  s.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.FUNCTION    ||    s.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
809	[BUG]  [BUGGY]  resultMap.put(n,  s.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(n,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(n,  s.scope);	  resultMap.put(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
810	[BUG]  [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def!=  null?  true  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def!=  null?  true  :  def.reachingDef.get(jsScope.getVar(name));	  return    def!=    null?    false    :    def.reachingDef.get(s.scope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
811	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name),  s.scope);	  return    def    ==    null?    false    :    def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
812	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope,  jsScope);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
813	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingDependency(jsScope);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingDependency(jsScope);  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingDependency(jsScope);  }	  aughtExceptionHandler.handleMissingDependency(jsScope);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
814	[BUG]  [BUGGY]  if(jsScope  ==  s.scope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(jsScope  ==  s.scope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(jsScope  ==  s.scope)return  false;  if(s.isReachingDefinition())  {  return  false;  }	  if(jsScope!=    s.scope)return    false;    if(s.isReachingDefinition())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
815	[BUG]  [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  true  :  def.reachingDef.get(s.scope,  jsScope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  true  :  def.reachingDef.get(s.scope,  jsScope);	  return    def    ==    null?    true    :    def.reachingDef.get(s.scope);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
816	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope)+  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope)+  1;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope,  jsScope)+  1;	  return    def    ==    null?    false    :    def.reachingDef.get(s.scope,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
817	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(s.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  def.reachingDef.get(s.scope.getVar(name));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(s.scope.getVar(name));	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
818	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope.getVar(name),  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(jsScope.getVar(name),  s.scope);	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
819	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope.getVar(name)+  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Definition  def  =  def.reachingDef.get(jsScope.getVar(name)+  1);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Definition  def  =  def.reachingDef.get(jsScope.getVar(name)+  1);	  Definition    def    =    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
820	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(vsScope,  s.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return  state.getIn().reachingDef.get(vsScope,  s.scope);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  state.getIn().reachingDef.get(vsScope,  s.scope);	  return    state.getIn().reachingDef.get(s.scope,    s.scope);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
821	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.scope,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.scope,  name);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(jsScope,  s.scope,  name);	  return(def    ==    null)?    null    :    def.deserialize(s,    jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
822	[BUG]  [BUGGY]  ||  jsScope!=  state.getIn())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  ||  jsScope!=  state.getIn())  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	||  jsScope!=  state.getIn())  {  return  false;  }	  ||    s.scope!=    jsScope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
823	[BUG]  [BUGGY]  resultMap.put(name,  s.jsScope).reachingDef;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  resultMap.put(name,  s.jsScope).reachingDef;  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  s.jsScope).reachingDef;	  resultMap.put(name,    s.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope));  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.size()  >  0);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.size()  >  0);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.size()  >  0);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
826	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null,  def.depends.length);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null,  def.depends.length);  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	Preconditions.checkArgument(def.depends!=  null,  def.depends.length);	  Preconditions.checkArgument(def.depends!=    null);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
827	[BUG]  [BUGGY]  if(s.scope  ==  scope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }      [BUGGY]  if(s.scope  ==  scope)  {  return  false;  }  [BUGGY]      }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  scope)  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    scope)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
