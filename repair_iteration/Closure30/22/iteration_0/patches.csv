bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  true;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return  true;  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  true;	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
2	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  if(s.scope!=  jsScope)  {  return  false;  }  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
3	[BUG]  [BUGGY]  if(s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  if(s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope  ==  jsScope)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
4	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  if(s.scope!=  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  false;  }  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
5	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  if(s.scope!=  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)  {  return  false;  }  else  if(s.scope  ==  jsScope)  {  return  true;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
6	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  if(s.scope!=  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  false;  if(!isReachingDefinition(s.scope))  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
7	[BUG]  [BUGGY]  if(s.scope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  if(s.scope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(s.scope!=  jsScope)return  false;  if(s.isReachingDefinition())  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	  	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
9	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(jsScope.getVar(name));	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
10	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
11	[BUG]  [BUGGY]  if(def!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  if(def!=  null)  {  return  false;  }  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	if(def!=  null)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
12	[BUG]  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope)!=  null;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return  def  ==  null?  false  :  def.reachingDef.get(s.scope)!=  null;  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return  def  ==  null?  false  :  def.reachingDef.get(s.scope)!=  null;	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
13	[BUG]  [BUGGY]  resultMap.put(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  resultMap.put(name,  jsScope);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	resultMap.put(name,  jsScope);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
14	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return(def  ==  null)?  null  :  def.deserialize(s,  jsScope);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.deserialize(s,  jsScope);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
15	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.scope);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.scope);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
16	[BUG]  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return(def!=  null)?  null  :  def.reachingDef.get(s.scope);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def!=  null)?  null  :  def.reachingDef.get(s.scope);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
17	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
18	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
19	[BUG]  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }  }  [BUGGY]  return(def  ==  null)?  null  :  def.reachingDef.get(s.name);  [BUGGY]  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23791547571544325	436	436	3	replace	return(def  ==  null)?  null  :  def.reachingDef.get(s.name);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
