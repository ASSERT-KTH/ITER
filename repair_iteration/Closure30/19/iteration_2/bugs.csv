bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >=  c  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >=  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >>  c  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >>  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >>  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  c  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >=  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >=  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >>  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >>  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  >>  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getFirstChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  cfgNode  =  c.getFirstChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getFirstChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
17	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  c  =  c.getFirstChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  c  =  c.getLastChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  Node  c  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  c  =  c.getNext();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  NodeTraversal.traverse(compiler,  c,  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  output,  conditional);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  this);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >=  c  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >=  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >>  c  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >>  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >>  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()!=  c  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()!=  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()!=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  ==  c  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  ==  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  ==  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  c.getLastChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getLastChild(),  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  conditional);	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  c.getLastChild(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getLastChild(),  cfgNode,  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  cfgNode,  output);	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  n.getFirstChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  Node  cfgNode  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  cfgNode  =  c.getLastChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getLastChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  Node  cfgNode  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  cfgNode  =  n.getLastChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  n.getLastChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Preconditions.checkState(c.hasChildren());  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren());	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
48	[BUG]  [BUGGY]  c  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c  =  c.getLastChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c  =  c.getLastChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  n.getFirstChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >>  c  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >>  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >>  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >=  c  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >=  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  c  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  c  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >>  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >>  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  >>  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
55	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
63	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
64	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  Node  aNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  aNode  =  c.getFirstChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  true);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  Node  aNode  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  aNode  =  c.getLastChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  false);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
78	[BUG]  [BUGGY]  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getNext(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext(),  output);	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  c.getLastChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getLastChild(),  output,  true);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  true);	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
80	[BUG]  [BUGGY]  c.removeFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.removeFirstChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.removeFirstChild(),  output);	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
81	[BUG]  [BUGGY]  c.getLastChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getLastChild(),  output,  false);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  false);	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
82	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  n.getLastChild();	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
86	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
88	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
89	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
90	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
91	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
92	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
93	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
94	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
95	[BUG]  [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
96	[BUG]  [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
97	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >=  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >=  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  >=  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
99	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
100	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "var "));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "var "));  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "var "));	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
101	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output);	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
102	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "__ "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "__ "));  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "__ "));	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
103	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "varargs "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "varargs "));  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "varargs "));	  c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
104	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
106	[BUG]  [BUGGY]  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
107	[BUG]  [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
108	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);    [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]    c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
