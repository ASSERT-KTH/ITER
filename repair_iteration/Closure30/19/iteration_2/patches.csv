bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
2	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
3	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
4	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
5	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getFirstChild();  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getFirstChild();  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
6	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFirstChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getFirstChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getFirstChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
7	[BUG]  [BUGGY]  Node  aNode  =  c.getLastChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  c.getLastChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getLastChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
8	[BUG]  [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getFirstChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
9	[BUG]  [BUGGY]  Node  aNode  =  c.getLastChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  c.getLastChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getLastChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
10	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getLastChild();  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getLastChild();  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
11	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
12	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
13	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
14	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    c    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  [Delete]  c  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  [Delete]  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  [Delete]  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    c    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    Conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    Conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    Conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  c.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  cfgNode,  output,  true);	  c.getLastChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
20	[BUG]  [BUGGY]  c.getFirstChild(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getFirstChild(),  output,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getFirstChild(),  output,  true);	  c.getLastChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
21	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  c.getLastChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
22	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  c.getLastChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
23	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  c.getLastChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
24	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  c.getLastChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
25	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
26	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(c))  {  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(c))  {  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(c))  {  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
27	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
28	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
29	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
30	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isFunctionDeclaration(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isFunctionDeclaration(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
31	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
32	[BUG]  [BUGGY]  Node  c  =  c.getParent();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getParent();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getParent();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
33	[BUG]  [BUGGY]  Node  c  =  c.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getCurrentNode();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getCurrentNode();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
34	[BUG]  [BUGGY]  Node  c  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  n.getNext();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  n.getNext();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
35	[BUG]  [BUGGY]  Node  c  =  c.next();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.next();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.next();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
36	[BUG]  [BUGGY]  Node  c  =  cfgNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  cfgNode.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  cfgNode.getFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
37	[BUG]  [BUGGY]  Node  c  =  cfgNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  cfgNode.getLastChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  cfgNode.getLastChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
38	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
39	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
40	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
41	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
43	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFirstChild();  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getFirstChild();  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getFirstChild();  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
45	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getLastChild();  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getLastChild();  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
47	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
48	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
49	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
50	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
51	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
52	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
53	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
54	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
55	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
56	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
57	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
58	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  null  :  cfgNode,  n.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
59	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  output,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  n,  cfgNode,  output,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  c,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  c,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  n,  c,  output,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  conditional,  output);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  conditional,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  conditional,  output);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  n,  output,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  resultMap,  conditional);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  resultMap,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  resultMap,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
66	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  cfgNode,  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
67	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode.getChildCount(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  cfgNode.getChildCount(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
68	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  cfgNode,  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
69	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  cfgNode,  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
70	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getChildCount(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getChildCount(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getChildCount(),  cfgNode,  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
71	[BUG]  [BUGGY]  c.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  cfgNode,  output,  conditional);	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
72	[BUG]  [BUGGY]  c.getFirstChild(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getFirstChild(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getFirstChild(),  cfgNode,  output);	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
73	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
74	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
75	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
76	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
77	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
78	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
79	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
80	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  false);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  true);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  n.getFirstChild();	  Node    aNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
84	[BUG]  [BUGGY]  Node  aNode  =  c.getAncestor(1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  c.getAncestor(1);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getAncestor(1);	  Node    aNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
85	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "vararg "));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "vararg "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "vararg "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
86	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "varargs "));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "varargs "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "varargs "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
87	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().equals( "varargs "));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().equals( "varargs "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().equals( "varargs "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
88	[BUG]  [BUGGY]  c.getType()!=  Token.VAR  &&  c.getLastChild().getString().equals( "varargs "));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()!=  Token.VAR  &&  c.getLastChild().getString().equals( "varargs "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()!=  Token.VAR  &&  c.getLastChild().getString().equals( "varargs "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
89	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().contains( "varargs "));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().contains( "varargs "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().contains( "varargs "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
90	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  n.getLastChild().getString().equals( "varargs "));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  n.getLastChild().getString().equals( "varargs "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  n.getLastChild().getString().equals( "varargs "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
91	[BUG]  [BUGGY]  Node  escaped  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  escaped  =  c.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  escaped  =  c.getFirstChild();	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
92	[BUG]  [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(n,  cfgNode,  output,  conditional);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
93	[BUG]  [BUGGY]  AssertionFailedError.make(c,  n,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c,  n,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c,  n,  output,  conditional);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
94	[BUG]  [BUGGY]  AssertionFailedError.make(c,  n,  conditional);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c,  n,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c,  n,  conditional);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
95	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()!=    c    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
96	[BUG]  [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
97	[BUG]  [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
98	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  computeMustDef(c,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getFirstChild();  computeMustDef(c,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getFirstChild();  computeMustDef(c,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
99	[BUG]  [BUGGY]  Node  cfgNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
100	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
101	[BUG]  [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  false);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
102	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  cfgNode.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  cfgNode.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  cfgNode.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cFgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
103	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cFgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cFgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cFgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cFgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
104	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cFgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cFgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cFgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cFgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
105	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cFgNode,  cfgNode.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cFgNode,  cfgNode.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cFgNode,  cfgNode.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cFgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
106	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cFgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
107	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
108	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
109	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
110	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  cfgNode);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  cfgNode);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  cfgNode);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
111	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "_ "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "_ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "_ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
112	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().endsWith( "__ "));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().endsWith( "__ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
113	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().startsWith( "__ "));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().startsWith( "__ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().startsWith( "__ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
114	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "__ "));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "__ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "__ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
115	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().endsWith( "__ "));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().endsWith( "__ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().endsWith( "__ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
116	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( ".__ "));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( ".__ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( ".__ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
117	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  n,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  n,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  n,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
118	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
119	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
120	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
121	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getLastChild(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
122	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
123	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
124	[BUG]  [BUGGY]  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
125	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
126	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  ==  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  ==  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  ==  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    ==    c    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
127	[BUG]  [BUGGY]  Node  cfgNode  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getNext();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getNext();	  Node    cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
128	[BUG]  [BUGGY]  Node  cfgNode  =  c.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getParent();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getParent();	  Node    cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
129	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    ==    c    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
130	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  c  >>  c  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  c  >>  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  ==  c  >>  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    ==    c    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
131	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  n.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
132	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
133	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  n.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
134	[BUG]  [BUGGY]  c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);	  c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
135	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);	  c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
136	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
137	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);	  c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
138	[BUG]  [BUGGY]  c.getString(),  output?  null  :  cfgNode,  c.getNext(),  conditional);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  output?  null  :  cfgNode,  c.getNext(),  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  output?  null  :  cfgNode,  c.getNext(),  conditional);	  c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
139	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
140	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
141	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getLastChild(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
142	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(c.get  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(c.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(c.get	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
143	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  c.get  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  c.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  c.get	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
144	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get!=  c.get  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get!=  c.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get!=  c.get	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
145	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  c  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
146	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  aughtExceptionHandler.handleMissingName(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
147	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output);	  aughtExceptionHandler.handleMissingName(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
148	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);	  aughtExceptionHandler.handleMissingName(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
149	[BUG]  [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
150	[BUG]  [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
151	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
152	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getLastChild(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
153	[BUG]  [BUGGY]  AssertionFailedError.make(c,  aNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c,  aNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c,  aNode,  output,  conditional);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
154	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.get  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.get	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    c    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
155	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  n,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  n,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  n,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
156	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
157	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    n,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
158	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingException( " ");	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
159	[BUG]  [BUGGY]  AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
160	[BUG]  [BUGGY]  AssertionFailedError.make(c,  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c,  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c,  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
161	[BUG]  [BUGGY]  AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output));	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
162	[BUG]  [BUGGY]  Constructor  <  Node>  c  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  c  =  c.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Constructor  <  Node>  c  =  c.getFirstChild();	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
163	[BUG]  [BUGGY]  Constructor  <  Node>  c  =  c.getConstructor();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  c  =  c.getConstructor();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Constructor  <  Node>  c  =  c.getConstructor();	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
164	[BUG]  [BUGGY]  c.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  cfgNode,  output,  false);	  c.getLastChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
165	[BUG]  [BUGGY]  c.getFirstChild(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getFirstChild(),  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getFirstChild(),  output,  false);	  c.getLastChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
166	[BUG]  [BUGGY]  c.getLastChild(),  cfgNode,  false);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  cfgNode,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  cfgNode,  false);	  c.getLastChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
167	[BUG]  [BUGGY]  c.getLastChild(),  cfgNode,  true);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  cfgNode,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  cfgNode,  true);	  c.getLastChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
168	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
169	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
170	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
171	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
172	[BUG]  [BUGGY]  c  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c  =  c.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c  =  c.getFirstChild();	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeM    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
173	[BUG]  [BUGGY]  AssertionFailedError.make(c,  escaped,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c,  escaped,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c,  escaped,  output,  conditional);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeM    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
174	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR?  c.getFirstChild()  :  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR?  c.getFirstChild()  :  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR?  c.getFirstChild()  :  cfgNode,  output);	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
175	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild()  :  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild()  :  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild()  :  cfgNode,  output);	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
176	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output,  conditional);	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
177	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  :  c.getLastChild(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  :  c.getLastChild(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  :  c.getLastChild(),  cfgNode,  output);	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
178	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR?  c.getNext()  :  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR?  c.getNext()  :  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR?  c.getNext()  :  cfgNode,  output);	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
179	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
180	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange()	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
181	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
182	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
183	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getParent(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getParent(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getParent(),    output);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
184	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getType(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getParent(),    output);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
185	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getName(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getName(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getName(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getParent(),    output);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
186	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "name "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "name "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "name "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "var   "));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
187	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "var   "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "var   "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "var   "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "var   "));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
188	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "string "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "string "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "string "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "var   "));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
189	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().equals( "var "));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().equals( "var "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  ||  c.getLastChild().getString().equals( "var "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "var   "));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
190	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
191	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
192	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
193	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
194	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getFirstChild(),  output,  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
195	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >=    c    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
196	[BUG]  [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
197	[BUG]  [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
198	[BUG]  [BUGGY]  ||  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
199	[BUG]  [BUGGY]  ||(c.hasChildren()  &&  conditional))  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||(c.hasChildren()  &&  conditional))  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||(c.hasChildren()  &&  conditional))  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
200	[BUG]  [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastCh	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
201	[BUG]  [BUGGY]  ||(c.hasChildren()  &&  conditional))  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||(c.hasChildren()  &&  conditional))  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||(c.hasChildren()  &&  conditional))  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
202	[BUG]  [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
203	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
204	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
205	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
206	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  >=  c  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  >=  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  >=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
207	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  ==  c  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  ==  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  ==  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
208	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil!=  c  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil!=  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil!=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
209	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  >>  c  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  >>  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  >>  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
210	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [Delete]  c  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [Delete]  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [Delete]  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
211	[BUG]  [BUGGY]  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getFirstChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getFirstChild(),  output,  conditional);	  c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
212	[BUG]  [BUGGY]  c.getSecondChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getSecondChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getSecondChild(),  output);	  c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  ||  c.hasChildren());  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  ||  c.hasChildren());	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren(),  output);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  c.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  conditional);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren(),  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren(),  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren(),  conditional);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
219	[BUG]  [BUGGY]  Node  escaped  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  escaped  =  n.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  escaped  =  n.getFirstChild();	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
220	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    Conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
221	[BUG]  [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
222	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
223	[BUG]  [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
224	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
225	[BUG]  [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  conditional);	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(n));	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
227	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  computeMustDef(c,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getLastChild();  computeMustDef(c,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getLastChild();  computeMustDef(c,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getLastChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
228	[BUG]  [BUGGY]  Node  cfgNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getLastChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
229	[BUG]  [BUGGY]  Node  cfgNode  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  n.getNext();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  n.getNext();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
230	[BUG]  [BUGGY]  c.removeFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.removeFirstChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.removeFirstChild(),  output,  conditional);	  c.removeFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
231	[BUG]  [BUGGY]  c.removeFirstChild(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.removeFirstChild(),  cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.removeFirstChild(),  cfgNode);	  c.removeFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
232	[BUG]  [BUGGY]  c.removeLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.removeLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.removeLastChild(),  output);	  c.removeFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
233	[BUG]  [BUGGY]  c.removeChild(cfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.removeChild(cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.removeChild(cfgNode);	  c.removeFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
234	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
235	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
236	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
237	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
238	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
239	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getFirstChild(),  cfgNode,  output,  true);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
240	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
241	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  else  {  compiler.reportCodeChange();  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
242	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(c.getLastChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(c.getLastChild()	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >>    c    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
243	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
244	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
245	[BUG]  [BUGGY]  AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
246	[BUG]  [BUGGY]  AssertionFailedError.make(c,  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c,  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c,  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
247	[BUG]  [BUGGY]  AssertionFailedError.make(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
248	[BUG]  [BUGGY]  AssertionFailedError.make(c,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  output));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(c,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  output));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError.make(c,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  output));	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
249	[BUG]  [BUGGY]  Context.checkState(c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(c.hasChildren());  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Context.checkState(c.hasChildren());	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
250	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
251	[BUG]  [BUGGY]  c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  true  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
252	[BUG]  [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >=    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
253	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  >=  c  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  >=  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  >=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
254	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()!=  c  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()!=  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()!=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
255	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  >>  c  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  >>  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  >>  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
256	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  ==  c  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  ==  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  ==  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
257	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [Delete]  c  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [Delete]  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [Delete]  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
258	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  c.getLastChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
259	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  compiler.reportCodeChange();  }	  c.getLastChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
260	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  c.getLastChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
261	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
262	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
263	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
264	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
265	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
266	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
267	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
268	[BUG]  [BUGGY]  c.getParent()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getParent()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getParent()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  c.getNext()    :    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
269	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getNext(),  output);	  c.getNext()    :    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
270	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);	  c.getNext()    :    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
271	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    ==    c    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
272	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  c  >>  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  c  >>  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  ==  c  >>  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    ==    c    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
273	[BUG]  [BUGGY]  Node  aNode  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getLastChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  n.getLastChild();	  Node    aNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
274	[BUG]  [BUGGY]  Node  aNode  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  c.getNext();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getNext();	  Node    aNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
275	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getChildCount(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
276	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  n,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  output);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  this,  output);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  output);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  output);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  conditional);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  this,  conditional);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  null);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  null);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  null);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  this);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  this);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  this);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  conditional);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  conditional);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
284	[BUG]  [BUGGY]  c  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c  =  n.getLastChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c  =  n.getLastChild();	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
285	[BUG]  [BUGGY]  c  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c  =  c.getNext();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c  =  c.getNext();	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
286	[BUG]  [BUGGY]  c  =  c.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c  =  c.getLastChild()  +  1;  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c  =  c.getLastChild()  +  1;	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
287	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  }	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
288	[BUG]  [BUGGY]  c.getChildCount(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getChildCount(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getChildCount(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
289	[BUG]  [BUGGY]  c.getNext(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext(),  output,  conditional);	  c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
290	[BUG]  [BUGGY]  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getParent(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getParent(),  output);	  c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
291	[BUG]  [BUGGY]  c.getNext(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext(),  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext(),  output,  false);	  c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
292	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
293	[BUG]  [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(c.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getFirstChild(),  cfgNode,  output,  false);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
294	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
295	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
296	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  >=  c  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  >=  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  >=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
297	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil!=  c  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil!=  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil!=  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
298	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  >>  c  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  >>  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  >>  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
299	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  ==  c  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  ==  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  ==  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
300	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [Delete]  c  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [Delete]  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [Delete]  c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
301	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  false  :  cfgNode,  c.getNext(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
302	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
303	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
304	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
305	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
306	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
307	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
309	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
310	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
311	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
312	[BUG]  [BUGGY]  c.setChildCount(c.getChildCount(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.setChildCount(c.getChildCount(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.setChildCount(c.getChildCount(),  conditional?  false  :  cfgNode,  c.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  output,  false);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  output,  false);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  output,  true);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  output,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  output,  true);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  input,  conditional);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  input,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  n,  input,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
321	[BUG]  [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
322	[BUG]  [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
323	[BUG]  [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
324	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
325	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
326	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChil  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChil  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >=    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren();)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren();)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren();)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren();)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren();)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren();)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange();	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
333	[BUG]  [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
334	[BUG]  [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
335	[BUG]  [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
336	[BUG]  [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  }	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(n)||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(n)||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(n)||  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
338	[BUG]  [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isName(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
339	[BUG]  [BUGGY]  AssertionFailedError  t  =  compiler.getInvocationTree();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError  t  =  compiler.getInvocationTree();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError  t  =  compiler.getInvocationTree();	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
340	[BUG]  [BUGGY]  AssertionFailedError  t  =  compiler.getJsErrorReporter();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError  t  =  compiler.getJsErrorReporter();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	AssertionFailedError  t  =  compiler.getJsErrorReporter();	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
341	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  false);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  false);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
342	[BUG]  [BUGGY]  Node  cFgNode  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cFgNode  =  c.getLastChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cFgNode  =  c.getLastChild();	  Node    cfgNode    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
343	[BUG]  [BUGGY]  Node  cfgNode  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getfirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getfirstChild();	  Node    cfgNode    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
344	[BUG]  [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >=    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
345	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstCh  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstCh  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstCh	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >=    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
346	[BUG]  [BUGGY]  c.getNext(),  output,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext(),  output,  true);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext(),  output,  true);	  c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
347	[BUG]  [BUGGY]  Node  cFgNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cFgNode  =  c.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cFgNode  =  c.getFirstChild();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
348	[BUG]  [BUGGY]  Node  cfnNode  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfnNode  =  c.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfnNode  =  c.getFirstChild();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
349	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeM  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeM  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeM	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
350	[BUG]  [BUGGY]  Node  c  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getfirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getfirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
351	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()!=  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()!=  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.getType()  ==  Token.VAR  &&  c.getLastChild()!=  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
352	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
353	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()!=  cfgNode,  output)  {  c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()!=  cfgNode,  output)  {  c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.getType()  ==  Token.VAR  &&  c.getLastChild()!=  cfgNode,  output)  {  c.getType()  ==  Token.VAR?  c.getLastChild()  :  cfgNode,  output);  }	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
354	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
355	[BUG]  [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  toDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	toDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getChildCount(),  output);	  toDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(c));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(c));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  NodeUtil.isAssignmentOp(c));	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  NodeUtil.mayHaveSideEffects(c));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  NodeUtil.mayHaveSideEffects(c));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  NodeUtil.mayHaveSideEffects(c));	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  output!=  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  output!=  null);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  output!=  null);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
359	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
360	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
361	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
362	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    ==    c    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
363	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  aughtExceptionHandler.handleMissingName(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
364	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);	  aughtExceptionHandler.handleMissingName(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
365	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
366	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMustBeFunction(n,  output);	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
367	[BUG]  [BUGGY]  Node  c  =  c.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getPreviousChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getPreviousChild();	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
368	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
369	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  cfgNode?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  cfgNode?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  cfgNode?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
370	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getLastChild(),  conditional);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getLastChild(),  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getLastChild(),  conditional);  }	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
371	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
372	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(conditional);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeM    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
374	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getLastChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
375	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n))  {  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n))  {  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
376	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(c)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
377	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(c))  {  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(c))  {  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(c))  {  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
378	[BUG]  [BUGGY]  NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isAssignmentOp(n)&&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString()	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
379	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
380	[BUG]  [BUGGY]  Node  escaped  =  cfgNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  escaped  =  cfgNode.getFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  escaped  =  cfgNode.getFirstChild();	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
381	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
382	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMustBeFunction(n,  cfgNode,  output,  conditional);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
383	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getLastChild(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
384	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    Conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
385	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  conditional,  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  conditional,  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  conditional,  cfgNode,  c.getFirstChild(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    Conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
386	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMus  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMus  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMus	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
387	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMust  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMust  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMust	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
388	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  out,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  out,  this);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  out,  this);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  resultMap);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  resultMap);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  resultMap);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
391	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getNext(),  output);	  c.getNext()    :    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  c.getFirstChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
396	[BUG]  [BUGGY]  Compiler  compiler  =  c.getCompiler();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Compiler  compiler  =  c.getCompiler();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Compiler  compiler  =  c.getCompiler();	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
397	[BUG]  [BUGGY]  Compiler  compiler  =  n.getCompiler();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Compiler  compiler  =  n.getCompiler();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Compiler  compiler  =  n.getCompiler();	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
398	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "varar "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "varar "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "varar "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "var   "));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
400	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
401	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  n.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
402	[BUG]  [BUGGY]  Node  cfgNode  =  c.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.getPreviousChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.getPreviousChild();	  Node    cfgNode    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
403	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
404	[BUG]  [BUGGY]  c.getNext(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext(),  conditional?  false  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext(),  conditional?  false  :  cfgNode,  c.getNext(),  output);	  addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
405	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
406	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().endsWith( ".__ "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().endsWith( ".__ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().endsWith( ".__ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
407	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
408	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  n.getChildCount(),  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
409	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  conditional  &&  false  :  cfgNode,  c.getFirstChild(),  output);	  escaped.addToDefIfLocal(c.getString(),    conditional?    false    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
410	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
411	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  }	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
412	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
413	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cFgNode,  c.getFirstChild(),  output);  }	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
414	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "vararg "));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "vararg "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getFirstChild().getString().equals( "vararg "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
415	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getfirstChild().getString().equals( "varargs "));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getfirstChild().getString().equals( "varargs "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getfirstChild().getString().equals( "varargs "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
416	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getString().equals( "varargs "));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getString().equals( "varargs "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getString().equals( "varargs "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren());  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren());  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren());  c.getLastChild(),  output);	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
418	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n,  cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(n,  cfgNode);	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
419	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output);  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
420	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getLastChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getLastChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getLastChild(),  cfgNode,  output);  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
421	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
422	[BUG]  [BUGGY]  Node  c  =  c.getChildren();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getChildren();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getChildren();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
423	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
424	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
425	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChil  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChil  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChil	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
426	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.get	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
427	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
428	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild()  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild()	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
429	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
430	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMustBeString(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
431	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild(),  conditional);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild(),  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  c.getFirstChild(),  conditional);  }	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
432	[BUG]  [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  cfgNode?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  addToDefIfLocal(c.getString(),  cfgNode?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  addToDefIfLocal(c.getString(),  cfgNode?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
433	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
434	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
435	[BUG]  [BUGGY]  escaped.addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  n.getLastChild(),  conditional);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  n.getLastChild(),  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	escaped.addToDefIfLocal(c.getString(),  output?  null  :  cfgNode,  n.getLastChild(),  conditional);	  escaped.addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getLastChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
436	[BUG]  [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
437	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getFirstChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  n.getFirstChild();  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
438	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
439	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
440	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
441	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren()  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren()  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
443	[BUG]  [BUGGY]  c.hasChildren(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.hasChildren(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.hasChildren(),  output);	  c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
444	[BUG]  [BUGGY]  c.removeChild(c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.removeChild(c);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.removeChild(c);	  c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
445	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChil  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChil  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChil	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
446	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getfirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
447	[BUG]  [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent!=  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
448	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  }	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
449	[BUG]  [BUGGY]  Node  aNode  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  c.getfirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  c.getfirstChild();	  Node    aNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
450	[BUG]  [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }	  Node    aNode    =    c.getLastChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
451	[BUG]  [BUGGY]  Node  aNode  =  n.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  n.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getLastChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
452	[BUG]  [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild()	  Node    aNode    =    c.getLastChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
453	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
454	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getParent(),  output);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getParent(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  true  :  cfgNode,  c.getParent(),  output);	  addToDefIfLocal(c.getString(),    conditional?    true    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
455	[BUG]  [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
456	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeUtil.isFunctionDeclaration(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeUtil.isFunctionDeclaration(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
457	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "._ "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "._ "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().endsWith( "._ "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().endsWith(   "__   "));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
458	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
459	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
460	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
461	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
462	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
463	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
464	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n))  {  if(c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    computeMustDef(c.getFirstChild(),    cfgNode,    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
465	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
466	[BUG]  [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    ==    c    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
467	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >=  c.  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >=  c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >=  c.	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeM    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
468	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >>  c.  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >>  c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >>  c.	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeM    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
469	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >>  c  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >>  c  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeM  >>  c	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeM    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
470	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  out);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  out);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  this,  out);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
471	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
472	[BUG]  [BUGGY]  if(NodeUtil.isName(c))  {  if(n.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isName(c))  {  if(n.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isName(c))  {  if(n.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
473	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(c))  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
474	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
475	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(NodeUtil.isAssignmentOp(n)&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild()	  if(NodeUtil.isAssignmentOp(n))    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
476	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
477	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
478	[BUG]  [BUGGY]  cast(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  cast(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	cast(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
479	[BUG]  [BUGGY]  cast(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  cast(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	cast(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
480	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
481	[BUG]  [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
482	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
483	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(c.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
484	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true,  conditional);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  true,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  true,  conditional);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
485	[BUG]  [BUGGY]  Node  cfgNode  =  c.nextChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.nextChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.nextChild();	  Node    cfgNode    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
486	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild()	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
487	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.getType()  ==  Token.VAR  &&  c.getLastChild()  <  cfgNode)  {  c.getLastChild()  :  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild	  c.getType()    ==    Token.VAR?    c.getLastChild()    :    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
488	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  c.getNext()    :    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
489	[BUG]  [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext()  :  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  c.getNext()    :    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
490	[BUG]  [BUGGY]  aughtExceptionHandler(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
491	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
492	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingDependency(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
493	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMustBeFunction(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
494	[BUG]  [BUGGY]  Node  c  =  cfgNode.getNext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  cfgNode.getNext();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  cfgNode.getNext();	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
495	[BUG]  [BUGGY]  Node  c  =  c.getAncestor(2);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getAncestor(2);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getAncestor(2);	  Node    c    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
496	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  return;  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  return;  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
497	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
498	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  cfgNode,  output);  }  else  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);  }	  c.getLastChild(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
499	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output;  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output;  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getFirstChild(),  output;  }  else  {  compiler.reportCodeChange();  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
500	[BUG]  [BUGGY]  parent.replaceChild(n,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent.replaceChild(n,  cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent.replaceChild(n,  cfgNode);	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
501	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  compiler);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional,  compiler);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
502	[BUG]  [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional  +  1);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	computeMustDef(c.getLastChild(),  cfgNode,  output,  conditional  +  1);	  computeMustDef(c.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
503	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
504	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
505	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
506	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  Conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
507	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingName(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);	  aughtExceptionHandler.handleMissingName(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
508	[BUG]  [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  }	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
509	[BUG]  [BUGGY]  if(conditional)  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode.getLastChild(),  cfgNode,  output,  conditional);  }	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
510	[BUG]  [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
511	[BUG]  [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  Node  aNode  =  c.getFirstChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild()	  Node    aNode    =    c.getFirstChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
512	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil!=  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil!=  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil!=  	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
513	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  ==  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  ==  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChil  ==	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
514	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
515	[BUG]  [BUGGY]  c.getLastChild(),  output,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output,  null);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  null);	  c.getLastChild(),    output,    true);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
516	[BUG]  [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChild	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
517	[BUG]  [BUGGY]  &&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
518	[BUG]  [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLas  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLas  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLas	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
519	[BUG]  [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getLastChil	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(n.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
520	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getChildCount(),  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getChildCount(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  n,  cfgNode.getChildCount(),  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    n.getChildCount(),    output);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
521	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
522	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
523	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
524	[BUG]  [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&  conditional)  {  addToDefIfLocal(n.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(n.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.getType()  ==  Token.VAR);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren(), "Unknown  statement ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren(), "Unknown  statement ");  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren(), "Unknown  statement ");	  Preconditions.checkState(c.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
528	[BUG]  [BUGGY]  c.getLastChild(),  output,  conditional,  computeMustDef(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output,  conditional,  computeMustDef(n.getFirstChild());  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  conditional,  computeMustDef(n.getFirstChild());	  c.getLastChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
529	[BUG]  [BUGGY]  c.getLastChild(),  output,  conditional,  computeMustDef(n.getString(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output,  conditional,  computeMustDef(n.getString(),  cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  conditional,  computeMustDef(n.getString(),  cfgNode);	  c.getLastChild(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
530	[BUG]  [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLastChild	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >=    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
531	[BUG]  [BUGGY]  &&  conditional  &&  c.getFirstChild()!=  null)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional  &&  c.getFirstChild()!=  null)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional  &&  c.getFirstChild()!=  null)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >=    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
532	[BUG]  [BUGGY]  &&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >=    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
533	[BUG]  [BUGGY]  &&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  conditional  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild()    >=    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
534	[BUG]  [BUGGY]  Node  c  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.removeFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.removeFirstChild();	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
535	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
536	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
537	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild();  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild();  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild();  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
538	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
539	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  null;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
540	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output,  conditional);  }	  if(c.hasChildren())    {    computeMustDef(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
541	[BUG]  [BUGGY]  Node  cfgNode  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  cfgNode  =  c.removeFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  cfgNode  =  c.removeFirstChild();	  Node    cfgNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
542	[BUG]  [BUGGY]  c  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c  =  c.removeFirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c  =  c.removeFirstChild();	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
543	[BUG]  [BUGGY]  c  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c  =  c.getfirstChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c  =  c.getfirstChild();	  c    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
544	[BUG]  [BUGGY]  c.getNext(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext(),  cfgNode,  output);	  c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
545	[BUG]  [BUGGY]  c.getNext(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getNext(),  cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getNext(),  cfgNode);	  c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
546	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  cfgNode.getLastChild();  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  aNode  =  cfgNode.getLastChild();	  Node    aNode    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
547	[BUG]  [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLas  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  &&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLas  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	&&  c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.getLas	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.getLastChild    >>    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
548	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler.handleMissingClass(c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output);	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
549	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getParent(),  output);  }	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
550	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
551	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
552	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild();  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild();  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild();  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
553	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
554	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
555	[BUG]  [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  c.getLastChild(),  null;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  c.getLastChild(),  null;  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(c.hasChildren())    {    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
556	[BUG]  [BUGGY]  c.getLastChild(),  output,  false,  computeMustDef(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output,  false,  computeMustDef(n.getFirstChild());  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  false,  computeMustDef(n.getFirstChild());	  c.getLastChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
557	[BUG]  [BUGGY]  c.getLastChild(),  output,  false,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output,  false,  cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  false,  cfgNode);	  c.getLastChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
558	[BUG]  [BUGGY]  c.getLastChild(),  output,  false,  computeMustDef(n.getFirstChild(),  cfgNode,  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getLastChild(),  output,  false,  computeMustDef(n.getFirstChild(),  cfgNode,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getLastChild(),  output,  false,  computeMustDef(n.getFirstChild(),  cfgNode,  output);	  c.getLastChild(),    output,    false);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
559	[BUG]  [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getString(),  conditional?  null  :  cfgNode,  c.getNext(),  output,  conditional);	  c.getString(),    conditional?    null    :    cfgNode,    c.getNext(),    output);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
560	[BUG]  [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
561	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  illegal  start  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  illegal  start  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  illegal  start	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
562	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  illegal  start  of  expression  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(c.get  >=  illegal  start  of  expression	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    computeMustDef(c.get    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(c.hasChildren();)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(c.hasChildren();)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Preconditions.checkState(c.hasChildren();)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  Preconditions.checkState(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
564	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  c  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	Node  c  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);	  Node    aNode    =    c.getLastChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
565	[BUG]  [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  Node  aNode  =  c.getLastChild();  computeMustDef(aNode,  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild	  Node    aNode    =    c.getLastChild();    computeMustDef(aNode,    cfgNode,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
566	[BUG]  [BUGGY]  c.getType()!=  Token.VAR  &&  c.getLastChild().getString().equals( "var "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()!=  Token.VAR  &&  c.getLastChild().getString().equals( "var "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()!=  Token.VAR  &&  c.getLastChild().getString().equals( "var "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "var   "));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
567	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "call "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "call "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( "call "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "var   "));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
568	[BUG]  [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( ".prototype. "));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( ".prototype. "));  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.getType()  ==  Token.VAR  &&  c.getLastChild().getString().equals( ".prototype. "));	  c.getType()    ==    Token.VAR    &&    c.getLastChild().getString().equals(   "varargs   "));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
569	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  }  else  {  computeMustDef(n.getLastChild  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  output,  conditional);  }  else  {  computeMustDef(n.getLastChild	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
570	[BUG]  [BUGGY]  n.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	n.getLastChild(),  output);	  c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
571	[BUG]  [BUGGY]  n.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	n.getFirstChild(),  output);	  c.getFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
572	[BUG]  [BUGGY]  aughtExceptionHandler(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	aughtExceptionHandler(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);	  if(conditional)    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
573	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  escaped,  conditional);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  escaped,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  escaped,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
574	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  this,  output,  conditional);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
575	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  null,  output);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  NodeTraversal.traverse(compiler,  c,  null,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	NodeTraversal.traverse(compiler,  c,  null,  output);	  NodeTraversal.traverse(compiler,    c,    output,    conditional);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
576	[BUG]  [BUGGY]  parent  ==  null  &&!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
577	[BUG]  [BUGGY]  parent  ==  null  &&!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  parent  ==  null  &&!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	parent  ==  null  &&!conditional)  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
578	[BUG]  [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(!conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }	  if(!conditional)    {    if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
579	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  compiler.reportCodeChange	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getFirstChild(),    output);    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
580	[BUG]  [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  computeMustDef(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
581	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getFirstChild(),  output);  }  else  {  computeMustDef(n.getFirstChild()	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
582	[BUG]  [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(conditional)  {  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getLastChild(),  output);  }  else  {  computeMustDef(n.	  if(c.hasChildren())    {    addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getLastChild(),    output);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
583	[BUG]  [BUGGY]  c.replaceChild(n,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  c.replaceChild(n,  cfgNode);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	c.replaceChild(n,  cfgNode);	  c.removeFirstChild(),    output);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
584	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output,  conditional);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output,  conditional);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output,  conditional);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
585	[BUG]  [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	if(c.hasChildren())  {  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  cfgNode,  output);  }  else  {  computeMustDef(n.getLastChild()	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
586	[BUG]  [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  n,  output);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  if  (c.hasChildren())  {  computeMustDef(c.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  n,  output);  [BUGGY]      c.getFirstChild(),  output);  }  }  return;  default:  if  (NodeUtil.isAssignmentOp(n))  {  if  (n.getFirstChild().isName())  {  Node  name  =  n.getFirstChild();  computeMustDef(name.getNext(),  cfgNode,  output,  conditional);  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2553769592276246	272	273	3	replace	addToDefIfLocal(c.getString(),  conditional?  null  :  cfgNode,  c.getChildCount(),  n,  output);	  addToDefIfLocal(c.getString(),    conditional?    null    :    cfgNode,    c.getChildCount(),    cfgNode,    output);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
