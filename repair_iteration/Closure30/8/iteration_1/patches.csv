bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(lhs,  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  compiler.getCompiler(cfgNode);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
14	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n,  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  Conditional.checkNotNull(cfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Conditional.checkNotNull(cfgNode);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(cfgNode);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);	  computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);	  computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);	  computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  rhs  =  n.getFirstChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  rhs  =  n.getLastChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getLastChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  Node  rhs  =  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  rhs  =  lhs.getLastChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getLastChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
35	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  cfgNode  =  n.getFirstChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  n.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  Node  cfgNode  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  cfgNode  =  lhs.getFirstChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  lhs.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  conditional);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
41	[BUG]  [BUGGY]  Node  escaped  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  escaped  =  n.getFirstChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  n.getFirstChild();	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
42	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
46	[BUG]  [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getCompiler();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Compiler  compiler  =  cfgNode.getCompiler();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getCompiler();	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
52	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
53	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
58	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
59	[BUG]  [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
60	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
61	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
62	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
63	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
64	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
65	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Preconditions.checkState(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
67	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
68	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getFirstChild();	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
69	[BUG]  [BUGGY]  cfgNode  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  cfgNode  =  lhs.getFirstChild();  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	cfgNode  =  lhs.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
70	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  conditional);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
71	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
72	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
73	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
75	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
76	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:    [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]    computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
