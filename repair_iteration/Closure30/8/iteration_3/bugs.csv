bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode,  n,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(cfgNode,  n,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(cfgNode,  n,  conditional);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
2	[BUG]  [BUGGY]  AssertionFailedError.make(n,  cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n,  cfgNode,  rhs,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n,  cfgNode,  rhs,  output,  conditional);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
3	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode,  n,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(cfgNode,  n,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(cfgNode,  n,  output,  conditional);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
4	[BUG]  [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n,  cfgNode,  output,  true);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
5	[BUG]  [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n,  cfgNode,  output,  false);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
6	[BUG]  [BUGGY]  AssertionFailedError.make(n,  conditional,  cfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n,  conditional,  cfgNode);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n,  conditional,  cfgNode);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
7	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
8	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
9	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(lhs,  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
10	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
11	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
12	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
13	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
14	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
15	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
16	[BUG]  [BUGGY]  allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
17	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
18	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  return;	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
19	[BUG]  [BUGGY]  AssertionFailedError.make(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(lhs.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
20	[BUG]  [BUGGY]  AssertionFailedError.make(lhs.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(lhs.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(lhs.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
21	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
22	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
23	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
24	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
25	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
26	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
27	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
28	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
29	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
30	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  null);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  null);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
31	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
35	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
36	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  Compiler  compiler  =  n.getCompiler();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  n.getCompiler();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  n.getCompiler();	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
38	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getProp(Node.SOURCENAME_PROP);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNode.getProp(Node.SOURCENAME_PROP);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getProp(Node.SOURCENAME_PROP);	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
39	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getRawCompiler();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNode.getRawCompiler();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getRawCompiler();	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
40	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getCompilerConstructor();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNode.getCompilerConstructor();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getCompilerConstructor();	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
41	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getCompiler(n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNode.getCompiler(n);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getCompiler(n);	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
42	[BUG]  [BUGGY]  Compiler  compiler  =  lhs.getCompiler();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  lhs.getCompiler();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  lhs.getCompiler();	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
43	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
44	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
45	[BUG]  [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
46	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
47	[BUG]  [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
48	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
49	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  true);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
50	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
51	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
52	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
53	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild();  computeMustDef(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  n.getFirstChild();  computeMustDef(cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  n.getFirstChild();  computeMustDef(cfgNode,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
54	[BUG]  [BUGGY]  Node  rhs  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  node.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  node.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
55	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  cfgNode.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
56	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getFirstChild().getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getFirstChild().getNext();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
57	[BUG]  [BUGGY]  Node  rhs  =  n.getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getNext();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
58	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
59	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
60	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
61	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  true);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
63	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
64	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false,  conditional);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
65	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getLastChild();	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
66	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getFirstChild().getNext();	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
67	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getProp(Node.SOURCENAME_PROP);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getProp(Node.SOURCENAME_PROP);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getProp(Node.SOURCENAME_PROP);	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
68	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getNext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getNext();	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
69	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().cloneTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().cloneTree();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getFirstChild().cloneTree();	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
70	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getCurrentNode();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getCurrentNode();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getCurrentNode();	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
71	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  compiler.getCompiler();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  compiler.getCompiler();	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
72	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode.getLastChild(),  n,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(cfgNode.getLastChild(),  n,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(cfgNode.getLastChild(),  n,  output,  conditional);	  AssertionFailedError.make(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
73	[BUG]  [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  true);	  AssertionFailedError.make(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
74	[BUG]  [BUGGY]  AssertionFailedError.make(t,  n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(t,  n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(t,  n.getLastChild(),  cfgNode,  output,  conditional);	  AssertionFailedError.make(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
75	[BUG]  [BUGGY]  Node  rhs  =  node.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  node.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  node.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
76	[BUG]  [BUGGY]  Node  lhs  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  lhs  =  n.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  lhs  =  n.getFirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
77	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getfirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getfirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
78	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
79	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
80	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
81	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
82	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
83	[BUG]  [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
84	[BUG]  [BUGGY]  ||  lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
85	[BUG]  [BUGGY]  ||  lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
86	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cf  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cf  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cf	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
87	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
88	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
89	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cf  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cf  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cf	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
90	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Preconditions.checkState(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  Preconditions.checkState(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(conditional  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Preconditions.checkState(conditional  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(conditional  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  Preconditions.checkState(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Preconditions.checkState(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  Preconditions.checkState(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Preconditions.checkState(conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(conditional);	  Preconditions.checkState(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
95	[BUG]  [BUGGY]  Node  lhs  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  lhs  =  n.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  lhs  =  n.getLastChild();	  Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
96	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
97	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
98	[BUG]  [BUGGY]  cfgNode  =  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  cfgNode  =  lhs.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	cfgNode  =  lhs.getLastChild();	  cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
99	[BUG]  [BUGGY]  cfgNode  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  cfgNode  =  n.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	cfgNode  =  n.getFirstChild();	  cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
100	[BUG]  [BUGGY]  cfgNode  =  rhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  cfgNode  =  rhs.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	cfgNode  =  rhs.getFirstChild();	  cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
101	[BUG]  [BUGGY]  Node  cfgNode  =  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  lhs.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  lhs.getLastChild();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
102	[BUG]  [BUGGY]  Node  cfgNode  =  rhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  rhs.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  rhs.getFirstChild();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
103	[BUG]  [BUGGY]  Node  cfgNode  =  lhs.getNext();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  lhs.getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  lhs.getNext();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
104	[BUG]  [BUGGY]  Node  cfgNode  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  n.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  n.getLastChild();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
105	[BUG]  [BUGGY]  Node  cfgNode  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  node.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  node.getFirstChild();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
106	[BUG]  [BUGGY]  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(lhs.getLastChild(),  cfgNode,  output,  false);	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
107	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild().getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
108	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
109	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
110	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
112	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
113	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
114	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
115	[BUG]  [BUGGY]  Node  rhs  =  lhs.getNext();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  lhs.getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getNext();	  Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
116	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
117	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
118	[BUG]  [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
119	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
120	[BUG]  [BUGGY]  allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
121	[BUG]  [BUGGY]  Conditional.checkNotNull(rhs);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Conditional.checkNotNull(rhs);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(rhs);	  Conditional.checkNotNull(cfgNode);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
122	[BUG]  [BUGGY]  Conditional.checkNotNull(n);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Conditional.checkNotNull(n);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(n);	  Conditional.checkNotNull(cfgNode);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
123	[BUG]  [BUGGY]  Conditional.checkNotNull(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Conditional.checkNotNull(cfgNode,  output);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(cfgNode,  output);	  Conditional.checkNotNull(cfgNode);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
124	[BUG]  [BUGGY]  Conditional.checkNotNull(output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Conditional.checkNotNull(output);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(output);	  Conditional.checkNotNull(cfgNode);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
125	[BUG]  [BUGGY]  Conditional.checkNotNull(lhs);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Conditional.checkNotNull(lhs);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(lhs);	  Conditional.checkNotNull(cfgNode);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
126	[BUG]  [BUGGY]  Conditional.checkNotNull(resultMap);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Conditional.checkNotNull(resultMap);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(resultMap);	  Conditional.checkNotNull(cfgNode);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
127	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
128	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
129	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
130	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
131	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
132	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
133	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
134	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
135	[BUG]  [BUGGY]  computeMustDef(rhs.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(rhs.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(rhs.getLastChild(),  cfgNode,  output,  conditional);	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
136	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
137	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
138	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
139	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(cfgNode.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(cfgNode.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(cfgNode.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
140	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
141	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	76	None	replace
142	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode.getFirstChild(),  n,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(cfgNode.getFirstChild(),  n,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(cfgNode.getFirstChild(),  n,  output,  conditional);	  AssertionFailedError.make(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
143	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  name);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  name);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  name);	  AssertionFailedError.make(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
144	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
145	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
146	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
147	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
148	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(lhs,  cfgNode,  output,  true);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
149	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(lhs,  conditional,  cfgNode);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
150	[BUG]  [BUGGY]  AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
151	[BUG]  [BUGGY]  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(lhs.getLastChild(),  cfgNode,  output,  true);	  computeMustDef(lhs.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
152	[BUG]  [BUGGY]  Node  cfgNode  =  n.getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  n.getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  n.getNext();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
153	[BUG]  [BUGGY]  Node  cfgNode  =  n.getCfgNode();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  n.getCfgNode();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  n.getCfgNode();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
154	[BUG]  [BUGGY]  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  false);	  computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
155	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
156	[BUG]  [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
157	[BUG]  [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
158	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
159	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
160	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
161	[BUG]  [BUGGY]  Node  escaped  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  n.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  n.getLastChild();	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
162	[BUG]  [BUGGY]  Node  escaped  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  lhs.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  lhs.getFirstChild();	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
163	[BUG]  [BUGGY]  Node  escaped  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  n.getFirstChild().getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  n.getFirstChild().getNext();	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
164	[BUG]  [BUGGY]  Node  escaped  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  node.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  node.getFirstChild();	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
165	[BUG]  [BUGGY]  Node  escaped  =  n.getOwnerChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  n.getOwnerChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  n.getOwnerChild();	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
166	[BUG]  [BUGGY]  Node  escaped  =  n.getAncestor(1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  n.getAncestor(1);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  n.getAncestor(1);	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
167	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
168	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode,  output);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  =  constructor(n.getLastChild(),  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
169	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  =  constructor(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  =  constructor(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
170	[BUG]  [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
171	[BUG]  [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
172	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  null);	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
173	[BUG]  [BUGGY]  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  null);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  null);	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
174	[BUG]  [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
175	[BUG]  [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
176	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode,  rhs);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode,  rhs);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  compiler.getCompiler(cfgNode,  rhs);	  Compiler    compiler    =    compiler.getCompiler(cfgNode);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
177	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(n);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  compiler.getCompiler(n);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  compiler.getCompiler(n);	  Compiler    compiler    =    compiler.getCompiler(cfgNode);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
178	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode,  n);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode,  n);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  compiler.getCompiler(cfgNode,  n);	  Compiler    compiler    =    compiler.getCompiler(cfgNode);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
179	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode,  output);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  compiler.getCompiler(cfgNode,  output);	  Compiler    compiler    =    compiler.getCompiler(cfgNode);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
180	[BUG]  [BUGGY]  Compiler  compiler  =  output.getCompiler(cfgNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  output.getCompiler(cfgNode);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  output.getCompiler(cfgNode);	  Compiler    compiler    =    compiler.getCompiler(cfgNode);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
181	[BUG]  [BUGGY]  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);	  computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
182	[BUG]  [BUGGY]  addToDefIfLocal(lhs.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  addToDefIfLocal(lhs.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	addToDefIfLocal(lhs.getFirstChild(),  cfgNode,  output,  true);	  computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
183	[BUG]  [BUGGY]  Node  rhs  =  lhs.getLastChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  lhs.getLastChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getLastChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    lhs.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
184	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    lhs.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
185	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
186	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild().getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
187	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
188	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
189	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
190	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
191	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
192	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
193	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
194	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getLastChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getFirstChild().getLastChild();	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
195	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getProp(Node.SOURCENAME_PROP);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getProp(Node.SOURCENAME_PROP);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getFirstChild().getProp(Node.SOURCENAME_PROP);	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
196	[BUG]  [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getString();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  <?>  cfgNode  =  n.getFirstChild().getString();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  <?>  cfgNode  =  n.getFirstChild().getString();	  Compiler    <?>    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
197	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
198	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
199	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
200	[BUG]  [BUGGY]  if(lhs.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(lhs.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(lhs.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
201	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
202	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
203	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
204	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
205	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
206	[BUG]  [BUGGY]  enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
207	[BUG]  [BUGGY]  allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	allowMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
208	[BUG]  [BUGGY]  Node  escaped  =  n.getFirstChild().getLastChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  n.getFirstChild().getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  n.getFirstChild().getLastChild();	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
209	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
210	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
211	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  conditional);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
212	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
213	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  n.getFirstChild().getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  n.getFirstChild().getNext();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
214	[BUG]  [BUGGY]  Node  cfgNode  =  output.getFirstChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  output.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  output.getFirstChild();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
215	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	76	None	replace
216	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild().getLastChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getFirstChild().getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getFirstChild().getLastChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
217	[BUG]  [BUGGY]  AssertionFailedError.make(aNode.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(aNode.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(aNode.getFirstChild(),  cfgNode,  output,  conditional);	  AssertionFailedError.make(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
218	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
219	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
220	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
221	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
222	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
223	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
224	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getParent();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNode.getParent();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getParent();	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
225	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getProp(Node.SOURCEFILE_PROP);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNode.getProp(Node.SOURCEFILE_PROP);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getProp(Node.SOURCEFILE_PROP);	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
226	[BUG]  [BUGGY]  Compiler  compiler  =  output.getCompiler();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  output.getCompiler();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  output.getCompiler();	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
227	[BUG]  [BUGGY]  Node  rhs  =  lhs.next();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  lhs.next();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.next();	  Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
228	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Preconditions.checkState(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
230	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Preconditions.checkState(lhs.getType()  ==  Token.NAME);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(lhs.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
232	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
233	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
234	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  condition  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  condition  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  condition	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
235	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfg  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfg  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfg	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
236	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
237	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  lhs.getFirstChild().getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getFirstChild().getNext();	  Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
238	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
239	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
240	[BUG]  [BUGGY]  Node  cfgNode  =  lhs.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  lhs.getFirstChild().getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  lhs.getFirstChild().getNext();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
241	[BUG]  [BUGGY]  Node  cfgNode  =  lhs.getOwnScope();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  lhs.getOwnScope();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  lhs.getOwnScope();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
242	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
243	[BUG]  [BUGGY]  AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Preconditions.checkState(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Preconditions.checkState(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
245	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
246	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
247	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
248	[BUG]  [BUGGY]  escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
249	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  +  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  +  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  +  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
250	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
251	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(lhs.getFirstChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  compiler.getCompiler(lhs.getFirstChild());  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  compiler.getCompiler(lhs.getFirstChild());	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
252	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
253	[BUG]  [BUGGY]  escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
254	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
255	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
256	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
257	[BUG]  [BUGGY]  enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  false);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
258	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
259	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
260	[BUG]  [BUGGY]  Constructor  <  Node>  rhs  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  rhs  =  n.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  rhs  =  n.getFirstChild();	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
261	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(cfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(cfgNode);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
262	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(n);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(n);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
263	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.createConstructor(cfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.createConstructor(cfgNode);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  =  compiler.createConstructor(cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
264	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(lhs.getFirstChild(),  cfgNode,  output,  false);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
265	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
266	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
267	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
268	[BUG]  [BUGGY]  escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped  =  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
269	[BUG]  [BUGGY]  escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	escaped)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
270	[BUG]  [BUGGY]  enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	enableMustDef(lhs.getFirstChild(),  cfgNode,  output,  conditional);	  allowMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
271	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
272	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    return;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
273	[BUG]  [BUGGY]  Compiler  compiler  =  this.compiler.getCompiler(cfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  this.compiler.getCompiler(cfgNode);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  this.compiler.getCompiler(cfgNode);	  Compiler    compiler    =    compiler.getCompiler(cfgNode);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
274	[BUG]  [BUGGY]  cfgNode  =  lhs.getNext();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  cfgNode  =  lhs.getNext();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	cfgNode  =  lhs.getNext();	  cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	69	None	replace
275	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
276	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
277	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
278	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null  +  1);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null  +  1);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null  +  1);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
279	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
280	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNodeUtil.getCompiler(compiler);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNodeUtil.getCompiler(compiler);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNodeUtil.getCompiler(compiler);	  Compiler    compiler    =    compiler.getCompiler(cfgNode);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
281	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  null);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  null);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
282	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
283	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
284	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
285	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
286	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
287	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
288	[BUG]  [BUGGY]  Constructor  <  T>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  T>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  T>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
289	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
290	[BUG]  [BUGGY]  Node  rhs  =  n.getlastChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.getlastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.getlastChild();	  Node    rhs    =    lhs.getLastChild();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
291	[BUG]  [BUGGY]  Node  rhs  =  lhs.removeFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  lhs.removeFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.removeFirstChild();	  Node    rhs    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
292	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  >>  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  >>  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  >>  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	76	None	replace
293	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(lhs.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
294	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  computeMustDef(lhs.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
295	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(lhs.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(lhs.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
296	[BUG]  [BUGGY]  Constructor  <?>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <?>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <?>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
297	[BUG]  [BUGGY]  Constructor  <  T>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  T>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  T>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
298	[BUG]  [BUGGY]  Conditional.checkNotNull(false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Conditional.checkNotNull(false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Conditional.checkNotNull(false);	  Conditional.checkNotNull(cfgNode);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
299	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Constructor  <  Node>  escaped  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  return;	  escaped    ||    conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    return;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
300	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
301	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
302	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
303	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
304	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(rhs.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  }	  computeMustDef(rhs.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
305	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
306	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
307	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
308	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
309	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
310	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode	  if(lhs.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    	non-compiled	[CE]  <identifier>  expected	43	None	replace
311	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
312	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
313	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
314	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
315	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
316	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  true);	  AssertionFailedError.make(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
317	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional,  rhs);	  AssertionFailedError.make(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
318	[BUG]  [BUGGY]  AssertionFailedError.make(compiler,  n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(compiler,  n,  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(compiler,  n,  cfgNode,  output,  conditional);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
319	[BUG]  [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(conditional,  cfgNode,  output);	  AssertionFailedError.make(n,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
320	[BUG]  [BUGGY]  Node  escaped  =  n.getFirstChild().getFirstChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  escaped  =  n.getFirstChild().getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  escaped  =  n.getFirstChild().getFirstChild();	  Node    escaped    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
321	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
322	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
323	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
324	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
325	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
326	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
327	[BUG]  [BUGGY]  Node  cfgNode  =  n.getFirstChild().cloneTree();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  n.getFirstChild().cloneTree();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  n.getFirstChild().cloneTree();	  Node    cfgNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
328	[BUG]  [BUGGY]  Node  rhs  =  n.removeFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  n.removeFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  n.removeFirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
329	[BUG]  [BUGGY]  Node  rhs  =  output.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  output.getFirstChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  output.getFirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
330	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(lhs.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
331	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
332	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  >>  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  >>  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  >>  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
333	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  ==  cfgNode,  output,  true);  return;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  ==  cfgNode,  output,  true);  return;  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  ==  cfgNode,  output,  true);  return;  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	75	None	replace
334	[BUG]  [BUGGY]  AssertionFailedError.make(t,  n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(t,  n,  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(t,  n,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
335	[BUG]  [BUGGY]  AssertionFailedError.make(msg,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(msg,  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(msg,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
336	[BUG]  [BUGGY]  AssertionFailedError.make(conditional.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  AssertionFailedError.make(conditional.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	AssertionFailedError.make(conditional.getFirstChild(),  cfgNode,  output,  conditional);	  AssertionFailedError.make(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
337	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  true);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  rhs  =  lhs.getFirstChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    lhs.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
338	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
339	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null,  conditional);  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  null,  conditional);	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    null);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
340	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
341	[BUG]  [BUGGY]  Compiler  compiler  =  cfgNode.getImplicitPrototype();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Compiler  compiler  =  cfgNode.getImplicitPrototype();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Compiler  compiler  =  cfgNode.getImplicitPrototype();	  Compiler    compiler    =    cfgNode.getCompiler();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
342	[BUG]  [BUGGY]  Node  cfgNode  =  lhs.getFirstChild()  ||  cfgNode  ==  null?  cfgNode  :  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  lhs.getFirstChild()  ||  cfgNode  ==  null?  cfgNode  :  lhs.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  lhs.getFirstChild()  ||  cfgNode  ==  null?  cfgNode  :  lhs.getLastChild();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
343	[BUG]  [BUGGY]  Node  cfgNode  =  lhs.getFirstChild()  ||  cfgNode!=  null?  cfgNode  :  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      lhs  =  lhs.getLastChild();  //  for(var  x  in  y)  {...}  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:      [BUGGY]  Node  cfgNode  =  lhs.getFirstChild()  ||  cfgNode!=  null?  cfgNode  :  lhs.getLastChild();  [BUGGY]      computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	258	258	3	replace	Node  cfgNode  =  lhs.getFirstChild()  ||  cfgNode!=  null?  cfgNode  :  lhs.getLastChild();	  Node    cfgNode    =    lhs.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
