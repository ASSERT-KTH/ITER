bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c.inlineChildren(c,  reachingUses);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChildren(c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChildren(c,  reachingUses);	  c.inlineChildren(c);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    c).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
3	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    c).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
4	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c.traverse(t.getScopeRoot().getFirstChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c.traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c.traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    c).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
5	[BUG]  [BUGGY]  c.inlineCfgNode(n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCfgNode(n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCfgNode(n);	  c.inlineCfgNode();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
6	[BUG]  [BUGGY]  c.inlineCandidate();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate();	  c.inlineCfgNode();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
7	[BUG]  [BUGGY]  c.inlineCfgNode(c);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCfgNode(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCfgNode(c);	  c.inlineCfgNode();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
8	[BUG]  [BUGGY]  c.inlineChild(c,  defCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  defCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  defCfgNode,  reachingUses);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
9	[BUG]  [BUGGY]  c.inlineChild(c,  startingNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingNode);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
10	[BUG]  [BUGGY]  c.inlineChild(c,  n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  n);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
11	[BUG]  [BUGGY]  c.inlineChild(c,  startingCfgNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingCfgNode);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
12	[BUG]  [BUGGY]  c.inline(c,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getScopeRoot(),  reachingUses);	  c.inline(c,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
13	[BUG]  [BUGGY]  c.inline(cfg,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  t.getScopeRoot());	  c.inline(c,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
14	[BUG]  [BUGGY]  c.inline(c,  t.getCurrentScope());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getCurrentScope());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getCurrentScope());	  c.inline(c,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
15	[BUG]  [BUGGY]  c.inlineChild(c,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  t.getScopeRoot());	  c.inline(c,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
16	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getFirstChild(),  c);	  c.inlinePath(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  c,  reachingUses);	  c.inlinePath(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot(),  reachingUses);	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c.getScopeRoot());	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  c.inlineChild(t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t.getScopeRoot());	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  c.inlineScope(t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineScope(t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineScope(t.getScopeRoot());	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  achievingUses.add(c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  achievingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	achievingUses.add(c);	  c    =    c.getScopeRoot().getFirstChild();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
23	[BUG]  [BUGGY]  ReachUses.add(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  ReachUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	ReachUses.add(c);	  c    =    c.getScopeRoot().getFirstChild();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
24	[BUG]  [BUGGY]  overcomingUses.add(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  overcomingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	overcomingUses.add(c);	  c    =    c.getScopeRoot().getFirstChild();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
25	[BUG]  [BUGGY]  ajungiUses.add(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  ajungiUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	ajungiUses.add(c);	  c    =    c.getScopeRoot().getFirstChild();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
26	[BUG]  [BUGGY]  ReachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  ReachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	ReachingUses.add(c);	  c    =    c.getScopeRoot().getFirstChild();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
27	[BUG]  [BUGGY]  leadingUses.add(c);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  leadingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	leadingUses.add(c);	  c    =    c.getScopeRoot().getFirstChild();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
28	[BUG]  [BUGGY]  c.inlineInline(c,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineInline(c,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineInline(c,  reachingUses,  numUseWithinUseCfgNode);	  c.inlineInline(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
29	[BUG]  [BUGGY]  c.inlineInline(c,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineInline(c,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineInline(c,  reachingUses,  t.getScopeRoot());	  c.inlineInline(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
30	[BUG]  [BUGGY]  c.inline(c,  defCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  defCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  defCfgNode,  reachingUses);	  c.inline(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
31	[BUG]  [BUGGY]  c.inline(c,  defNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  defNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  defNode,  reachingUses);	  c.inline(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
32	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  reachingDef);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  reachingDef);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  startingDef);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  startingDef);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
34	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  matchingDef);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  matchingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  matchingDef);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
35	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  hittingDef);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  hittingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  hittingDef);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
36	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getFirstChild(),  reachingUses);	  c.inlinePath(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  c.inline(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t.getScopeRoot().getLastChild());	  c.inlinePath(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  reachingUses);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
39	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode  +  1);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
40	[BUG]  [BUGGY]  c.inlineCandidate(c,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  numUseWithinUseCfgNode,  reachingUses);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
41	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
42	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  reachingUses.size());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  reachingUses.size());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  reachingUses.size());	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
43	[BUG]  [BUGGY]  c.inline(numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(numUseWithinUseCfgNode,  reachingUses);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
44	[BUG]  [BUGGY]  vingUses.analyze(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.analyze(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.analyze(c);	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
45	[BUG]  [BUGGY]  vingUses.add(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.add(c);	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
46	[BUG]  [BUGGY]  vingUses.inline(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.inline(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.inline(c);	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
47	[BUG]  [BUGGY]  vingUses.remove(c);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.remove(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.remove(c);	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
48	[BUG]  [BUGGY]  vingUses.clear();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.clear();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.clear();	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
49	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  false,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  false,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  false,  numUseWithinUseCfgNode);	  c.inline(c,    reachingUses,    false);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
50	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  false,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  false,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  false,  t.getScopeRoot());	  c.inline(c,    reachingUses,    false);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
51	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  false);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  false);	  c.inline(c,    reachingUses,    false);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
52	[BUG]  [BUGGY]  growingUses.add(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  growingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	growingUses.add(c);	  c    =    c.getScopeRoot();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
53	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  reachingUses);	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
54	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  candidate);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  candidate);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  candidate);	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  candidates);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  candidates);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  candidates);	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  startingDef);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  startingDef);	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  c.inlineChild(c,  seekingUses,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  seekingUses,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  seekingUses,  reachingUses);	  c.inlineChild(c,    seekingUses);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
58	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  c);	  c.inlineChild(c,    seekingUses);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
59	[BUG]  [BUGGY]  reachingUses.analyze(c,  c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.analyze(c,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.analyze(c,  c);	  reachingUses.analyze(c);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
60	[BUG]  [BUGGY]  reachingUses.analyze(c,  cfg);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.analyze(c,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.analyze(c,  cfg);	  reachingUses.analyze(c);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
61	[BUG]  [BUGGY]  reachingUses.analyze(c,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.analyze(c,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.analyze(c,  t.getScopeRoot());	  reachingUses.analyze(c);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
62	[BUG]  [BUGGY]  reachingUses.analyze(c,  t);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.analyze(c,  t);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.analyze(c,  t);	  reachingUses.analyze(c);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
63	[BUG]  [BUGGY]  reachingUses.analyze(cfg);  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.analyze(cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.analyze(cfg);	  reachingUses.analyze(c);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
64	[BUG]  [BUGGY]  c.inlineChild(t,  c,  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  c,  reachingUses);	  c.inlineChild(t,    c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
65	[BUG]  [BUGGY]  c.inlineChild(t,  cfg);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  cfg);	  c.inlineChild(t,    c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
66	[BUG]  [BUGGY]  c.inlineChild(t,  c),  reachingUses);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  c),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  c),  reachingUses);	  c.inlineChild(t,    c);    	non-compiled	[CE]  ';'  expected	2	None	replace
67	[BUG]  [BUGGY]  c.inlineChild(t,  c,  arrivingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  c,  arrivingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  c,  arrivingUses);	  c.inlineChild(t,    c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  t.getScopeRoot().inlineChild(c,  reachingUses);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().inlineChild(c,  reachingUses);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().inlineChild(c,  reachingUses);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
69	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingUses);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingUses);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().replaceChild(c,  reachingUses);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
70	[BUG]  [BUGGY]  t.getScopeRoot().inlineChild(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().inlineChild(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().inlineChild(c);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
71	[BUG]  [BUGGY]  t.getScopeRoot().addChildToFront(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().addChildToFront(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().addChildToFront(c);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
72	[BUG]  [BUGGY]  t.getScopeRoot().deleteChild(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().deleteChild(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().deleteChild(c);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
73	[BUG]  [BUGGY]  c.inline(n,  defCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  defCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  defCfgNode,  reachingUses);	  c.inline(n,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
74	[BUG]  [BUGGY]  c.inline(defCfgNode,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  numUseWithinUseCfgNode);	  c.inline(n,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
75	[BUG]  [BUGGY]  c.inline(n,  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  reachingUses);	  c.inline(n,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
76	[BUG]  [BUGGY]  c.inline(c,  def,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  def,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  def,  reachingUses);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
77	[BUG]  [BUGGY]  c.inline(cfgNode,  def,  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfgNode,  def,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfgNode,  def,  reachingUses);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
78	[BUG]  [BUGGY]  c.inline(cfg,  def,  reachingUses);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  def,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  def,  reachingUses);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
79	[BUG]  [BUGGY]  c.inline(  reachingUses,  cfg);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(  reachingUses,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(  reachingUses,  cfg);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
80	[BUG]  [BUGGY]  c.inline(peekNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(peekNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(peekNode,  reachingUses);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
81	[BUG]  [BUGGY]  reachingUses.add(c,  c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.add(c,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.add(c,  c);	  reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
82	[BUG]  [BUGGY]  reachingUses.add(c,  n);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.add(c,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.add(c,  n);	  reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
83	[BUG]  [BUGGY]  reachingUses.add(cfg);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.add(cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.add(cfg);	  reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
84	[BUG]  [BUGGY]  reachingUses.add(c,  cfg);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.add(c,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.add(c,  cfg);	  reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
85	[BUG]  [BUGGY]  reachingUses.add(c,  t);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.add(c,  t);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.add(c,  t);	  reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
86	[BUG]  [BUGGY]  reachingUses.remove(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.remove(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.remove(c);	  reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
87	[BUG]  [BUGGY]  c.inline(varName,  def,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(varName,  def,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(varName,  def,  numUseWithinUseCfgNode);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
88	[BUG]  [BUGGY]  c.inline(numUseWithinUseCfgNode,  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(numUseWithinUseCfgNode,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(numUseWithinUseCfgNode,  def);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
89	[BUG]  [BUGGY]  c.inline(def,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  reachingUses);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
90	[BUG]  [BUGGY]  c.inline(n,  def,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  def,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  def,  numUseWithinUseCfgNode);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
91	[BUG]  [BUGGY]  c.inline(def,  reachingUses[numUseWithinUseCfgNode]);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  reachingUses[numUseWithinUseCfgNode]);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  reachingUses[numUseWithinUseCfgNode]);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
92	[BUG]  [BUGGY]  c.inline(use,  defCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(use,  defCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(use,  defCfgNode);	  c.inline(defCfgNode,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
93	[BUG]  [BUGGY]  c.inline(useCfgNode,  defCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  defCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  defCfgNode);	  c.inline(defCfgNode,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
94	[BUG]  [BUGGY]  c.inline(def,  n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  n);	  c.inline(defCfgNode,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
95	[BUG]  [BUGGY]  c.inline(defNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  reachingUses);	  c.inline(defCfgNode,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
96	[BUG]  [BUGGY]  c.inlineChild(t,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  reachingUses,  c);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
97	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t,  numUseWithinUseCfgNode);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
98	[BUG]  [BUGGY]  c.inlineChild(t,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  reachingUses);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
99	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t,  candidate);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t,  candidate);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t,  candidate);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
100	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses,  c);	  c.inlinePath(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
101	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getNext(),  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getNext(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getNext(),  reachingUses);	  c.inlinePath(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
102	[BUG]  [BUGGY]  c.inline(cfg,  def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  def);	  c.inline(def,    cfg);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
103	[BUG]  [BUGGY]  c.inline(c,  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  def);	  c.inline(def,    cfg);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
104	[BUG]  [BUGGY]  c.inlineChild(c,  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  def);	  c.inline(def);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
105	[BUG]  [BUGGY]  c.inlineChild(c,  arrivingUses,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  arrivingUses,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  arrivingUses,  reachingUses);	  c.inlineChild(c,    arrivingUses);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
106	[BUG]  [BUGGY]  c.inlineChild(c,  arrivingUses,  reachingDef);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  arrivingUses,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  arrivingUses,  reachingDef);	  c.inlineChild(c,    arrivingUses);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
107	[BUG]  [BUGGY]  c.inlineChild(c,  startingUses,  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingUses,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingUses,  reachingUses);	  c.inlineChild(c,    arrivingUses);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
108	[BUG]  [BUGGY]  c.inlineChild(c,  arrivingUses,  startingDef);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  arrivingUses,  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  arrivingUses,  startingDef);	  c.inlineChild(c,    arrivingUses);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
109	[BUG]  [BUGGY]  c.inline(cfg,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  t.getScopeRoot(),  reachingUses);	  c.inline(defCfgNode,    t.getScopeRoot(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
110	[BUG]  [BUGGY]  c.inline(cfgNode,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfgNode,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfgNode,  t.getScopeRoot(),  reachingUses);	  c.inline(defCfgNode,    t.getScopeRoot(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
111	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  true);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  true);	  c.inline(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
112	[BUG]  [BUGGY]  c.inline(c,  callingUses,  false);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  callingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  callingUses,  false);	  c.inline(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
113	[BUG]  [BUGGY]  c.inline(defNode,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  t.getScopeRoot());	  c.inline(useCfgNode,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	70	None	replace
114	[BUG]  [BUGGY]  c.inline(useCfgNode,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  t.getScopeRoot(),  reachingUses);	  c.inline(useCfgNode,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	70	None	replace
115	[BUG]  [BUGGY]  c.inline(n,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  t.getScopeRoot());	  c.inline(useCfgNode,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	70	None	replace
116	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  numUseWithinUseCfgNode);	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
117	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  t.getScopeRoot());	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
118	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  numUseWithinUseCfgNode);	  c.inline(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
119	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  t.getScopeRoot());	  c.inline(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
120	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  null);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  null);	  c.inline(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
121	[BUG]  [BUGGY]  c.inline(c,  t.getConstructor());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getConstructor());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getConstructor());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
122	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getConstructor(),  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getConstructor(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getConstructor(),  reachingUses);	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
123	[BUG]  [BUGGY]  c.inline(def,  t.getConstructor());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getConstructor());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getConstructor());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
124	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getConstructor());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getConstructor());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getConstructor());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
125	[BUG]  [BUGGY]  c.inline(defNode,  t.getConstructor(),  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  t.getConstructor(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  t.getConstructor(),  reachingUses);	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
126	[BUG]  [BUGGY]  t.getScopeRoot().detachFromParent(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachFromParent(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachFromParent(c);  reachingUses.add(c);	  t.getScopeRoot().detachFromParent();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
127	[BUG]  [BUGGY]  reachingUses.add(t.getScopeRoot().detachFromParent());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.add(t.getScopeRoot().detachFromParent());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.add(t.getScopeRoot().detachFromParent());	  t.getScopeRoot().detachFromParent();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
128	[BUG]  [BUGGY]  t.getScopeRoot().detachFromParent();  reachingUses.add(c,  c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachFromParent();  reachingUses.add(c,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachFromParent();  reachingUses.add(c,  c);	  t.getScopeRoot().detachFromParent();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
129	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getFirstChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getFirstChild());	  c.inline(defCfgNode,    t.getLastChild());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
130	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getLastChild(),  reachingUses);	  c.inline(defCfgNode,    t.getLastChild());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
131	[BUG]  [BUGGY]  c.inline(c,  t.getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getLastChild());	  c.inline(defCfgNode,    t.getLastChild());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
132	[BUG]  [BUGGY]  c.inline(def,  t.getLastChild());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getLastChild());	  c.inline(defCfgNode,    t.getLastChild());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
133	[BUG]  [BUGGY]  c.inline(defNode,  t.getFirstChild());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  t.getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  t.getFirstChild());	  c.inline(defCfgNode,    t.getLastChild());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
134	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  candidates);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  candidates);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  candidates);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
135	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  candidate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  candidate);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  candidate);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
136	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
137	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getCurrentScope());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getCurrentScope());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getCurrentScope());	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
138	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	51	None	replace
139	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	51	None	replace
140	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
141	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  n);	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
142	[BUG]  [BUGGY]  c.inline(cfgNode,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfgNode,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfgNode,  reachingUses,  t.getScopeRoot());	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
143	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getScopeRoot().getFirstChild(),  reachingUses);	  c.inline(defCfgNode,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
144	[BUG]  [BUGGY]  c.inline(defNode,  t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  t.getScopeRoot().getLastChild());	  c.inline(defCfgNode,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
145	[BUG]  [BUGGY]  c.inline(def,  t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getScopeRoot().getFirstChild());	  c.inline(defCfgNode,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
146	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getModule(),  reachingDef);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getModule(),  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getModule(),  reachingDef);	  c.inlineChild(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
147	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getModule(),  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getModule(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getModule(),  reachingUses);	  c.inlineChild(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
148	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getModule(),  startingDef);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getModule(),  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getModule(),  startingDef);	  c.inlineChild(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
149	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  false);	  c.inlineChild(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
150	[BUG]  [BUGGY]  c.inlineChild(c,  callingUses,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  callingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  callingUses,  false);	  c.inlineChild(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
151	[BUG]  [BUGGY]  c.inlineChild(c,  approachingUses,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  approachingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  approachingUses,  false);	  c.inlineChild(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
152	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  null,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  null,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  null,  numUseWithinUseCfgNode);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
153	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  reachingDef);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  reachingDef);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
154	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  null,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  null,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  null,  t.getScopeRoot());	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
155	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  mapping);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  mapping);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  mapping);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
156	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  matchingDef);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  matchingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  matchingDef);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
157	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  mappingNode);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  mappingNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  mappingNode);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
158	[BUG]  [BUGGY]  c.inline(defCfgNode,  candidate);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  candidate);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  candidate);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
159	[BUG]  [BUGGY]  c.inline(defCfgNode,  defCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  defCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  defCfgNode);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
160	[BUG]  [BUGGY]  c.inline(defCfgNode,  canBeReachingVariable);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  canBeReachingVariable);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  canBeReachingVariable);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
161	[BUG]  [BUGGY]  c.inline(defCfgNode,  canBeReachingVariableDef);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  canBeReachingVariableDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  canBeReachingVariableDef);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
162	[BUG]  [BUGGY]  c.inline(def,  c);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  c);	  c.inline(defCfgNode,    c);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
163	[BUG]  [BUGGY]  c.inline(def,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getScopeRoot(),  reachingUses);	  c.inline(def,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	45	None	replace
164	[BUG]  [BUGGY]  c.inline(def,  t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getScopeRoot().getLastChild(),  reachingUses);	  c.inline(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
165	[BUG]  [BUGGY]  c.inline(c,  t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getScopeRoot().getFirstChild());	  c.inline(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
166	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  reachingUses);	  c.inlineChild(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
167	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode  +  1);	  c.inlineChild(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
168	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);	  c.inlineChild(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
169	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  reachingUses.size());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  reachingUses.size());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  reachingUses.size());	  c.inlineChild(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
170	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  reachingUses[numUseWithinUseCfgNode]);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  reachingUses[numUseWithinUseCfgNode]);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  reachingUses[numUseWithinUseCfgNode]);	  c.inlineChild(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
171	[BUG]  [BUGGY]  c.inline(c,  t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getScopeRoot().getLastChild(),  reachingUses);	  c.inline(c,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
172	[BUG]  [BUGGY]  c.inline(c,  t.getScopeRoot().getNext());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getScopeRoot().getNext());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getScopeRoot().getNext());	  c.inline(c,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
173	[BUG]  [BUGGY]  c.inline(c,  t.getScopeRoot().getString());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getScopeRoot().getString());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getScopeRoot().getString());	  c.inline(c,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
174	[BUG]  [BUGGY]  reachingUses.canInline(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.canInline(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.canInline(c);	  reachingUses.canInline();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
175	[BUG]  [BUGGY]  reachingUses.inline(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.inline(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.inline(c);	  reachingUses.canInline();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
176	[BUG]  [BUGGY]  reachingUses.push(c);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.push(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.push(c);	  reachingUses.canInline();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
177	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
178	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
179	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
180	[BUG]  [BUGGY]  c.inline(c,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  n);	  c.inline(defCfgNode,    n);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
181	[BUG]  [BUGGY]  c.inline(c.getScopeRoot());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c.getScopeRoot());	  c.inline(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
182	[BUG]  [BUGGY]  c.inline(t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t.getScopeRoot(),  reachingUses);	  c.inline(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
183	[BUG]  [BUGGY]  c.inline(t.getScopeRoot(),  c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot(),  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t.getScopeRoot(),  c);	  c.inline(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
184	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
185	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
186	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
187	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
188	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
189	[BUG]  [BUGGY]  c.inline(true,  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(true,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(true,  reachingUses);	  c.inline(false,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
190	[BUG]  [BUGGY]  c.inline(false,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(false,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(false,  reachingUses,  numUseWithinUseCfgNode);	  c.inline(false,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
191	[BUG]  [BUGGY]  c.inline(false,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(false,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(false,  reachingUses,  c);	  c.inline(false,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
192	[BUG]  [BUGGY]  c.inline(false,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(false,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(false,  reachingUses,  t.getScopeRoot());	  c.inline(false,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
193	[BUG]  [BUGGY]  c.inline(false,  reachingUses,  true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(false,  reachingUses,  true);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(false,  reachingUses,  true);	  c.inline(false,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
194	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  reachingUses);	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
195	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  reachingUses.size());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  reachingUses.size());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  reachingUses.size());	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
196	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  numUseWithinUseCfgNode  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  numUseWithinUseCfgNode  +  1);	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
197	[BUG]  [BUGGY]  c.inline(c,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  numUseWithinUseCfgNode,  reachingUses);	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
198	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  numUseWithinUseCfgNode,  reachingUses);	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
199	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  null,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  null,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  null,  numUseWithinUseCfgNode);	  c.inlineChild(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
200	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  mapping);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  mapping);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  mapping);	  c.inlineChild(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
201	[BUG]  [BUGGY]  c.inlinePath(t,  c,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t,  c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t,  c,  reachingUses);	  c.inlinePath(t,    c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
202	[BUG]  [BUGGY]  c.inlineCandidate(t,  c);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(t,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(t,  c);	  c.inlinePath(t,    c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
203	[BUG]  [BUGGY]  c.inlinePath(t,  cfg);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t,  cfg);	  c.inlinePath(t,    c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
204	[BUG]  [BUGGY]  c.inline(t,  c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t,  c);	  c.inlinePath(t,    c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
205	[BUG]  [BUGGY]  reachingUses.removeChild(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.removeChild(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.removeChild(c);	  reachingUses.inline();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
206	[BUG]  [BUGGY]  reachingUses.clear();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.clear();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.clear();	  reachingUses.inline();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
207	[BUG]  [BUGGY]  c.inline(cfgNode,  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfgNode,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfgNode,  def);	  c.inline(def,    cfgNode);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
208	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  cfg);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  cfg);	  c.inlineCandidate(c,    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
209	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
210	[BUG]  [BUGGY]  c.inlinePath(t,  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t,  reachingUses);	  c.inlinePath(t);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
211	[BUG]  [BUGGY]  c.inline(t,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t,  reachingUses);	  c.inlinePath(t);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
212	[BUG]  [BUGGY]  c.inlineChild(t);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t);	  c.inlinePath(t);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
213	[BUG]  [BUGGY]  leadingUses.analyze(c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  leadingUses.analyze(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	leadingUses.analyze(c);	  leadingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
214	[BUG]  [BUGGY]  LeadingUses.analyze(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  LeadingUses.analyze(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	LeadingUses.analyze(c);	  leadingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
215	[BUG]  [BUGGY]  leadingUses.inline(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  leadingUses.inline(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	leadingUses.inline(c);	  leadingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
216	[BUG]  [BUGGY]  leadingUses.inline();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  leadingUses.inline();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	leadingUses.inline();	  leadingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
217	[BUG]  [BUGGY]  c.inline(varName,  defCfgNode,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(varName,  defCfgNode,  numUseWithinCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(varName,  defCfgNode,  numUseWithinCfgNode);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
218	[BUG]  [BUGGY]  c.inline(numUseWithinCfgNode,  defCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(numUseWithinCfgNode,  defCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(numUseWithinCfgNode,  defCfgNode);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
219	[BUG]  [BUGGY]  c.inline(def,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  numUseWithinCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  numUseWithinCfgNode);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
220	[BUG]  [BUGGY]  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
221	[BUG]  [BUGGY]  reachingUses.addAll(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.addAll(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.addAll(t.getScopeRoot().getLastChild());	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
222	[BUG]  [BUGGY]  t.getScopeRoot().inlineChild(c,  reachingUses);  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().inlineChild(c,  reachingUses);  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().inlineChild(c,  reachingUses);  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
223	[BUG]  [BUGGY]  reachingUses.addAll(t.getScopeRoot().removeChild(c));  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.addAll(t.getScopeRoot().removeChild(c));  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.addAll(t.getScopeRoot().removeChild(c));	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
224	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingUses);  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingUses);  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().replaceChild(c,  reachingUses);  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
225	[BUG]  [BUGGY]  t.getScopeRoot().inlineChild(c);  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().inlineChild(c);  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().inlineChild(c);  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
226	[BUG]  [BUGGY]  t.getScopeRoot().inlineChild(c);  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().inlineChild(c);  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().inlineChild(c);  reachingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
227	[BUG]  [BUGGY]  t.getScopeRoot().deleteChild(c);  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().deleteChild(c);  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().deleteChild(c);  reachingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
228	[BUG]  [BUGGY]  t.getScopeRoot().addChildToFront(c);  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().addChildToFront(c);  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().addChildToFront(c);  reachingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
229	[BUG]  [BUGGY]  ttingUses.analyze();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  ttingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	ttingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
230	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().replaceChild(c,  reachingUses);	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
231	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getModule(),  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getModule(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getModule(),  reachingUses);	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
232	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getModule(),  reachingDef);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getModule(),  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getModule(),  reachingDef);	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
233	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScope());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScope());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScope());	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
234	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  tfa.getModule());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  tfa.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  tfa.getModule());	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
235	[BUG]  [BUGGY]  c.inlinePath(c,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c,  reachingUses,  numUseWithinUseCfgNode);	  c.inlinePath(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
236	[BUG]  [BUGGY]  c.inlinePath(c,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c,  reachingUses,  t.getScopeRoot());	  c.inlinePath(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
237	[BUG]  [BUGGY]  c.inlinePath(c,  reachingUses,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c,  reachingUses,  true);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c,  reachingUses,  true);	  c.inlinePath(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
238	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	53	None	replace
239	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  numUseWithinUseCfgNode);	  c.inline(defCfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
240	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  n);	  c.inline(defCfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
241	[BUG]  [BUGGY]  c.inline(t,  defCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t,  defCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t,  defCfgNode,  reachingUses);	  c.inline(defCfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
242	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  c);	  c.inline(defCfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
243	[BUG]  [BUGGY]  c.inlinePath(n,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(n,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(n,  reachingUses);	  c.inlinePath(n);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
244	[BUG]  [BUGGY]  c.inlinePath(candidate);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(candidate);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(candidate);	  c.inlinePath(n);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
245	[BUG]  [BUGGY]  c.inline(defNode,  t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  t.getScopeRoot().getFirstChild(),  reachingUses);	  c.inline(defNode,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	19	None	replace
246	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c.getScopeRoot().getFirstChild());	  c.inlinePath(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
247	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c.getScopeRoot().getLastChild(),  reachingUses);	  c.inlinePath(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
248	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot().getString());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot().getString());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c.getScopeRoot().getString());	  c.inlinePath(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
249	[BUG]  [BUGGY]  c.inline(n,  useCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  useCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  useCfgNode);	  c.inline(c,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
250	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
251	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  candidate);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  candidate);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  candidate);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
252	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  candidates);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  candidates);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  candidates);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
253	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  compiler);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  compiler);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  compiler);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
254	[BUG]  [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  numUseWithinUseCfgNode,  n);	  c.inlineChild(c,    reachingUses,    n);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
255	[BUG]  [BUGGY]  c.inlineChild(c,  n,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  n,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  n,  reachingUses);	  c.inlineChild(c,    reachingUses,    n);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
256	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  n,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  n,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  n,  numUseWithinUseCfgNode);	  c.inlineChild(c,    reachingUses,    n);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
257	[BUG]  [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  numUseWithinUseCfgNode,  reachingUses);	  c.inlineChild(c,    reachingUses,    n);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
258	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getString(),  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getString(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getString(),  reachingUses);	  c.inlinePath(t.getScopeRoot().getString());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
259	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild()  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild()  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getFirstChild()  +  1);	  c.inlinePath(t.getScopeRoot().getLastChild()    +    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
260	[BUG]  [BUGGY]  c.inline(candidate,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  reachingUses,  numUseWithinUseCfgNode);	  c.inline(candidate,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
261	[BUG]  [BUGGY]  c.inline(candidate,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  reachingUses,  c);	  c.inline(candidate,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
262	[BUG]  [BUGGY]  c.inline(candidate,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  reachingUses,  t.getScopeRoot());	  c.inline(candidate,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
263	[BUG]  [BUGGY]  c.inline(candidate,  reachingUses,  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  reachingUses,  c.useCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  reachingUses,  c.useCfgNode);	  c.inline(candidate,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
264	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c.getScopeRoot()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c.getScopeRoot()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c.getScopeRoot()).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    c.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
265	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c.getConstructor()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c.getConstructor()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c.getConstructor()).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    c.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
266	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c.getCurrentNode()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c.getCurrentNode()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c.getCurrentNode()).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    c.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
267	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c.getParent()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c.getParent()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c.getParent()).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    c.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
268	[BUG]  [BUGGY]  c.inlineChild(c,  startingDef,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingDef,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingDef,  reachingUses);	  c.inlineChild(c,    startingDef);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
269	[BUG]  [BUGGY]  c.inlineChild(c,  reachingDef);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingDef);	  c.inlineChild(c,    startingDef);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
270	[BUG]  [BUGGY]  c.inlineChild(c,  startingDef,  matchingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingDef,  matchingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingDef,  matchingUses);	  c.inlineChild(c,    startingDef);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
271	[BUG]  [BUGGY]  c.inline(c,  t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getScopeRoot().getFirstChild(),  reachingUses);	  c.inline(defCfgNode,    t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
272	[BUG]  [BUGGY]  c.inline(defCfgNode,  n,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  n,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  n,  reachingUses);	  c.inline(defCfgNode,    n);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
273	[BUG]  [BUGGY]  c.inline(useCfgNode,  n);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  n);	  c.inline(defCfgNode,    n);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
274	[BUG]  [BUGGY]  c.inline(numUseWithinUseCfgNode,  c);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(numUseWithinUseCfgNode,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(numUseWithinUseCfgNode,  c);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
275	[BUG]  [BUGGY]  c.inline(defCfg,  c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfg,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfg,  c);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
276	[BUG]  [BUGGY]  c.inline(numUseWithinUseseCfgNode,  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(numUseWithinUseseCfgNode,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(numUseWithinUseseCfgNode,  c);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
277	[BUG]  [BUGGY]  c.inline(candidates,  c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidates,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidates,  c);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
278	[BUG]  [BUGGY]  t.getScopeRoot().insertFromParent(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().insertFromParent(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().insertFromParent(c);  reachingUses.add(c);	  t.getScopeRoot().detachFromParent();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
279	[BUG]  [BUGGY]  t.getScopeRoot().inlineFromParent(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().inlineFromParent(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().inlineFromParent(c);  reachingUses.add(c);	  t.getScopeRoot().detachFromParent();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
280	[BUG]  [BUGGY]  t.getScopeRoot().detachFromParent();  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachFromParent();  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachFromParent();  reachingUses.addAll(c);	  t.getScopeRoot().detachFromParent();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
281	[BUG]  [BUGGY]  c.inlineChild(c,  startingDecimal);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingDecimal);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingDecimal);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
282	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	51	None	replace
283	[BUG]  [BUGGY]  c.inlineCandidate(defCfgNode,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(defCfgNode,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(defCfgNode,  t.getScopeRoot());	  c.inlineCfgNode();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
284	[BUG]  [BUGGY]  atingUses.add(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  atingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	atingUses.add(c);	  c    =    c.getScopeRoot();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
285	[BUG]  [BUGGY]  c.inlinePath(c,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c,  reachingUses,  c);	  c.inlineCandidate(c,    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
286	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t);	  c.inlineCandidate(c,    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
287	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getNext(),  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getNext(),  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getNext(),  c);	  c.inlinePath(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
288	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  cfg);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  cfg);	  c.inlinePath(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
289	[BUG]  [BUGGY]  t.getScopeRoot().addChildrenToFront(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().addChildrenToFront(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().addChildrenToFront(c);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
290	[BUG]  [BUGGY]  leadingUses.canInline();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  leadingUses.canInline();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	leadingUses.canInline();	  leadingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
291	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  compiler);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  compiler);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  compiler);	  c.inline(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
292	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  n);	  c.inline(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
293	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t,  def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t,  def);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
294	[BUG]  [BUGGY]  c.inlineChild(c,  t,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  t,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  t,  reachingUses);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
295	[BUG]  [BUGGY]  c.inlineCfgNode(t);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCfgNode(t);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCfgNode(t);	  c.inlinePath(t);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
296	[BUG]  [BUGGY]  c.inlineFunction(t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineFunction(t);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineFunction(t);	  c.inlinePath(t);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
297	[BUG]  [BUGGY]  c.inline(candidate,  c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  c);	  c.inline(candidate);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
298	[BUG]  [BUGGY]  c.inline(defNode,  t.getScopeRoot(),  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  t.getScopeRoot(),  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  t.getScopeRoot(),  reachingUses,  c);	  c.inline(defNode,    t.getScopeRoot(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
299	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  numUseWithinUseCfgNode);	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
300	[BUG]  [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  numUseWithinUseCfgNode,  t.getScopeRoot());	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
301	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  n);	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
302	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getCurrentNode());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getCurrentNode());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getCurrentNode());	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
303	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  n);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  n);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
304	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  null);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
305	[BUG]  [BUGGY]  c.inlineChildAfter(t,  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChildAfter(t,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChildAfter(t,  c);	  c.inlineChild(t,    c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
306	[BUG]  [BUGGY]  c.inlineChild(t,  cfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  cfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  cfgNode);	  c.inlineChild(t,    c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
307	[BUG]  [BUGGY]  c.inlineChild(t,  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  def);	  c.inlineChild(t,    c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
308	[BUG]  [BUGGY]  c.inline(defCfgNode,  def);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  def);	  c.inline(defCfgNode,    c);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
309	[BUG]  [BUGGY]  c.inlineChild(cfg,  seekingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  seekingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  seekingUses);	  c.inlineChild(c,    seekingUses);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
310	[BUG]  [BUGGY]  c.inlineChild(c,  seekingUses,  reachingDef);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  seekingUses,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  seekingUses,  reachingDef);	  c.inlineChild(c,    seekingUses);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
311	[BUG]  [BUGGY]  c.inlineChild(c,  numUseWithinUseseCfgNode,  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  numUseWithinUseseCfgNode,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  numUseWithinUseseCfgNode,  n);	  c.inlineChild(c,    reachingUses,    n);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
312	[BUG]  [BUGGY]  c.inline(useCfgNode,  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  def);	  c.inline(def);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
313	[BUG]  [BUGGY]  c.inlinePath(c,  reachingUses,  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c,  reachingUses,  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c,  reachingUses,  null);	  c.inlinePath(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
314	[BUG]  [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  cfgNode,  reachingUses,  numUseWithinUseCfgNode);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
315	[BUG]  [BUGGY]  c.inline(def,  reachingUses,  cfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  reachingUses,  cfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  reachingUses,  cfgNode);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
316	[BUG]  [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  cfgNode,  reachingUses,  n);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
317	[BUG]  [BUGGY]  c.inline(def,  n,  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  n,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  n,  reachingUses);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
318	[BUG]  [BUGGY]  c.inline(useCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  reachingUses);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
319	[BUG]  [BUGGY]  c.inline(defCfgNode,  numUseWithinCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  numUseWithinCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  numUseWithinCfgNode,  reachingUses);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
320	[BUG]  [BUGGY]  c.inline(defCfgNode,  numUseWithinCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  numUseWithinCfgNode  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  numUseWithinCfgNode  +  1);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
321	[BUG]  [BUGGY]  c.inline(defCfgNode,  0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  0);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  0);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
322	[BUG]  [BUGGY]  c.inline(t.getScopeRoot(),  c.getLastChild());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot(),  c.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t.getScopeRoot(),  c.getLastChild());	  c.inline(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
323	[BUG]  [BUGGY]  vingUses.inline(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.inline(c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.inline(c,  reachingUses);	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
324	[BUG]  [BUGGY]  vingUses.canInline();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.canInline();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.canInline();	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
325	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  this);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  this);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  this);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
326	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  mappingDef);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  mappingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  mappingDef);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
327	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  null,  reachingDef);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  null,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  null,  reachingDef);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
328	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  def);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  def);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
329	[BUG]  [BUGGY]  c.inline(defCfgNode,  cfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  cfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  cfgNode);	  c.inline(def,    cfgNode);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
330	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  false,  t.getModule());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  false,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  false,  t.getModule());	  c.inline(c,    reachingUses,    false);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
331	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getModule());	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
332	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getModule(),  reachingDef);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getModule(),  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getModule(),  reachingDef);	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
333	[BUG]  [BUGGY]  c.inlinePath(c,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c,  reachingUses,  t.getModule());	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
334	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getModule(),  startingDef);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getModule(),  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getModule(),  startingDef);	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
335	[BUG]  [BUGGY]  c.inline(defCfgNode,  n.getConstructor());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  n.getConstructor());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  n.getConstructor());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
336	[BUG]  [BUGGY]  c.inline(defCfgNode,  c.getConstructor());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  c.getConstructor());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  c.getConstructor());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
337	[BUG]  [BUGGY]  c.inline(useCfgNode,  t.getConstructor());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  t.getConstructor());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  t.getConstructor());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
338	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getScope());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getScope());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getScope());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
339	[BUG]  [BUGGY]  CfgUtil.inlinePath(c.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  CfgUtil.inlinePath(c.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	CfgUtil.inlinePath(c.getScopeRoot().getLastChild());	  c.inlinePath(t.getScopeRoot().getLastChild()    +    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
340	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getLastChild());	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
341	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  c.getScopeRoot());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  c.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  c.getScopeRoot());	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
342	[BUG]  [BUGGY]  c.inline(defCfgNode,  n,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  n,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  n,  t.getScopeRoot());	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
343	[BUG]  [BUGGY]  reachingUses.inline(c,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.inline(c,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.inline(c,  numUseWithinUseCfgNode);	  reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
344	[BUG]  [BUGGY]  reachingUses.inline(cfg,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.inline(cfg,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.inline(cfg,  numUseWithinUseCfgNode);	  reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
345	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot().getLastChild(),  reachingUses,  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot().getLastChild(),  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getScopeRoot().getLastChild(),  reachingUses,  c);	  c.inline(defCfgNode,    t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
346	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot().getNext(),  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot().getNext(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getScopeRoot().getNext(),  reachingUses);	  c.inline(defCfgNode,    t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
347	[BUG]  [BUGGY]  c.inline(candidate,  reachingUses,  cfg);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  reachingUses,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  reachingUses,  cfg);	  c.inline(candidate,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
348	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot().getNext());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot().getNext());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c.getScopeRoot().getNext());	  c.inlinePath(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
349	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot().getLastChild()  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot().getLastChild()  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c.getScopeRoot().getLastChild()  +  1);	  c.inlinePath(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
350	[BUG]  [BUGGY]  c.inline(defCfgNode,  n.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  n.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  n.getScopeRoot().getFirstChild());	  c.inline(defCfgNode,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
351	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot(),  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot(),  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot(),  c);	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
352	[BUG]  [BUGGY]  c.inlineChild(cfg,  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  def);	  c.inlineChild(cfg);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
353	[BUG]  [BUGGY]  c.inlineChild(cfg,  startingDepth);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  startingDepth);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  startingDepth);	  c.inlineChild(cfg);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
354	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
355	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  cfg.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
356	[BUG]  [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  numUseWithinUseCfgNode,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  numUseWithinUseCfgNode,  t.getModule());	  c.inlineChild(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
357	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  t.getModule());	  c.inlineChild(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
358	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  usingCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  usingCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  usingCfgNode);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
359	[BUG]  [BUGGY]  c.inlineChild(c,  startingDef,  compiler);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingDef,  compiler);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingDef,  compiler);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
360	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  mappingDef);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  mappingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  mappingDef);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
361	[BUG]  [BUGGY]  c.inlineCfgNode(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCfgNode(c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCfgNode(c,  reachingUses);	  c.inlineInline(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
362	[BUG]  [BUGGY]  c.inlineChild(cfg,  arrivingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  arrivingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  arrivingUses);	  c.inlineChild(c,    arrivingUses);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
363	[BUG]  [BUGGY]  c.inlineChild(c,  startingUses,  reachingDef);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  startingUses,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  startingUses,  reachingDef);	  c.inlineChild(c,    arrivingUses);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
364	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);	  c.inlineChild(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
365	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  this);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  this);	  c.inlineChild(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
366	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  def);	  c.inlineChild(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
367	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  new  MustBeReachingVariableDef());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  new  MustBeReachingVariableDef());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  new  MustBeReachingVariableDef());	  c.inlineChild(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
368	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  null,  reachingDef);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  null,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  null,  reachingDef);	  c.inlineChild(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
369	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  null);	  c.inline(defCfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
370	[BUG]  [BUGGY]  c.getScopeRoot().removeChild(c);  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.getScopeRoot().removeChild(c);  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.getScopeRoot().removeChild(c);  reachingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
371	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(c);  reachingUses.canInline();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().removeChild(c);  reachingUses.canInline();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().removeChild(c);  reachingUses.canInline();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
372	[BUG]  [BUGGY]  t.getScopeRoot().inlineChild(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().inlineChild(c,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().inlineChild(c,  reachingUses);	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
373	[BUG]  [BUGGY]  c.inline(def,  t.getCurrentNode());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getCurrentNode());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getCurrentNode());	  c.inline(def,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	45	None	replace
374	[BUG]  [BUGGY]  c.inline(defCfgNode,  cfg);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  cfg);	  c.inline(def,    cfg);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
375	[BUG]  [BUGGY]  c.inline(def,  cfg,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  cfg,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  cfg,  reachingUses);	  c.inline(def,    cfg);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
376	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  c);	  c.inline(defCfgNode,    t.getScopeRoot(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
377	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  numUseWithinUseCfgNode);	  c.inline(defCfgNode,    t.getScopeRoot(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
378	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  compiler);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  compiler);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getScopeRoot(),  reachingUses,  compiler);	  c.inline(defCfgNode,    t.getScopeRoot(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
379	[BUG]  [BUGGY]  c.inline(candidate,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  n);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
380	[BUG]  [BUGGY]  c.inline(candidate,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  numUseWithinUseCfgNode);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
381	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  numUseWithinUseCfgNode,  reachingDef);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
382	[BUG]  [BUGGY]  c.inlineCandidate(c,  defCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  defCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  defCfgNode,  reachingUses);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
383	[BUG]  [BUGGY]  c.inlinePath(candidates);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(candidates);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(candidates);	  c.inlinePath(n);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
384	[BUG]  [BUGGY]  c.inlinePath(defCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(defCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(defCfgNode);	  c.inlinePath(n);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
385	[BUG]  [BUGGY]  c.inline(useCfgNode,  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  c);	  c.inline(c,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
386	[BUG]  [BUGGY]  c.inline(use,  cfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(use,  cfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(use,  cfgNode);	  c.inline(c,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
387	[BUG]  [BUGGY]  t.getScopeRoot().addChildrenToFront(c);  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().addChildrenToFront(c);  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().addChildrenToFront(c);  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
388	[BUG]  [BUGGY]  t.getScopeRoot().addChildToFront(c);  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().addChildToFront(c);  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().addChildToFront(c);  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
389	[BUG]  [BUGGY]  t.getScopeRoot().deleteChild(c);  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().deleteChild(c);  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().deleteChild(c);  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
390	[BUG]  [BUGGY]  c.inline(def,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  numUseWithinUseCfgNode,  reachingUses);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
391	[BUG]  [BUGGY]  c.inline(def,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  numUseWithinUseCfgNode  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  numUseWithinUseCfgNode  +  1);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
392	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  compiler);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  compiler);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  compiler);	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
393	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  null);	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
394	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  n);	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
395	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  n);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
396	[BUG]  [BUGGY]  c.inline(c,  defCfgNode,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  defCfgNode,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  defCfgNode,  t.getScopeRoot());	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
397	[BUG]  [BUGGY]  c.inline(n,  t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  t.getScopeRoot().getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  t.getScopeRoot().getFirstChild());	  c.inline(defNode,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	19	None	replace
398	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  true);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  true);	  c.inlineChild(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
399	[BUG]  [BUGGY]  c.inlineChild(c,  spreadingUses,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  spreadingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  spreadingUses,  false);	  c.inlineChild(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
400	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses).analyze();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses).analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses).analyze();	  c.inlinePath(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
401	[BUG]  [BUGGY]  c.inline(c,  t.getCurrentNode());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getCurrentNode());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  t.getCurrentNode());	  c.inline(c,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
402	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
403	[BUG]  [BUGGY]  c.inline(c,  spreadingUses,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  spreadingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  spreadingUses,  false);	  c.inline(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
404	[BUG]  [BUGGY]  c.inline(defCfgNode,  n.getLastChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  n.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  n.getLastChild());	  c.inline(defCfgNode,    t.getLastChild());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
405	[BUG]  [BUGGY]  c.inline(n,  t.getLastChild());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  t.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  t.getLastChild());	  c.inline(defCfgNode,    t.getLastChild());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
406	[BUG]  [BUGGY]  reachingUses.remove();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.remove();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.remove();	  reachingUses.inline();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
407	[BUG]  [BUGGY]  c.inline(useCfgNode,  cfg);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  cfg);	  c.inline(def,    cfg);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
408	[BUG]  [BUGGY]  c.inline(def,  defCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  defCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  defCfgNode);	  c.inline(def,    cfg);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
409	[BUG]  [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(cfg,  reachingUses,  c);	  c.inlineCandidate(c,    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
410	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  c);	  c.inlineCandidate(c,    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
411	[BUG]  [BUGGY]  c.inlineChild(defCfgNode,  c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(defCfgNode,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(defCfgNode,  c);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
412	[BUG]  [BUGGY]  c.inlineChild(c,  defNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  defNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  defNode,  reachingUses);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
413	[BUG]  [BUGGY]  c.inlineChild(defCfgNode,  n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(defCfgNode,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(defCfgNode,  n);	  c.inlineChild(c,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
414	[BUG]  [BUGGY]  t.getScopeRoot().detachFromLastChild();  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachFromLastChild();  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachFromLastChild();  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
415	[BUG]  [BUGGY]  t.getScopeRoot().detachChild(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachChild(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachChild(c);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
416	[BUG]  [BUGGY]  t.getScopeRoot().clearChild(c);  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().clearChild(c);  reachingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().clearChild(c);  reachingUses.add(c);	  t.getScopeRoot().removeChild(c);    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
417	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c));  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  c));	  c.inlinePath(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  ';'  expected	5	None	replace
418	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot().getLastChild(),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot().getLastChild(),  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(c.getScopeRoot().getLastChild(),  t.getScopeRoot());	  c.inlinePath(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
419	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot(),  c.getLastChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot(),  c.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot(),  c.getLastChild());	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
420	[BUG]  [BUGGY]  c.inlineChild(t,  c));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  c));  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  c));	  c.inlineChild(t,    c);    	non-compiled	[CE]  ';'  expected	2	None	replace
421	[BUG]  [BUGGY]  c.inline(defCfgNode,  n,  usingCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  n,  usingCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  n,  usingCfgNode);	  c.inline(defCfgNode,    n);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
422	[BUG]  [BUGGY]  c.inline(false,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(false,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(false,  reachingUses,  t.getModule());	  c.inline(false,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
423	[BUG]  [BUGGY]  c.inline(null,  reachingUses);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(null,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(null,  reachingUses);	  c.inline(false,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
424	[BUG]  [BUGGY]  c.inline(defNode,  numUseWithinCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  numUseWithinCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  numUseWithinCfgNode,  reachingUses);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
425	[BUG]  [BUGGY]  c.inline(useCfgNode,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  numUseWithinCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  numUseWithinCfgNode);	  c.inline(defCfgNode,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
426	[BUG]  [BUGGY]  c.inline(n,  t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(n,  t.getScopeRoot().getLastChild());	  c.inline(c,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
427	[BUG]  [BUGGY]  c.inline(cfg,  t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  t.getScopeRoot().getLastChild());	  c.inline(c,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
428	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getDeclaration());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getDeclaration());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getDeclaration());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
429	[BUG]  [BUGGY]  c.inline(defCfgNode,  t.getCompiler());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  t.getCompiler());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  t.getCompiler());	  c.inline(defCfgNode,    t.getConstructor());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
430	[BUG]  [BUGGY]  leadingUses.clear();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  leadingUses.clear();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	leadingUses.clear();	  leadingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
431	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScopeRoot().removeChild(c);  reachingUses.analyze();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  t.getScopeRoot().removeChild(c);  reachingUses.analyze();  }  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	if(c.canInline())  {  t.getScopeRoot().removeChild(c);  reachingUses.analyze();  }	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
432	[BUG]  [BUGGY]  t.getScopeRoot().detachChild(c);  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachChild(c);  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachChild(c);  reachingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
433	[BUG]  [BUGGY]  t.getScopeRoot().detachFromParent();  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachFromParent();  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachFromParent();  reachingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
434	[BUG]  [BUGGY]  t.getScopeRoot().detachFromLastChild();  reachingUses.analyze();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachFromLastChild();  reachingUses.analyze();  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachFromLastChild();  reachingUses.analyze();	  t.getScopeRoot().removeChild(c);    reachingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
435	[BUG]  [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(cfg,  reachingUses,  numUseWithinUseCfgNode);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
436	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  useCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  useCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  useCfgNode);	  c.inlineCandidate(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
437	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getModule());	  c.inline(defCfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
438	[BUG]  [BUGGY]  c.inline(defCfgNode,  useCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  useCfgNode,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  useCfgNode,  reachingUses);	  c.inline(defCfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
439	[BUG]  [BUGGY]  c.inline(reachingUses,  candidate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(reachingUses,  candidate);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(reachingUses,  candidate);	  c.inline(candidate,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
440	[BUG]  [BUGGY]  c.inline(c,  def,  reachingUses,  null);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  def,  reachingUses,  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  def,  reachingUses,  null);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
441	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  spreadingDef);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  spreadingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  spreadingDef);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
442	[BUG]  [BUGGY]  c.inline(def,  cfgNode,  null);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  cfgNode,  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  cfgNode,  null);	  c.inline(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
443	[BUG]  [BUGGY]  c.inline(candidate,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(candidate,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(candidate,  t.getScopeRoot());	  c.inline(candidate);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
444	[BUG]  [BUGGY]  c.inline(t,  reachingUses,  c.getScopeRoot());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t,  reachingUses,  c.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t,  reachingUses,  c.getScopeRoot());	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
445	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  reachingDef);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  reachingDef);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
446	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  startingDef);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  startingDef);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
447	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getCurrentNode());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getCurrentNode());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getCurrentNode());	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
448	[BUG]  [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  null);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  reachingUses,  t.getScopeRoot(),  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c,  reachingUses,  t.getScopeRoot(),  null);	  c.inline(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
449	[BUG]  [BUGGY]  c.inlineChild(cfg,  n,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  n,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  n,  reachingUses);	  c.inlineChild(c,    reachingUses,    n);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
450	[BUG]  [BUGGY]  c.inlineChild(t,  n,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  n,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  n,  reachingUses);	  c.inlineChild(c,    reachingUses,    n);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
451	[BUG]  [BUGGY]  c.inline(def,  t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getScopeRoot().getFirstChild(),  reachingUses);	  c.inline(defCfgNode,    t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
452	[BUG]  [BUGGY]  c.inlineChild(c,  droppingUses,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  droppingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  droppingUses,  false);	  c.inlineChild(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
453	[BUG]  [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  t.getScopeRoot());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(cfg,  reachingUses,  t.getScopeRoot());	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
454	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  reachingUses);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
455	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  reachingDef);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  reachingDef);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
456	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getCurrentNode());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getCurrentNode());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getCurrentNode());	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
457	[BUG]  [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  startingDef);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(c,  reachingUses,  t.getScopeRoot(),  startingDef);	  c.inlineCandidate(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
458	[BUG]  [BUGGY]  c.inlineChild(cfg,  startingDef);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  startingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  startingDef);	  c.inlineChild(cfg);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
459	[BUG]  [BUGGY]  c.inlineChild(cfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfgNode);	  c.inlineChild(cfg);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
460	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  null,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  null,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  null,  reachingUses);	  c.inlineChild(c,    reachingUses,    null);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
461	[BUG]  [BUGGY]  vingUses.push(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  vingUses.push(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	vingUses.push(c);	  vingUses.analyze();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
462	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t,  cfg);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t,  cfg);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
463	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t,  c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t,  c);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
464	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  t);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  t);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  t);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
465	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t,  null);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t,  null);	  c.inlineChild(c,    reachingUses,    t);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
466	[BUG]  [BUGGY]  c.inline(def,  t.getScopeRoot().getLastChild()  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  t.getScopeRoot().getLastChild()  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  t.getScopeRoot().getLastChild()  +  1);	  c.inline(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
467	[BUG]  [BUGGY]  c.inlineCfgNode(def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCfgNode(def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCfgNode(def);	  c.inlineCfgNode();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
468	[BUG]  [BUGGY]  c.inline(peekNode(),  reachingUses,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(peekNode(),  reachingUses,  true);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(peekNode(),  reachingUses,  true);	  c.inline(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
469	[BUG]  [BUGGY]  c.inline(t,  reachingUses,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t,  reachingUses,  true);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t,  reachingUses,  true);	  c.inline(c,    reachingUses,    true);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
470	[BUG]  [BUGGY]  c.inline(peekNode(),  reachingUses,  false);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(peekNode(),  reachingUses,  false);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(peekNode(),  reachingUses,  false);	  c.inline(c,    reachingUses,    false);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
471	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  tfa.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  tfa.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  tfa.getModule());	  c.inlineChild(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
472	[BUG]  [BUGGY]  c.inline(cfg,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(cfg,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(cfg,  reachingUses,  t.getModule());	  c.inline(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
473	[BUG]  [BUGGY]  c.inline(useCfgNode,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  numUseWithinUseCfgNode);	  c.inline(def,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
474	[BUG]  [BUGGY]  c.inlineChild(cfgNode,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfgNode,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfgNode,  reachingUses,  numUseWithinUseCfgNode);	  c.inlineChild(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
475	[BUG]  [BUGGY]  c.inlinePath(def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(def);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(def);	  c.inlinePath(n);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
476	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  clearingDef);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  clearingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  clearingDef);	  c.inlineChild(c,    reachingUses,    compiler);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
477	[BUG]  [BUGGY]  reachingUses.addLast(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  reachingUses.addLast(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	reachingUses.addLast(c);	  reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
478	[BUG]  [BUGGY]  c.inline(c.getScopeRoot(),  t.getLastChild());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.getScopeRoot(),  t.getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(c.getScopeRoot(),  t.getLastChild());	  c.inline(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
479	[BUG]  [BUGGY]  c.inline(t.getScopeRoot(),  c.getFirstChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot(),  c.getFirstChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t.getScopeRoot(),  c.getFirstChild());	  c.inline(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
480	[BUG]  [BUGGY]  c.inline(t,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(t,  reachingUses,  numUseWithinUseCfgNode);	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
481	[BUG]  [BUGGY]  c.inline(peekNode,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(peekNode,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(peekNode,  reachingUses,  numUseWithinUseCfgNode);	  c.inline(c,    reachingUses,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
482	[BUG]  [BUGGY]  hittingUses.add(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  hittingUses.add(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	hittingUses.add(c);	  c    =    c.getScopeRoot();    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
483	[BUG]  [BUGGY]  c.inlinePath(t,  cfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t,  cfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t,  cfgNode);	  c.inlinePath(t,    c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
484	[BUG]  [BUGGY]  c.inlineFunction(t,  c);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineFunction(t,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineFunction(t,  c);	  c.inlinePath(t,    c);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
485	[BUG]  [BUGGY]  c.inline(mappingUses,  c);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(mappingUses,  c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(mappingUses,  c);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
486	[BUG]  [BUGGY]  c.inline(deserialize(c),  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(deserialize(c),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(deserialize(c),  reachingUses);	  c.inline(    reachingUses,    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
487	[BUG]  [BUGGY]  c.inline(defNode,  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  n);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  n);	  c.inline(defCfgNode,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
488	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses,  cfg);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses,  cfg);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  reachingUses,  cfg);	  c.inlinePath(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
489	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  cfg.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  cfg.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  cfg.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
490	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getParent());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getParent());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getParent());	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
491	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  reachingDef);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  reachingDef);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(c,  reachingUses,  t.getScopeRoot(),  reachingDef);	  c.inlineChild(c,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
492	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getScopeRoot(),  reachingUses);	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
493	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getParent());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getParent());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getParent());	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
494	[BUG]  [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getDeclaration());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  reachingUses,  t.getDeclaration());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  reachingUses,  t.getDeclaration());	  c.inline(defCfgNode,    reachingUses,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
495	[BUG]  [BUGGY]  c.inlinePath(cfg,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(cfg,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlinePath(cfg,  reachingUses);	  c.inlinePath(c,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
496	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  t.getDeepestCfgNode());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  t.getDeepestCfgNode());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  t.getDeepestCfgNode());	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
497	[BUG]  [BUGGY]  c.inlineChild(t,  cfg,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  cfg,  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(t,  cfg,  reachingUses);	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
498	[BUG]  [BUGGY]  c.inlineChild(cfg,  reachingUses,  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(cfg,  reachingUses,  c.useCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineChild(cfg,  reachingUses,  c.useCfgNode);	  c.inlineChild(cfg,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
499	[BUG]  [BUGGY]  c.inline(defCfgNode,  use);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  use);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  use);	  c.inline(c,    useCfgNode);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
500	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c).traverse(  t.getScopeRoot().getLastChild()  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c).traverse(  t.getScopeRoot().getLastChild()  +  1);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c).traverse(  t.getScopeRoot().getLastChild()  +  1);	  new    NodeTraversal(compiler,    c).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
501	[BUG]  [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  cfgNode,  reachingUses,  t.getModule());	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
502	[BUG]  [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  usingCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  cfgNode,  reachingUses,  usingCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(def,  cfgNode,  reachingUses,  usingCfgNode);	  c.inline(def,    cfgNode,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
503	[BUG]  [BUGGY]  c.inline(defCfgNode,  candidates);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defCfgNode,  candidates);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defCfgNode,  candidates);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
504	[BUG]  [BUGGY]  c.inline(defNode,  defCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(defNode,  defCfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(defNode,  defCfgNode);	  c.inline(candidate,    defCfgNode);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
505	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c.getScopeRoot()).traverse(  t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c.getScopeRoot()).traverse(  t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c.getScopeRoot()).traverse(  t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    c.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
506	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  c.getDeepestCfgNode()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  new  NodeTraversal(compiler,  c.getDeepestCfgNode()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	new  NodeTraversal(compiler,  c.getDeepestCfgNode()).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    c.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
507	[BUG]  [BUGGY]  c.inline(useCfgNode,  cfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(useCfgNode,  cfgNode);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(useCfgNode,  cfgNode);	  c.inline(def,    cfgNode);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
508	[BUG]  [BUGGY]  t.getScopeRoot().detachFromLastChild();  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachFromLastChild();  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachFromLastChild();  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
509	[BUG]  [BUGGY]  t.getScopeRoot().detachChild(c);  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().detachChild(c);  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().detachChild(c);  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
510	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(c)-  1;  reachingUses.addAll(c);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  t.getScopeRoot().removeChild(c)-  1;  reachingUses.addAll(c);  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	t.getScopeRoot().removeChild(c)-  1;  reachingUses.addAll(c);	  t.getScopeRoot().removeChild(c);    reachingUses.addAll(c);    	non-compiled	[CE]  not  a  statement	88	None	replace
511	[BUG]  [BUGGY]  CfgUtil.inlinePath(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  CfgUtil.inlinePath(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	CfgUtil.inlinePath(t.getScopeRoot().getLastChild());	  c.inlinePath(t.getScopeRoot().getLastChild()    +    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
512	[BUG]  [BUGGY]  Cfg.inlinePath(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Cfg.inlinePath(t.getScopeRoot().getLastChild());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	Cfg.inlinePath(t.getScopeRoot().getLastChild());	  c.inlinePath(t.getScopeRoot().getLastChild()    +    1);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
513	[BUG]  [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCandidate(cfg,  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inlineCandidate(cfg,  reachingUses,  t.getModule());	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
514	[BUG]  [BUGGY]  c.inline(  reachingUses,  t.getModule());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(  reachingUses,  t.getModule());  [BUGGY]      }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3611575592573076	147	147	3	replace	c.inline(  reachingUses,  t.getModule());	  c.inlineCandidate(c,    reachingUses,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
