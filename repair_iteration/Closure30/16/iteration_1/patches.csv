bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  Node  cur  =  p.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getNext();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Node  cur  =  p.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  Node  cur  =  p.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getLastChild();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Node  cur  =  p.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  Node  cur  =  p.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getFirstChild();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Node  cur  =  p.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  Predicate  cur  =  p.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  cur  =  p.getNext();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Predicate  cur  =  p.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  Node  cur  =  p.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getParent();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Node  cur  =  p.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  Predicate  cur  =  p.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  cur  =  p.getParent();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Predicate  cur  =  p.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  Predicate  cur  =  p.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  cur  =  p.getFirstChild();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Predicate  cur  =  p.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  For(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  For(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  For(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  For(Node  cur  =  p.getNext();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  p.getNext();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  p.getNext();  cur  ==  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  For(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  for(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getParent();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  for(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getParent();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  for(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  cur  =  new  FlowSensitiveInlineVariables(p.getParent(),  predicate);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  FlowSensitiveInlineVariables  cur  =  new  FlowSensitiveInlineVariables(p.getParent(),  predicate);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	FlowSensitiveInlineVariables  cur  =  new  FlowSensitiveInlineVariables(p.getParent(),  predicate);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  cur  =  new  FlowSensitiveInlineVariables(p.getParent());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  FlowSensitiveInlineVariables  cur  =  new  FlowSensitiveInlineVariables(p.getParent());  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	FlowSensitiveInlineVariables  cur  =  new  FlowSensitiveInlineVariables(p.getParent());	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  Node  cur  =  p.getLastChild();  Predicate  <  Node>  cur  =  p.getParent();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getLastChild();  Predicate  <  Node>  cur  =  p.getParent();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Node  cur  =  p.getLastChild();  Predicate  <  Node>  cur  =  p.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  Node  cur  =  p.getLastChild();  Predicate  <  Node>  cur  =  predicate.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getLastChild();  Predicate  <  Node>  cur  =  predicate.getParent();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	Node  cur  =  p.getLastChild();  Predicate  <  Node>  cur  =  predicate.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  For(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getParent();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	463	463	3	replace	for(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
