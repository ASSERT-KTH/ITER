bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {	  if(!_parsingContext.inObject()    &&    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(!_parsingContext.inObject()  &&  i  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(!_parsingContext.inObject()  &&  i  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(!_parsingContext.inObject()  &&  i  ==  JsonToken.FIELD_NAME)  {	  if(!_parsingContext.inObject()    &&    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  &&  _parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  &&  _parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  &&  _parsingContext.inObject())  {	  if(i!=    INT_COMMA    &&    _parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
4	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  ||  i!=  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  ||  i!=  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  ||  i!=  INT_QUOTE)  {	  if(i!=    INT_COMMA    &&    _parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
5	[BUG]  [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||  _parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||  _parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.FIELD_NAME  ||  _parsingContext.inObject())  {	  if(_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||  _parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||  _parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.FIELD_NAME  ||  _parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {	  if(_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
7	[BUG]  [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||  _parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||  _parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.FIELD_NAME  ||  _parsingContext.inObject())  {	  if(_parsingContext.inObject()    ||    i    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
8	[BUG]  [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||  _parsingContext.inObject()  ||  i  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||  _parsingContext.inObject()  ||  i  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.FIELD_NAME  ||  _parsingContext.inObject()  ||  i  ==  JsonToken.FIELD_NAME)  {	  if(_parsingContext.inObject()    ||    i    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  i  =  _skipWords();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  i  =  _skipWords();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	i  =  _skipWords();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
10	[BUG]  [BUGGY]  i  =  _skipSegments();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  i  =  _skipSegments();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	i  =  _skipSegments();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
11	[BUG]  [BUGGY]  i  =  _skipSegment();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  i  =  _skipSegment();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	i  =  _skipSegment();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
12	[BUG]  [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  &&!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  &&!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.FIELD_NAME  &&!_parsingContext.inObject())  {	  if(i    ==    JsonToken.FIELD_NAME    ||!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
13	[BUG]  [BUGGY]  if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject())  {	  if(i    ==    JsonToken.FIELD_NAME    ||!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
14	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    &&(i    ==    INT_COMMA    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
15	[BUG]  [BUGGY]  if(_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    &&(i    ==    INT_COMMA    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
16	[BUG]  [BUGGY]  if(i  ==  INT_QUOTE  ||  i!=  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  INT_QUOTE  ||  i!=  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  INT_QUOTE  ||  i!=  INT_QUOTE)  {	  if(i    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
17	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  ||  i  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  ||  i  ==  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  ||  i  ==  INT_QUOTE)  {	  if(i    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
18	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {	  if(!_parsingContext.inObject()    ||    i!=    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(i  ==  JsonToken.START_OBJECT  ||!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.START_OBJECT  ||!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.START_OBJECT  ||!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {	  if(i    ==    JsonToken.FIELD_NAME    ||!_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {	  if(i    ==    JsonToken.FIELD_NAME    ||!_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  if(i  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.VALUE_NULL)  {	  if(i!=    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
22	[BUG]  [BUGGY]  if(i!=  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.VALUE_NULL)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.VALUE_NULL)  {	  if(i!=    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
23	[BUG]  [BUGGY]  if(i  ==  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.VALUE_NULL)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.VALUE_NULL)  {	  if(i!=    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
24	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_OBJECT))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_OBJECT))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_OBJECT))  {	  if    (!_parsingContext.inObject()    ||(i!=    INT_COMMA    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
25	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    ||(i!=    INT_COMMA    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
26	[BUG]  [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  ||  i  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  ||  i  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  ||  i  ==  JsonToken.FIELD_NAME)  {	  if(i!=    JsonToken.FIELD_NAME    ||!_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  if(i!=  JsonToken.START_OBJECT  ||!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.START_OBJECT  ||!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.START_OBJECT  ||!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {	  if(i!=    JsonToken.FIELD_NAME    ||!_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  if(i  ==  INT_QUOTE  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  INT_QUOTE  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  INT_QUOTE  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {	  if(!_parsingContext.inObject()    ||    i    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
29	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  &&!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  &&!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  &&!_parsingContext.inObject())  {	  if(i!=    INT_COMMA    &&!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  if(i  ==  INT_COMMA  &&!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  INT_COMMA  &&!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  INT_COMMA  &&!_parsingContext.inObject())  {	  if(i!=    INT_COMMA    &&!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.getCurrentName(i);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.getCurrentName(i);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.getCurrentName(i);	  JsonToken    t    =    _parsingContext.getCurrentName();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
32	[BUG]  [BUGGY]  JsonToken  t  =  i.getCurrentName();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  i.getCurrentName();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  i.getCurrentName();	  JsonToken    t    =    _parsingContext.getCurrentName();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
33	[BUG]  [BUGGY]  JsonToken  t  =  i.next();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  i.next();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  i.next();	  JsonToken    t    =    _parsingContext.getCurrentName();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
34	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
35	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(0,  0);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
36	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_QUOTE  ||  i  ==  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_QUOTE  ||  i  ==  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i  ==  INT_QUOTE  ||  i  ==  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    &&(i    ==    INT_QUOTE    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_COMMA  &&  i  ==  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_COMMA  &&  i  ==  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i!=  INT_COMMA  &&  i  ==  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    ||(i!=    INT_COMMA    ||    i    ==    INT_COMMA))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_COMMA))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_COMMA))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE  ||  i  ==  INT_COMMA))  {	  if    (!_parsingContext.inObject()    &&(i!=    INT_QUOTE    ||    i    ==    INT_COMMA))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
39	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  &&(i  ==  INT_QUOTE  ||  i  ==  INT_COMMA))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  &&(i  ==  INT_QUOTE  ||  i  ==  INT_COMMA))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  &&(i  ==  INT_QUOTE  ||  i  ==  INT_COMMA))  {	  if    (!_parsingContext.inObject()    &&(i!=    INT_QUOTE    ||    i    ==    INT_COMMA))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
40	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _currToken);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _currToken);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _currToken);	  JsonToken    t    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
41	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _cfg);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _cfg);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _cfg);	  JsonToken    t    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
42	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);	  JsonToken    t    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
43	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _nextTokenNotInObject);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _nextTokenNotInObject);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _nextTokenNotInObject);	  JsonToken    t    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
44	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  ||!_parsingContext.inObject())  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
45	[BUG]  [BUGGY]  if(i  ==  INT_QUOTE  ||!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  INT_QUOTE  ||!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  INT_QUOTE  ||!_parsingContext.inObject())  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
46	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _currToken);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _currToken);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _currToken);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
47	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _nextTokenNotInObject);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _nextTokenNotInObject);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _nextTokenNotInObject);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
48	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
49	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  if(i!=  INT_COMMA  ||!_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_COMMA  ||!_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_COMMA  ||!_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if(i  ==  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  INT_QUOTE  ||!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
52	[BUG]  [BUGGY]  if(i!=  INT_COMMA  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_COMMA  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_COMMA  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  if(i!=  null  &&  i.inObject())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  null  &&  i.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  null  &&  i.inObject())  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  if(!i.inObject())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(!i.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(!i.inObject())  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  if(i.inObject()  ||(i.hasNext()  &&  i.hasNext()))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i.inObject()  ||(i.hasNext()  &&  i.hasNext()))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i.inObject()  ||(i.hasNext()  &&  i.hasNext()))  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_COMMA))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_COMMA))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i  ==  INT_COMMA  ||  i  ==  INT_COMMA))  {	  if    (!_parsingContext.inObject()    &&(i    ==    INT_COMMA    ||    i    ==    INT_COMMA))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
57	[BUG]  [BUGGY]  if(!_parsingContext.inObject()  ||  i  ==  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(!_parsingContext.inObject()  ||  i  ==  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(!_parsingContext.inObject()  ||  i  ==  INT_COMMA)  {	  if(!_parsingContext.inObject()    &&    i    ==    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
58	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_QUOTE  ||  i!=  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i  ==  INT_QUOTE  ||  i!=  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i  ==  INT_QUOTE  ||  i!=  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    &&(i    ==    INT_QUOTE    ||    i!=    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
59	[BUG]  [BUGGY]  if(i!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.VALUE_NUMBER_INT)  {	  if(i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
60	[BUG]  [BUGGY]  _parsingContext  =  i.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  i.createChildObjectContext();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  i.createChildObjectContext();	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  if(i!=  INT_COMMA  ||  _parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_COMMA  ||  _parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_COMMA  ||  _parsingContext.inObject()  ||  i!=  INT_COMMA)  {	  if(_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
62	[BUG]  [BUGGY]  if(i!=  INT_COMMA  ||  _parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_COMMA  ||  _parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_COMMA  ||  _parsingContext.inObject())  {	  if(_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
63	[BUG]  [BUGGY]  if(i.inObject()  ||  i!=  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i.inObject()  ||  i!=  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i.inObject()  ||  i!=  INT_COMMA)  {	  if(_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
64	[BUG]  [BUGGY]  if(_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(_parsingContext.inObject()  ||  i!=  INT_QUOTE)  {	  if(_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
65	[BUG]  [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE)&&(i!=  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE)&&(i!=  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if  (!_parsingContext.inObject()  ||(i!=  INT_QUOTE)&&(i!=  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    ||(i!=    INT_COMMA    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  if(i!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.START_OBJECT)  {	  if(i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
67	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
68	[BUG]  [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {	  if(i!=    JsonToken.FIELD_NAME    ||!_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
69	[BUG]  [BUGGY]  if(_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(_parsingContext.inObject()  &&  i!=  JsonToken.FIELD_NAME)  {	  if(_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  if(i.inObject()  &&  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i.inObject()  &&  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i.inObject()  &&  _currToken!=  JsonToken.FIELD_NAME)  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
71	[BUG]  [BUGGY]  if(i!=  null  &&!i.inObject())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  null  &&!i.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  null  &&!i.inObject())  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
72	[BUG]  [BUGGY]  if(i!=  JsonToken.START_OBJECT  ||  i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.START_OBJECT  ||  i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.START_OBJECT  ||  i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {	  if(i!=    JsonToken.FIELD_NAME    ||!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
73	[BUG]  [BUGGY]  if(i!=  JsonToken.VALUE_EMBEDDED_OBJECT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.VALUE_EMBEDDED_OBJECT)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.VALUE_EMBEDDED_OBJECT)  {	  if(i!=    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
74	[BUG]  [BUGGY]  if(i  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.START_OBJECT)  {	  if(i    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
75	[BUG]  [BUGGY]  if(_parsingContext.inObject()  &&  i  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(_parsingContext.inObject()  &&  i  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(_parsingContext.inObject()  &&  i  ==  JsonToken.FIELD_NAME)  {	  if(_parsingContext.inObject()    ||    i    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  if(_parsingContext.inObject()  &&  i!=  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(_parsingContext.inObject()  &&  i!=  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(_parsingContext.inObject()  &&  i!=  INT_COMMA)  {	  if(_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
77	[BUG]  [BUGGY]  if(_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {	  if(_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
78	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.nextToken();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.nextToken();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.nextToken();	  JsonToken    t    =    _parsingContext.getCurrentName();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectToken(i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectToken(i);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.createChildObjectToken(i);	  JsonToken    t    =    _parsingContext.getCurrentName();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
80	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _typeFactory);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _typeFactory);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _typeFactory);	  JsonToken    t    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
81	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildArrayContext();	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
82	[BUG]  [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_QUOTE  ||!_parsingContext.inObject()  ||  i  ==  INT_QUOTE)  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
83	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeDesc);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeDesc);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeDesc);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
84	[BUG]  [BUGGY]  i  =  _skipComment();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  i  =  _skipComment();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	i  =  _skipComment();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
85	[BUG]  [BUGGY]  if(i!=  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.VALUE_NULL)  {	  if(i!=    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
86	[BUG]  [BUGGY]  if(i!=  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.START_OBJECT)  {	  if(i!=    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
87	[BUG]  [BUGGY]  if(i!=  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.VALUE_NUMBER_INT  ||  i!=  JsonToken.FIELD_NAME)  {	  if(i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
88	[BUG]  [BUGGY]  if(i  ==  INT_QUOTE  ||  i  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  INT_QUOTE  ||  i  ==  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  INT_QUOTE  ||  i  ==  INT_QUOTE)  {	  if(i    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  if(!_parsingContext.inObject()  &&  i  <  =  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(!_parsingContext.inObject()  &&  i  <  =  INT_QUOTE)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(!_parsingContext.inObject()  &&  i  <  =  INT_QUOTE)  {	  if(!_parsingContext.inObject()    &&    i    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
90	[BUG]  [BUGGY]  if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.FIELD_NAME  &&!_parsingContext.inObject()  ||  i!=  JsonToken.FIELD_NAME)  {	  if(i!=    JsonToken.FIELD_NAME    ||!_parsingContext.inObject()    ||    i!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
91	[BUG]  [BUGGY]  if(i!=  INT_COMMA  &&!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_COMMA  &&!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_COMMA  &&!_parsingContext.inObject()  ||  i!=  INT_COMMA)  {	  if(i!=    INT_COMMA    ||!_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
92	[BUG]  [BUGGY]  if(i!=  JsonToken.VALUE_NULL  ||  i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  JsonToken.VALUE_NULL  ||  i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  JsonToken.VALUE_NULL  ||  i!=  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {	  if(i!=    JsonToken.FIELD_NAME    ||!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
93	[BUG]  [BUGGY]  if(i  ==  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.VALUE_NULL  ||  i  ==  JsonToken.FIELD_NAME  ||!_parsingContext.inObject())  {	  if(i    ==    JsonToken.FIELD_NAME    ||!_parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
94	[BUG]  [BUGGY]  if(!_parsingContext.inObject()  ||(i!=  INT_QUOTE  &&  i  <  =  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(!_parsingContext.inObject()  ||(i!=  INT_QUOTE  &&  i  <  =  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(!_parsingContext.inObject()  ||(i!=  INT_QUOTE  &&  i  <  =  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    ||(i!=    INT_COMMA    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  if(!_parsingContext.inObject()  ||(i!=  INT_QUOTE  &&  i!=  INT_QUOTE))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(!_parsingContext.inObject()  ||(i!=  INT_QUOTE  &&  i!=  INT_QUOTE))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(!_parsingContext.inObject()  ||(i!=  INT_QUOTE  &&  i!=  INT_QUOTE))  {	  if    (!_parsingContext.inObject()    ||(i!=    INT_COMMA    ||    i    ==    INT_QUOTE))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
96	[BUG]  [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _objectCodec);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _objectCodec);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	JsonToken  t  =  _parsingContext.createChildObjectContext(i,  _objectCodec);	  JsonToken    t    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
97	[BUG]  [BUGGY]  if(i!=  INT_COMMA  &&  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_COMMA  &&  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_COMMA  &&  _currToken!=  JsonToken.FIELD_NAME)  {	  if(i!=    INT_COMMA    &&    _parsingContext.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
98	[BUG]  [BUGGY]  if(i!=  INT_COMMA  &&!_parsingContext.inObject()  &&  i  ==  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i!=  INT_COMMA  &&!_parsingContext.inObject()  &&  i  ==  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i!=  INT_COMMA  &&!_parsingContext.inObject()  &&  i  ==  INT_COMMA)  {	  if(!_parsingContext.inObject()    &&    i    ==    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
99	[BUG]  [BUGGY]  if(i  ==  INT_COMMA  ||  _parsingContext.inObject())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  INT_COMMA  ||  _parsingContext.inObject())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  INT_COMMA  ||  _parsingContext.inObject())  {	  if(_parsingContext.inObject()    ||    i!=    INT_COMMA)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
100	[BUG]  [BUGGY]  if(i.hasNext())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i.hasNext())  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i.hasNext())  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
101	[BUG]  [BUGGY]  if(i.inObject()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i.inObject()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i.inObject()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  if(i.inObject()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i.inObject()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i.inObject()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(i.inObject())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
103	[BUG]  [BUGGY]  i  =  _parsingContext.getTypeDesc();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  i  =  _parsingContext.getTypeDesc();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	i  =  _parsingContext.getTypeDesc();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
104	[BUG]  [BUGGY]  i  =  _skipWord();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  i  =  _skipWord();  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	i  =  _skipWord();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
105	[BUG]  [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||  i  ==  INT_COMMA)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  if(i  ==  JsonToken.FIELD_NAME  ||  i  ==  INT_COMMA)  {  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	if(i  ==  JsonToken.FIELD_NAME  ||  i  ==  INT_COMMA)  {	  if(i    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
106	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  -1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  -1);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
107	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _objectCodec);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _objectCodec);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _objectCodec);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
108	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeFactory);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (i  !=  INT_COMMA)  {  _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }          [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeFactory);  [BUGGY]      return  _nextTokenNotInObject(i);  }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	695	695	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeFactory);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
