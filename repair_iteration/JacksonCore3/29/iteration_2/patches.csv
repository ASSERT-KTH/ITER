bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  i.nextToken();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  i.nextToken();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  i.nextToken();	  return    _parsingContext.nextToken();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
2	[BUG]  [BUGGY]  return  _parsingContext.nextToken()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken()  +  1;  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken()  +  1;	  return    _parsingContext.nextToken();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
3	[BUG]  [BUGGY]  return  _parsingContext.getCurrentToken();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.getCurrentToken();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.getCurrentToken();	  return    _parsingContext.nextToken();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
4	[BUG]  [BUGGY]  _parsingContext.setCurrentName(i  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext.setCurrentName(i  +  1);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext.setCurrentName(i  +  1);	  _parsingContext.setCurrentName(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  _parsingContext.setCurrentName(n.getName());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext.setCurrentName(n.getName());  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext.setCurrentName(n.getName());	  _parsingContext.setCurrentName(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  i);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
7	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_STRING);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_STRING);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_STRING);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
8	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NUMBER_INT);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NUMBER_INT);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
9	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _currToken);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _currToken);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _inputPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _inputPtr);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _inputPtr);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _currToken);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _currToken);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
13	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
14	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
15	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_FLOAT);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_FLOAT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_FLOAT);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
16	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
17	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _bufferRecyclable);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
18	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _currToken);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _currToken);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
19	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  i);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
20	[BUG]  [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _currToken);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _currToken);	  return    _parsingContext.nextToken(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
21	[BUG]  [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _bufferRecyclable);	  return    _parsingContext.nextToken(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
22	[BUG]  [BUGGY]  return  _parsingContext.nextToken(jsonToken,  JsonToken.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(jsonToken,  JsonToken.FIELD_NAME);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(jsonToken,  JsonToken.FIELD_NAME);	  return    _parsingContext.nextToken(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
23	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _inputPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _inputPtr);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _inputPtr);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _skipWS);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _skipWS);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _skipWS);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _cfg);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _cfg);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _cfg);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  return  i.nextTokenNotInObject(JsonToken.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  i.nextTokenNotInObject(JsonToken.FIELD_NAME);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  i.nextTokenNotInObject(JsonToken.FIELD_NAME);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
30	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(0,  0);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
31	[BUG]  [BUGGY]  return  _nextToken(JsonToken.START_OBJECT,  i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.START_OBJECT,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.START_OBJECT,  i);	  return    _nextToken(JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
32	[BUG]  [BUGGY]  return  _nextToken(JsonToken.START_OBJECT,  _currToken);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.START_OBJECT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.START_OBJECT,  _currToken);	  return    _nextToken(JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
33	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  i);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  i);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
34	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
35	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _currToken);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _currToken);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _parsingContext.getTypeDesc());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _parsingContext.getTypeDesc());  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _parsingContext.getTypeDesc());	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
37	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _parsingContext.getCurrentName());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _parsingContext.getCurrentName());  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _parsingContext.getCurrentName());	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _parsingContext.getTypeDesc());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _parsingContext.getTypeDesc());  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _parsingContext.getTypeDesc());	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
39	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _parsingContext);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NUMBER_INT,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
40	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_NULL);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_NULL);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_NULL);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
41	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.inObject();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.inObject();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.inObject();	  _parsingContext    =    _parsingContext.getParent();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _currToken);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _currToken);	  return    _parsingContext.nextToken(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
43	[BUG]  [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _bufferRecyclable);	  return    _parsingContext.nextToken(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_OBJECT,  i);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_OBJECT,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.END_OBJECT,  i);	  return    _parsingContext.nextToken(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  return  _parsingContext.nextToken(jsonToken,  JsonToken.END_OBJECT);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(jsonToken,  JsonToken.END_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(jsonToken,  JsonToken.END_OBJECT);	  return    _parsingContext.nextToken(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _skipWS);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _skipWS);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _skipWS);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
47	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _inputPtr);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _inputPtr);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
48	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
49	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_OBJECT,  _currToken);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_OBJECT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.END_OBJECT,  _currToken);	  return    _parsingContext.nextToken(JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  i  =  _parsingContext.inArray();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  i  =  _parsingContext.inArray();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	i  =  _parsingContext.inArray();	  i    =    _parsingContext.inObject();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
51	[BUG]  [BUGGY]  i  =  _parsingContext.inObject()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  i  =  _parsingContext.inObject()  +  1;  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	i  =  _parsingContext.inObject()  +  1;	  i    =    _parsingContext.inObject();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
52	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  return  i.nextTokenNotInObject(JsonToken.END_OBJECT);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  i.nextTokenNotInObject(JsonToken.END_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  i.nextTokenNotInObject(JsonToken.END_OBJECT);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _cfg);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _cfg);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _cfg);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_STRING,  _currToken);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_STRING,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_STRING,  _currToken);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
57	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_STRING);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_STRING);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.VALUE_STRING);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
58	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.START_OBJECT,  i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.START_OBJECT,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.START_OBJECT,  i);	  return    _parsingContext.nextToken(JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
59	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.START_OBJECT,  _currToken);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.START_OBJECT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.START_OBJECT,  _currToken);	  return    _parsingContext.nextToken(JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
60	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _currToken);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _currToken);	  return    _nextTokenNotInObject(i,    JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
61	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.START_OBJECT);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.START_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.START_OBJECT);	  return    _nextTokenNotInObject(i,    JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
62	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _bufferRecyclable);	  return    _nextTokenNotInObject(i,    JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
63	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_ARRAY,  _currToken);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_ARRAY,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_ARRAY,  _currToken);	  return    _nextTokenNotInObject(i,    JsonToken.END_ARRAY);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
64	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_ARRAY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_ARRAY);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_ARRAY);	  return    _nextTokenNotInObject(i,    JsonToken.END_ARRAY);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
65	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _currToken);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _currToken);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _inputPtr);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _inputPtr);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _bufferRecyclable,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  _currToken,  i);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  _currToken,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.FIELD_NAME,  _currToken,  i);	  return    _nextToken(JsonToken.FIELD_NAME,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
69	[BUG]  [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  JsonToken.END_OBJECT);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  JsonToken.END_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.FIELD_NAME,  JsonToken.END_OBJECT);	  return    _nextToken(JsonToken.FIELD_NAME,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
70	[BUG]  [BUGGY]  i  =  _skipWords();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  i  =  _skipWords();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	i  =  _skipWords();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
71	[BUG]  [BUGGY]  i  =  _skipSegments();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  i  =  _skipSegments();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	i  =  _skipSegments();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
72	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _parsingContext.getTypeDesc());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _parsingContext.getTypeDesc());  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _parsingContext.getTypeDesc());	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _parsingContext.getCurrentName());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _parsingContext.getCurrentName());  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _parsingContext.getCurrentName());	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildArrayContext();	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.FIELD_NAME,  i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.FIELD_NAME,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.FIELD_NAME,  i);	  return    _parsingContext.nextToken(JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.FIELD_NAME,  _currToken);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.FIELD_NAME,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.FIELD_NAME,  _currToken);	  return    _parsingContext.nextToken(JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  return  i.nextToken(JsonToken.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  i.nextToken(JsonToken.FIELD_NAME);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  i.nextToken(JsonToken.FIELD_NAME);	  return    _parsingContext.nextToken(JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.VALUE_STRING,  i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.VALUE_STRING,  i);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.VALUE_STRING,  i);	  return    _parsingContext.nextToken(JsonToken.VALUE_STRING);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
79	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.VALUE_STRING,  _currToken);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.VALUE_STRING,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.VALUE_STRING,  _currToken);	  return    _parsingContext.nextToken(JsonToken.VALUE_STRING);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
80	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.VALUE_NUMBER_INT);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.VALUE_NUMBER_INT);	  return    _parsingContext.nextToken(JsonToken.VALUE_STRING);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
81	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _skipWS);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _skipWS);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _skipWS);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
82	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _currToken);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _currToken);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
83	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _bufferRecyclable);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
84	[BUG]  [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  i  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  i  +  1);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.FIELD_NAME,  i  +  1);	  return    _nextToken(JsonToken.FIELD_NAME,    i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
85	[BUG]  [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  i,  _currToken);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.FIELD_NAME,  i,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.FIELD_NAME,  i,  _currToken);	  return    _nextToken(JsonToken.FIELD_NAME,    i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
86	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  _currToken);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  _currToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  _currToken);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
87	[BUG]  [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.START_OBJECT);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.START_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(i,  JsonToken.START_OBJECT);	  return    _parsingContext.nextToken(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
88	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _type);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _type);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _type);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  return  _parsingContext.getCurrentName();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.getCurrentName();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.getCurrentName();	  return    _parsingContext.nextToken();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
90	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.START_OBJECT);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.START_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.START_OBJECT);	  return    _nextTokenNotInObject(jsonToken,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
91	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  _parsingContext);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.VALUE_NULL,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
92	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
93	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _cfg);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _cfg);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _currToken,  _cfg);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
94	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
95	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _inputPtr);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _inputPtr);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
96	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
97	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_ARRAY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_ARRAY);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.END_ARRAY);	  return    _nextTokenNotInObject(i,    JsonToken.END_ARRAY);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
98	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _typeFactory);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _typeFactory);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_OBJECT,  _currToken,  _typeFactory);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  return  _nextToken(JsonToken.END_OBJECT);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.END_OBJECT);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.END_OBJECT);	  return    _nextToken(JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
100	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _inputPtr);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _bufferRecyclable,  _inputPtr);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
101	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.FIELD_NAME,  _bufferRecyclable);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
102	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _parsingContext);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _inputBuffer);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _inputBuffer);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _inputBuffer);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _bufferRecyclable);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(jsonToken,  JsonToken.END_OBJECT,  _bufferRecyclable);	  return    _nextTokenNotInObject(i,    JsonToken.END_OBJECT,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_OBJECT,  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_OBJECT,  1);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.END_OBJECT,  1);	  return    _parsingContext.nextToken(JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
106	[BUG]  [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_ARRAY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(JsonToken.END_ARRAY);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(JsonToken.END_ARRAY);	  return    _parsingContext.nextToken(JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
108	[BUG]  [BUGGY]  _parsingContext.setCurrentName(i.getName());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext.setCurrentName(i.getName());  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext.setCurrentName(i.getName());	  _parsingContext.setCurrentName(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
109	[BUG]  [BUGGY]  _parsingContext.setCurrentName(jsonToken);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext.setCurrentName(jsonToken);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext.setCurrentName(jsonToken);	  _parsingContext.setCurrentName(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
110	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _cfg);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _cfg);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.START_OBJECT,  _cfg);	  return    _nextTokenNotInObject(i,    JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
111	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _objectCodec);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _objectCodec);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _objectCodec);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
112	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeFactory);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeFactory);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildObjectContext(i,  _typeFactory);	  _parsingContext    =    _parsingContext.createChildObjectContext(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
113	[BUG]  [BUGGY]  i  =  _skipWS()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  i  =  _skipWS()  +  1;  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	i  =  _skipWS()  +  1;	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
114	[BUG]  [BUGGY]  i  =  _skipWord();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  i  =  _skipWord();  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	i  =  _skipWord();	  i    =    _skipWS();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
115	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _objectCodec);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _objectCodec);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _objectCodec);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _inputBuffer);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _inputBuffer);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _inputBuffer);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _stringValue);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _stringValue);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _stringValue);	  return    _parsingContext.nextTokenNotInObject(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
118	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_ARRAY,  _parsingContext);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.END_ARRAY,  _parsingContext);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.END_ARRAY,  _parsingContext);	  return    _nextTokenNotInObject(i,    JsonToken.END_ARRAY);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
119	[BUG]  [BUGGY]  return  _nextToken(JsonToken.START_OBJECT,  JsonToken.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(JsonToken.START_OBJECT,  JsonToken.FIELD_NAME);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(JsonToken.START_OBJECT,  JsonToken.FIELD_NAME);	  return    _nextToken(JsonToken.START_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
120	[BUG]  [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _inputBuffer);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _inputBuffer);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(i,  JsonToken.FIELD_NAME,  _inputBuffer);	  return    _parsingContext.nextToken(i,    JsonToken.FIELD_NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
121	[BUG]  [BUGGY]  return  _nextToken(i,  JsonToken.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextToken(i,  JsonToken.FIELD_NAME);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextToken(i,  JsonToken.FIELD_NAME);	  return    _nextToken(JsonToken.FIELD_NAME,    i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
122	[BUG]  [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _type);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _type);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _parsingContext.nextToken(i,  JsonToken.END_OBJECT,  _type);	  return    _parsingContext.nextToken(i,    JsonToken.END_OBJECT);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
123	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _tokenIncomplete);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _tokenIncomplete);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.FIELD_NAME,  _tokenIncomplete);	  return    _nextTokenNotInObject(i,    JsonToken.FIELD_NAME,    _bufferRecyclable);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
124	[BUG]  [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _typeFactory);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _typeFactory);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	return  _nextTokenNotInObject(i,  JsonToken.VALUE_NULL,  _currToken,  _typeFactory);	  return    _nextTokenNotInObject(i,    JsonToken.VALUE_NULL,    _currToken);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
125	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _reportUnexpectedChar(i,       "was  expecting  comma  to  separate       "+_parsingContext.getTypeDesc()+     "  entries     ");  }  i  =  _skipWS();  }      if  (!_parsingContext.inObject())  {      [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [BUGGY]      }  Name  n  =  _parseName(i);  _parsingContext.setCurrentName(n.getName());  _currToken  =  JsonToken.FIELD_NAME;  if  (_inputPtr  <  _inputEnd  &&  _inputBuffer[_inputPtr]  ==  ':')  {  ++_inputPtr;  }  else  {  [CLASS]  UTF8StreamJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  JsonToken  t  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  ch  col  count  decodedData  end  features  i  minAvailable  nameLen  origPtr  outputCount  outputEnd  outputPtr  start  Name  n  	projects/JacksonCore3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	696	696	1	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
