bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    int  strLen  =  str.length();  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	add	    int  strLen  =  str.length();		compilable	  [FE]  NullPointerException  	2	2	add
2	[BUG]  [BUGGY]    int  strLen  =  str.length();  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    int  strLen  =  str.length();  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    int  strLen  =  str.length();		compilable	  [FE]  NullPointerException  	2	2	add
3	[BUG]  [BUGGY]    String  str  =  searchStr.substring(0,  searchStr.length()  -  1);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    String  str  =  searchStr.substring(0,  searchStr.length()  -  1);  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    String  str  =  searchStr.substring(0,  searchStr.length()  -  1);		non-compiled	[CE]  illegal  start  of  type	2	None	add
4	[BUG]  [BUGGY]    int  index  =  str.indexOf(searchStr);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    int  index  =  str.indexOf(searchStr);  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    int  index  =  str.indexOf(searchStr);		non-compiled	[CE]  illegal  start  of  type	2	None	add
5	[BUG]  [BUGGY]    int  index  =  str.indexOf(searchStr)+  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    int  index  =  str.indexOf(searchStr)+  1;  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    int  index  =  str.indexOf(searchStr)+  1;		non-compiled	[CE]  illegal  start  of  type	2	None	add
6	[BUG]  [BUGGY]    String  str  =  searchStr.substring(0,  searchStr.length()  -  2);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    String  str  =  searchStr.substring(0,  searchStr.length()  -  2);  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    String  str  =  searchStr.substring(0,  searchStr.length()  -  2);		non-compiled	[CE]  illegal  start  of  type	2	None	add
7	[BUG]  [BUGGY]  if  (str  ==  null  ||  searchStr!=  null)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]  if  (str  ==  null  ||  searchStr!=  null)  {  [BUGGY]  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	if  (str  ==  null  ||  searchStr!=  null)  {	if  (str  ==  null  ||  searchStr  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  if  (searchStr  ==  null  ||  str  ==  null)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]  if  (searchStr  ==  null  ||  str  ==  null)  {  [BUGGY]  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	if  (searchStr  ==  null  ||  str  ==  null)  {	if  (str  ==  null  ||  searchStr  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]    int  index  =  str.lastIndexOf(searchStr);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    int  index  =  str.lastIndexOf(searchStr);  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    int  index  =  str.lastIndexOf(searchStr);		non-compiled	[CE]  illegal  start  of  type	2	None	add
10	[BUG]  [BUGGY]    int  index  =  str.indexOf(searchStr)-  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    int  index  =  str.indexOf(searchStr)-  1;  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    int  index  =  str.indexOf(searchStr)-  1;		non-compiled	[CE]  illegal  start  of  type	2	None	add
11	[BUG]  [BUGGY]    if(str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    if(str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    if(str  ==  null  ||  searchStr  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  type	2	None	add
12	[BUG]  [BUGGY]    if(str  ==  null  ||  searchStr  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]    if(str  ==  null  ||  searchStr  ==  null)  {  return  true;  }  [BUGGY]  if  (str  ==  null  ||  searchStr  ==  null)  {  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	    if(str  ==  null  ||  searchStr  ==  null)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  type	2	None	add
13	[BUG]  [BUGGY]  if(str  ==  null  ||  searchStr  ==  null  ||  str.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  containsIgnoreCase(String  str,  String  searchStr)  {  [BUGGY]  if(str  ==  null  ||  searchStr  ==  null  ||  str.length()  ==  0)  {  [BUGGY]  return  false;  }  return  contains(str.toUpperCase(),  searchStr.toUpperCase());  }  [CLASS]  StringUtils  [METHOD]  containsIgnoreCase  [RETURN_TYPE]  boolean  String  str  String  searchStr  [VARIABLES]  int  INDEX_NOT_FOUND  PAD_LIMIT  end  found  i  index  ordinal  start  startPos  strLen  strsLen  String  EMPTY  searchStr  str  str1  str2  stripChars  ts  boolean  	projects/Lang40/src/java/org/apache/commons/lang/StringUtils.java	0.7071067811865475	1045	1045	1	replace	if(str  ==  null  ||  searchStr  ==  null  ||  str.length()  ==  0)  {	if  (str  ==  null  ||  searchStr  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
