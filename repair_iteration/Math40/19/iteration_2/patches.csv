bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  agingA  =  0;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  agingA  =  0;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  agingA  =  0;	  long    agingA    =    0;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	50	None	replace
2	[BUG]  [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  double  agingB  =(absYB  >  0)?  absYB  :  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  double  agingB  =(absYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =(absYB    >    0)?    absYB    :    0;    double  agingB  =(absYB  >  0)?  absYB  :  0;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	1	None	add
3	[BUG]  [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  Double  agingB  =(absYB  >  0)?  absYB  :  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  Double  agingB  =(absYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =(absYB    >    0)?    absYB    :    0;    Double  agingB  =(absYB  >  0)?  absYB  :  0;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	1	None	add
4	[BUG]  [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  int  agingB  =(absYB  >  0)?  absYB  :  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  int  agingB  =(absYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =(absYB    >    0)?    absYB    :    0;    int  agingB  =(absYB  >  0)?  absYB  :  0;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	1	None	add
5	[BUG]  [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  agingB  =(absYB  >  0)?  absYB  :  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  agingB  =(absYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =(absYB    >    0)?    absYB    :    0;    agingB  =(absYB  >  0)?  absYB  :  0;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	1	None	add
6	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  agingA);  [CE]  no  suitable  method  found  for  abs(double[],int)  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  agingA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(tmpX,  agingA);	  double    agingB    =    FastMath.abs(tmpX);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],int)	73	None	replace
7	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  absYA);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(tmpX,  absYA);	  double    agingB    =    FastMath.abs(tmpX);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	73	None	replace
8	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  y);  [CE]  no  suitable  method  found  for  abs(double[],double[])  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(tmpX,  y);	  double    agingB    =    FastMath.abs(tmpX);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double[])	73	None	replace
9	[BUG]  [BUGGY]  double  agingA  =  0;  agingB  =  0;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  0;  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  0;  agingB  =  0;	  double    agingB    =    0;    agingB    =    0;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	14	None	replace
10	[BUG]  [BUGGY]  agingA  =  0;  agingB  =  0;  [CE]  cannot  find  symbol  agingB  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  agingA  =  0;  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	agingA  =  0;  agingB  =  0;	  double    agingB    =    0;    agingB    =    0;    	non-compiled	[CE]  cannot  find  symbol  agingB	14	None	replace
11	[BUG]  [BUGGY]  agingB  =  0;  [CE]  cannot  find  symbol  agingB  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	agingB  =  0;	  double    agingB    =    0;    agingB    =    0;    	non-compiled	[CE]  cannot  find  symbol  agingB	14	None	replace
12	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  yB);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB,    yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	59	None	replace
13	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(yA,  absYA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yA  =  FastMath.abs(yA,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yA  =  FastMath.abs(yA,  absYA);	  double    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	15	None	replace
14	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(yB,  absYB);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yA  =  FastMath.abs(yB,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yA  =  FastMath.abs(yB,  absYB);	  double    yA    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	16	None	replace
15	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(y,  absYA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yA  =  FastMath.abs(y,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yA  =  FastMath.abs(y,  absYA);	  double    yA    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	16	None	replace
16	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB,  y);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB,  y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB,  y);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA,    yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	63	None	replace
17	[BUG]  [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA);	  final    double[]    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	28	None	replace
18	[BUG]  [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xB);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double[]  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xB);	  final    double[]    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	28	None	replace
19	[BUG]  [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);	  final    double[]    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	28	None	replace
20	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yB,  absYB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(yB,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(yB,  absYB);	  double    agingA    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	21	None	replace
21	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(xA,  yB,  absYA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(xA,  yB,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(xA,  yB,  absYA);	  double    agingA    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	21	None	replace
22	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB,  xB,  absYB);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yB,  xB,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yB,  xB,  absYB);	  double    agingB    =    FastMath.abs(yB,    absYB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	54	None	replace
23	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(xB,  yB,  absYB);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(xB,  yB,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(xB,  yB,  absYB);	  double    agingB    =    FastMath.abs(yB,    absYB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	54	None	replace
24	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB,  absYB,  xB);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                          TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yB,  absYB,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yB,  absYB,  xB);	  double    agingB    =    FastMath.abs(yB,    absYB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	54	None	replace
25	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x,  y);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x,  y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x,  y);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA,    y);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
26	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(x,  getAbsoluteAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(x,  getAbsoluteAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(x,  getAbsoluteAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.max(x,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	68	None	replace
27	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(x,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(x,  getRelativeAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(x,  getRelativeAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.max(x,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	68	None	replace
28	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	6	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  long  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	long  agingB  =  2;	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	compilable	  [FE]  AssertionError  	44	4	replace
30	[BUG]  [BUGGY]  long  agingB  =  2;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  long  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	long  agingB  =  2;	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	compilable	  [FE]  AssertionError  	44	4	replace
31	[BUG]  [BUGGY]  ble  agingB  =  2;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  ble  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	ble  agingB  =  2;	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
32	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  getRelativeAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  getRelativeAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    +    FastMath.max(xA,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	56	None	replace
33	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xB,  getAbsoluteAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xB,  getAbsoluteAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xB,  getAbsoluteAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    +    FastMath.max(xA,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	56	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  4;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =  4;	  double    agingB    =    1;    	compilable	  [FE]  AssertionError  	38	4	replace
35	[BUG]  [BUGGY]  double  agingB  =  4;  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  4;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  4;	  double    agingB    =    1;    	compilable	  [FE]  AssertionError  	38	4	replace
36	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	60	None	replace
37	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(yA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(yA);	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	60	None	replace
38	[BUG]  [BUGGY]  double  agingB  =  2;  double  agingB  =  2;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  2;  double  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    2;    double  agingB  =  2;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	39	None	add
39	[BUG]  [BUGGY]  double  agingB  =  2;  Double  agingB  =  2;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  2;  Double  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    2;    Double  agingB  =  2;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	39	None	add
40	[BUG]  [BUGGY]  double  agingB  =  2;  int  agingB  =  2;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  2;  int  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    2;    int  agingB  =  2;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	39	None	add
41	[BUG]  [BUGGY]  double  agingB  =  2;  double  agingB  =  3;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]          AssertionError    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  2;  double  agingB  =  3;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    2;    double  agingB  =  3;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	39	None	add
42	[BUG]  [BUGGY]  int  agingB  =  0;  double  agingB  =  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  0;  double  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  0;  double  agingB  =  0;	  int    agingB    =    1;    double    agingB    =    1;    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	25	None	replace
43	[BUG]  [BUGGY]  int  agingB  =  0;  double  agingB  =  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  0;  double  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  0;  double  agingB  =  1;	  int    agingB    =    1;    double    agingB    =    1;    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	25	None	replace
44	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB,  xB,  absYA);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yB,  xB,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yB,  xB,  absYA);	  double    agingB    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	53	None	replace
45	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA,  yB,  absYA);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA,  yB,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yA,  yB,  absYA);	  double    agingB    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	53	None	replace
46	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(xB,  yB,  absYA);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(xB,  yB,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(xB,  yB,  absYA);	  double    agingB    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	53	None	replace
47	[BUG]  [BUGGY]  double  agingB  =  0L;  double  agingB  =  0L;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0L;  double  agingB  =  0L;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    0L;    double  agingB  =  0L;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	41	None	add
48	[BUG]  [BUGGY]  double  agingB  =  0L;  Double  agingB  =  0L;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0L;  Double  agingB  =  0L;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    0L;    Double  agingB  =  0L;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	41	None	add
49	[BUG]  [BUGGY]  double  agingB  =  0L;  int  agingB  =  0L;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0L;  int  agingB  =  0L;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    0L;    int  agingB  =  0L;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	41	None	add
50	[BUG]  [BUGGY]  double  agingB  =  0L;  agingB  =  0L;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0L;  agingB  =  0L;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    0L;    agingB  =  0L;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	41	None	add
51	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xA);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xA);	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	29	None	replace
52	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	29	None	replace
53	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yA);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yB  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yB  =  FastMath.abs(yA);	  double    yB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	62	None	replace
54	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(y);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yB  =  FastMath.abs(y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yB  =  FastMath.abs(y);	  double    yB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	62	None	replace
55	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yB,  absYA);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yB  =  FastMath.abs(yB,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yB  =  FastMath.abs(yB,  absYA);	  double    yB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	62	None	replace
56	[BUG]  [BUGGY]  Double  agingB  =(absYB  <  0)?  absYB  :  0;  [CE]  incompatible  types  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Double  agingB  =(absYB  <  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Double  agingB  =(absYB  <  0)?  absYB  :  0;	  Double    agingB    =(absYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  incompatible  types	4	None	replace
57	[BUG]  [BUGGY]  Double  agingB  =(absYB  >  0)?  absYA  :  0;  [CE]  incompatible  types  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Double  agingB  =(absYB  >  0)?  absYA  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Double  agingB  =(absYB  >  0)?  absYA  :  0;	  Double    agingB    =(absYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  incompatible  types	4	None	replace
58	[BUG]  [BUGGY]  Double  agingB  =(abbsYB  >  0)?  absYB  :  0;  [CE]  cannot  find  symbol  abbsYB  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Double  agingB  =(abbsYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Double  agingB  =(abbsYB  >  0)?  absYB  :  0;	  Double    agingB    =(absYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  abbsYB	4	None	replace
59	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(xA,  absYA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(xA,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(xA,  absYA);	  double    agingA    =    FastMath.abs(xA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	22	None	replace
60	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(yB);	  int    xA    =    getAbsoluteAccuracy()    +    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	36	None	replace
61	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xA);	  int    xA    =    getAbsoluteAccuracy()    +    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	36	None	replace
62	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	69	None	replace
63	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	69	None	replace
64	[BUG]  [BUGGY]  double  agingA  =  0;  Double  agingB  =  0;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  0;  Double  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  0;  Double  agingB  =  0;	  double    agingB    =    0;    Double    agingB    =    0;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	12	None	replace
65	[BUG]  [BUGGY]  Double  agingB  =  0;  [CE]  incompatible  types  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Double  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Double  agingB  =  0;	  double    agingB    =    0;    Double    agingB    =    0;    	non-compiled	[CE]  incompatible  types	12	None	replace
66	[BUG]  [BUGGY]  int  agingB  =  0;  Double  agingB  =  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  0;  Double  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  0;  Double  agingB  =  0;	  double    agingB    =    0;    Double    agingB    =    0;    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	12	None	replace
67	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  ==  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =(absYB  ==  0)?  absYB  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
68	[BUG]  [BUGGY]  double  agingB  =(absYB  ==  0)?  absYB  :  0;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  ==  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(absYB  ==  0)?  absYB  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
69	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYA  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =(absYB  >  0)?  absYA  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
70	[BUG]  [BUGGY]  double  agingB  =(absYB  >  0)?  absYA  :  0;  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYA  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(absYB  >  0)?  absYA  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
71	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >=  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =(absYB  >=  0)?  absYB  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
72	[BUG]  [BUGGY]  double  agingB  =(absYB  >=  0)?  absYB  :  0;  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >=  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(absYB  >=  0)?  absYB  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
73	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  1)?  absYB  :  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =(absYB  >  1)?  absYB  :  1;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
74	[BUG]  [BUGGY]  double  agingB  =(absYB  >  1)?  absYB  :  1;  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  1)?  absYB  :  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(absYB  >  1)?  absYB  :  1;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  3;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	int  agingB  =  3;	  int    agingB    =    2;    int    agingB    =    3;    	compilable	  [FE]  AssertionError  	66	4	replace
76	[BUG]  [BUGGY]  int  agingB  =  3;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  3;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  3;	  int    agingB    =    2;    int    agingB    =    3;    	compilable	  [FE]  AssertionError  	66	4	replace
77	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYA  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =(absYA  >  0)?  absYB  :  0;	  double    agingB    =(abbsYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	3	1	replace
78	[BUG]  [BUGGY]  double  agingB  =(absYA  >  0)?  absYB  :  0;  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYA  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(absYA  >  0)?  absYB  :  0;	  double    agingB    =(abbsYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	3	1	replace
79	[BUG]  [BUGGY]  double  agingB  =(abbsYB  >  0)?  absYA  :  0;  [CE]  cannot  find  symbol  abbsYB  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(abbsYB  >  0)?  absYA  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(abbsYB  >  0)?  absYA  :  0;	  double    agingB    =(abbsYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  abbsYB	3	None	replace
80	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(yY);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yA  =  FastMath.abs(yY);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yA  =  FastMath.abs(yY);	  double    yA    =    FastMath.abs(y);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	17	None	replace
81	[BUG]  [BUGGY]  double  agingA  =  1;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  1;	  int    agingA    =    1;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	49	None	replace
82	[BUG]  [BUGGY]  int  agingA  =  2;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingA  =  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingA  =  2;	  int    agingA    =    1;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	49	None	replace
83	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB,  xB);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yB,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yB,  xB);	  double    agingB    =    FastMath.abs(xB,    yB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	72	None	replace
84	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA,  xB);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yA,  xB);	  double    agingB    =    FastMath.abs(xB,    yB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	72	None	replace
85	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  xB,  absYB);  [CE]  no  suitable  method  found  for  abs(double[],double,double)  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  xB,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(tmpX,  xB,  absYB);	  double    agingB    =    FastMath.abs(xB,    absYB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double,double)	52	None	replace
86	[BUG]  [BUGGY]  double  xA  =  FastMath.abs(yA,  absYA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  xA  =  FastMath.abs(yA,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  xA  =  FastMath.abs(yA,  absYA);	  double    xA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	19	None	replace
87	[BUG]  [BUGGY]  int  agingB  =(abbsYB  >  0)?  absYB  :  0;  [CE]  cannot  find  symbol  abbsYB  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =(abbsYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =(abbsYB  >  0)?  absYB  :  0;	  long    agingB    =(absYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  abbsYB	5	None	replace
88	[BUG]  [BUGGY]  int  agingB  =  0;  Int  agingB  =  0;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  0;  Int  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  0;  Int  agingB  =  0;	  int    agingB    =    2;    Int    agingB    =    2;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
89	[BUG]  [BUGGY]  Int  agingB  =  2;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Int  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Int  agingB  =  2;	  int    agingB    =    2;    Int    agingB    =    2;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
90	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  long  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	long  agingB  =  0;	  double    agingB    =    0;    int    agingB    =    0;    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
91	[BUG]  [BUGGY]  long  agingB  =  0;  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  long  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	long  agingB  =  0;	  double    agingB    =    0;    int    agingB    =    0;    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
92	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  getRelativeAccuracy());  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  getRelativeAccuracy());	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	replace
93	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                          TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy());  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy());	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	replace
94	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy()  +  absYA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy()  +  absYA);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy()  +  absYA);	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	replace
95	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yA,  absYB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(yA,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(yA,  absYB);	  double    agingA    =    FastMath.abs(yA,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	33	None	replace
96	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yA,  absYA  +  1);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(yA,  absYA  +  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(yA,  absYA  +  1);	  double    agingA    =    FastMath.abs(yA,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	33	None	replace
97	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yA,  absY);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(yA,  absY);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(yA,  absY);	  double    agingA    =    FastMath.abs(yA,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	33	None	replace
98	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA);	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	74	None	replace
99	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);	  double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	74	None	replace
100	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xB);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.abs(xB);	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	27	None	replace
101	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	27	None	replace
102	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  getRelativeAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  getRelativeAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	55	None	replace
103	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy()  +  absYA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy()  +  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  getRelativeAccuracy()  +  absYA);	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	55	None	replace
104	[BUG]  [BUGGY]  int  agingB  =  0;  int  agingB  =  0);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  0;  int  agingB  =  0);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  0;  int  agingB  =  0);	  int    agingB    =    2;    int    agingB    =    2);    	non-compiled	[CE]  ';'  expected	67	None	replace
105	[BUG]  [BUGGY]  int  agingB  =  0;  int  agingB  =  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]              AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  0;  int  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  0;  int  agingB  =  0;	  int    agingB    =    2;    int    agingB    =    2);    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	67	None	replace
106	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  y);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  y);	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	35	None	replace
107	[BUG]  [BUGGY]  double  agingB  =(asYB  >  0)?  absYA  :  0;  [CE]  cannot  find  symbol  asYB  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(asYB  >  0)?  absYA  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(asYB  >  0)?  absYA  :  0;	  double    agingB    =(asYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  asYB	75	None	replace
108	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  getRelativeAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  getRelativeAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.min(xA,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	58	None	replace
109	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xB,  getAbsoluteAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                          TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xB,  getAbsoluteAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xB,  getAbsoluteAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.min(xA,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	58	None	replace
110	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.min(xA,  getAbsoluteAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.min(xA,  getAbsoluteAccuracy());  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  FastMath.min(xA,  getAbsoluteAccuracy());	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.min(xA,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	58	None	replace
111	[BUG]  [BUGGY]  double  agingB  =  1;  double  agingB  =  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  1;  double  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    1;    double  agingB  =  1;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	37	None	add
112	[BUG]  [BUGGY]  double  agingB  =  1;  Double  agingB  =  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  1;  Double  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    1;    Double  agingB  =  1;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	37	None	add
113	[BUG]  [BUGGY]  double  agingB  =  1;  int  agingB  =  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  1;  int  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    1;    int  agingB  =  1;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	37	None	add
114	[BUG]  [BUGGY]  double  agingB  =  1;  agingB  =  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  1;  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    1;    agingB  =  1;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	37	None	add
115	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingB  =  FastMath.abs(yA);  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingB  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    FastMath.abs(yA);    double  agingB  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	8	None	add
116	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA);  Double  agingB  =  FastMath.abs(yA);  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA);  Double  agingB  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    FastMath.abs(yA);    Double  agingB  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	8	None	add
117	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingA  =  FastMath.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingA  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    FastMath.abs(yA);    double  agingA  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	8	None	add
118	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingB  =  FastMath.abs(yY);  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingB  =  FastMath.abs(yY);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    FastMath.abs(yA);    double  agingB  =  FastMath.abs(yY);	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	8	None	add
119	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingB  =  FastMath.abs(y);  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA);  double  agingB  =  FastMath.abs(y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    FastMath.abs(yA);    double  agingB  =  FastMath.abs(y);	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	8	None	add
120	[BUG]  [BUGGY]  double  agingA  =  2;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  2;	  double    agingA    =    0;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	48	None	replace
121	[BUG]  [BUGGY]  double  agingA  =(xA  <  <  1)?  0  :  xA;  [CE]  illegal  start  of  type  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =(xA  <  <  1)?  0  :  xA;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =(xA  <  <  1)?  0  :  xA;	  double    agingA    =    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
122	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA,  y);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA,  y);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA,  y);	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	70	None	replace
123	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(xB,  yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(xB,  yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(xB,  yA);	  double    agingA    =    FastMath.abs(xB,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	32	None	replace
124	[BUG]  [BUGGY]  int  agingB  =  0;  Int  agingB  =  1;  [CE]  cannot  find  symbol  [FE]          TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  0;  Int  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  0;  Int  agingB  =  1;	  int    agingB    =    1;    Int    agingB    =    1;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
125	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	Integer  agingB  =  1;	  int    agingB    =    1;    Int    agingB    =    1;    	compilable	  [FE]  TooManyEvaluationsException  	24	1	replace
126	[BUG]  [BUGGY]  Integer  agingB  =  1;  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  agingB  =  1;	  int    agingB    =    1;    Int    agingB    =    1;    	compilable	  [FE]  TooManyEvaluationsException  	24	1	replace
127	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  yB);	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	35	None	replace
128	[BUG]  [BUGGY]  double  agingA  =  0L;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  0L;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  0L;	  double    agingA    =    0;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	48	None	replace
129	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
130	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
131	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
132	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAcc  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAcc  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAcc	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
133	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
134	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
135	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAcc  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAcc  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAcc	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
136	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
137	[BUG]  [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double[]  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);	  final    double[]    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	28	None	replace
138	[BUG]  [BUGGY]  Integer  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  yB);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  yB);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA,    yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	63	None	replace
139	[BUG]  [BUGGY]  double  agingB  =(AbsYB  >  0)?  absYB  :  0;  [CE]  cannot  find  symbol  AbsYB  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(AbsYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(AbsYB  >  0)?  absYB  :  0;	  float    agingB    =(absYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  AbsYB	61	None	replace
140	[BUG]  [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  int  absYB  =(absYB  >  0)?  absYB  :  0;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  int  absYB  =(absYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =(absYB    >    0)?    absYB    :    0;    int  absYB  =(absYB  >  0)?  absYB  :  0;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	1	None	add
141	[BUG]  [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  double  absYB  =(absYB  >  0)?  absYB  :  0;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  >  0)?  absYB  :  0;  double  absYB  =(absYB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =(absYB    >    0)?    absYB    :    0;    double  absYB  =(absYB  >  0)?  absYB  :  0;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	1	None	add
142	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
143	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
144	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
145	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAcc  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAcc  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAcc	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
146	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(bsYA,  xB);  [CE]  cannot  find  symbol  bsYA  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(bsYA,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(bsYA,  xB);	  double    agingB    =    FastMath.abs(xB,    absYA);    	non-compiled	[CE]  cannot  find  symbol  bsYA	51	None	replace
147	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(x);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(x);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(x);	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	29	None	replace
148	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA);  int  agingA  =  FastMath.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA);  int  agingA  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    FastMath.abs(yA);    int  agingA  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	8	None	add
149	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yA);  Double  agingA  =  FastMath.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yA);  Double  agingA  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    FastMath.abs(yA);    Double  agingA  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	8	None	add
150	[BUG]  [BUGGY]  double  agingB  =  0L;  long  agingB  =  0L;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0L;  long  agingB  =  0L;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    0L;    long  agingB  =  0L;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	41	None	add
151	[BUG]  [BUGGY]  double  agingB  =  1;  long  agingB  =  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  1;  long  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double    agingB    =    1;    long  agingB  =  1;	  	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	37	None	add
152	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0.0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =  0.0;	  double    agingB    =    0L;    	compilable	  [FE]  TooManyEvaluationsException  	42	1	replace
153	[BUG]  [BUGGY]  double  agingB  =  0.0;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0.0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  0.0;	  double    agingB    =    0L;    	compilable	  [FE]  TooManyEvaluationsException  	42	1	replace
154	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  getRelativeAccuracy());  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xB,  getRelativeAccuracy());	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	replace
155	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(tmpX,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                          TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(tmpX,  getRelativeAccuracy());  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(tmpX,  getRelativeAccuracy());	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	replace
156	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA,  yY);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA,  yY);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA,  yY);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA,    y);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
157	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(bsYB,  xB);  [CE]  cannot  find  symbol  bsYB  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(bsYB,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(bsYB,  xB);	  double    agingB    =    FastMath.abs(xB,    absYB);    	non-compiled	[CE]  cannot  find  symbol  bsYB	52	None	replace
158	[BUG]  [BUGGY]  double  agingB  =(abbsYA  >  0)?  absYB  :  0;  [CE]  cannot  find  symbol  abbsYA  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(abbsYA  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(abbsYA  >  0)?  absYB  :  0;	  double    agingB    =(abbsYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  abbsYA	3	None	replace
159	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(yB,  absYA  +  1);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yA  =  FastMath.abs(yB,  absYA  +  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yA  =  FastMath.abs(yB,  absYA  +  1);	  double    yA    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	16	None	replace
160	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
161	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
162	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
163	[BUG]  [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAcc  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAcc  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(allowed)  {  int  agingB  =  2;  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAcc	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
164	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(bsYB);  [CE]  cannot  find  symbol  bsYB  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(bsYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(bsYB);	  double    agingB    =    FastMath.abs(yA);    	non-compiled	[CE]  cannot  find  symbol  bsYB	9	None	replace
165	[BUG]  [BUGGY]  int  agingB  =  1;  Int  agingB  =  2;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  1;  Int  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  1;  Int  agingB  =  2;	  int    agingB    =    2;    Int    agingB    =    2;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
166	[BUG]  [BUGGY]  int  agingB  =  3;  Int  agingB  =  2;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  3;  Int  agingB  =  2;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  3;  Int  agingB  =  2;	  int    agingB    =    2;    Int    agingB    =    2;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
167	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yB,  absYA  +  1);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(yB,  absYA  +  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(yB,  absYA  +  1);	  double    agingA    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	21	None	replace
168	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(x);	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	70	None	replace
169	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  yB);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(tmpX,  yB);	  double    agingB    =    FastMath.abs(tmpX);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	73	None	replace
170	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  xB);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(tmpX,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(tmpX,  xB);	  double    agingB    =    FastMath.abs(tmpX);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	73	None	replace
171	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB,  agingA);  [CE]  no  suitable  method  found  for  abs(double,int)  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yB,  agingA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yB,  agingA);	  double    agingB    =    FastMath.abs(yB,    absYB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,int)	54	None	replace
172	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  getAbsoluteAccuracy()  +  1);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  getAbsoluteAccuracy()  +  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  *  FastMath.min(xA,  getAbsoluteAccuracy()  +  1);	  Integer    xA    =    getAbsoluteAccuracy()    *    FastMath.min(xA,    getAbsoluteAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	58	None	replace
173	[BUG]  [BUGGY]  int  agingB  =  1;  int  agingB  =  2);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  agingB  =  1;  int  agingB  =  2);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  agingB  =  1;  int  agingB  =  2);	  int    agingB    =    2;    int    agingB    =    2);    	non-compiled	[CE]  ';'  expected	67	None	replace
174	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB,  absYB,  agingA);  [CE]  no  suitable  method  found  for  abs(double,double,int)  [FE]                    TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(yB,  absYB,  agingA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(yB,  absYB,  agingA);	  double    agingB    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,int)	53	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  3;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =  3;	  double    agingB    =    1;    	compilable	  [FE]  AssertionError  	38	4	replace
176	[BUG]  [BUGGY]  double  agingB  =  3;  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  3;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  3;	  double    agingB    =    1;    	compilable	  [FE]  AssertionError  	38	4	replace
177	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB,  yA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB,  yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB,  yA);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB,    yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	59	None	replace
178	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(x);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(x);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(x);	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	60	None	replace
179	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yB,  agingA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  FastMath.abs(yB,  agingA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  FastMath.abs(yB,  agingA);	  double    agingA    =    FastMath.abs(yB,    absYA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	21	None	replace
180	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yB,  absYB);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  yB  =  FastMath.abs(yB,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  yB  =  FastMath.abs(yB,  absYB);	  double    yB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	62	None	replace
181	[BUG]  [BUGGY]  int  yA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  yA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  yA  =  getAbsoluteAccuracy()  *  FastMath.abs(yA);	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	60	None	replace
182	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  yB);  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.abs(xA,  yB);	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	29	None	replace
183	[BUG]  [BUGGY]  int  yA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  int  yA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	int  yA  =  getAbsoluteAccuracy()  *  FastMath.abs(yB);	  int    xA    =    getAbsoluteAccuracy()    *    FastMath.abs(yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	34	None	replace
184	[BUG]  [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
185	[BUG]  [BUGGY]  if(xA  <  =  MAX_ABSOLUTE_ACCURACY)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  MAX_ABSOLUTE_ACCURACY)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  MAX_ABSOLUTE_ACCURACY)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
186	[BUG]  [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  break;  }	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
187	[BUG]  [BUGGY]  double  agingB  =(abbingA  >  0)?  absYB  :  0;  [CE]  cannot  find  symbol  abbingA  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(abbingA  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(abbingA  >  0)?  absYB  :  0;	  double    agingB    =(asYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  abbingA	75	None	replace
188	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(y,  xB);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(y,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(y,  xB);	  double    agingB    =    FastMath.abs(xB,    yB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	72	None	replace
189	[BUG]  [BUGGY]  Int  agingB  =  1;  [CE]  cannot  find  symbol  [FE]          TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Int  agingB  =  1;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Int  agingB  =  1;	  int    agingB    =    1;    Int    agingB    =    1;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
190	[BUG]  [BUGGY]  if(xA  <  =  xB)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  xB)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  xB)  {  int  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
191	[BUG]  [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
192	[BUG]  [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  xB)  {  agingB  =  2;  }  else  if((  xB  -  xA)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xB    -    xA)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
193	[BUG]  [BUGGY]  double  agingB  =  0,  agingA  =  0;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0,  agingA  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  0,  agingA  =  0;	  double    agingB    =    0;    double    agingB    =    0;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	11	None	replace
194	[BUG]  [BUGGY]  double  agingB  =(abbsYB  <  0)?  absYB  :  0;  [CE]  cannot  find  symbol  abbsYB  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(abbsYB  <  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(abbsYB  <  0)?  absYB  :  0;	  double    agingB    =(abbsYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  abbsYB	3	None	replace
195	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  xA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  xA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA,  xA);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xA,    y);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
196	[BUG]  [BUGGY]  double  agingB  =(asyB  >  0)?  absYB  :  0;  [CE]  cannot  find  symbol  asyB  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(asyB  >  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(asyB  >  0)?  absYB  :  0;	  float    agingB    =(absYB    >    0)?    absYB    :    0;    	non-compiled	[CE]  cannot  find  symbol  asyB	61	None	replace
197	[BUG]  [BUGGY]  double  agingA  =  4;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingA  =  4;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingA  =  4;	  double    agingA    =    0;    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	48	None	replace
198	[BUG]  [BUGGY]  if(xA  <  =  xB)  {  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  xB)  {  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  xB)  {  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy())	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
199	[BUG]  [BUGGY]  if(xA  <  =  xB)  {  double  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  xB)  {  double  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  xB)  {  double  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break;  }	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
200	[BUG]  [BUGGY]  if(xA  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  if(xA  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	if(xA  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  int  agingB  =  2;  }  else  if((  xA  -  xB)  <  =  absYB)||(FastMath.max(xA,  xB)  <  getFunctionValueAccuracy()))  {  break	  int    agingB    =    2;    int    agingB    =    2;    }    else    if(((xA    -    xB)    <    =    absYB)||(FastMath.max(xA,    xB)    <    getFunctionValueAccuracy()))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
201	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  <  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	add	double  agingB  =(absYB  <  0)?  absYB  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
202	[BUG]  [BUGGY]  double  agingB  =(absYB  <  0)?  absYB  :  0;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =(absYB  <  0)?  absYB  :  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =(absYB  <  0)?  absYB  :  0;	  double    agingB    =(absYB    >    0)?    absYB    :    0;    	compilable	  [FE]  TooManyEvaluationsException  	2	1	replace
203	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(agingB);  [CE]  variable  agingB  might  not  have  been  initialized  [FE]                  TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  FastMath.abs(agingB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  FastMath.abs(agingB);	  double    agingB    =    FastMath.abs(y);    	non-compiled	[CE]  variable  agingB  might  not  have  been  initialized	10	None	replace
204	[BUG]  [BUGGY]  double  agingB  =  0,  agingB  =  0;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  double  agingB  =  0,  agingB  =  0;  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	double  agingB  =  0,  agingB  =  0;	  double    agingB    =    0L;    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	42	None	replace
205	[BUG]  [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB,  xB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	Integer  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB,  xB);	  Integer    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB,    yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	59	None	replace
206	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(relativeAccuracy,  getRelativeAccuracy());  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(relativeAccuracy,  getRelativeAccuracy());  [BUGGY]        while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	205	205	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(relativeAccuracy,  getRelativeAccuracy());	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    getRelativeAccuracy());    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	30	None	replace
