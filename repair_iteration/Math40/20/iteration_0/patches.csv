bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  AssertionError  	40	3	replace
2	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  AssertionError  	40	3	replace
3	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
4	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
5	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
6	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  xTol  [FE]          TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	  	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	non-compiled	[CE]  cannot  find  symbol  xTol	40	None	replace
8	[BUG]  [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA));		non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	add
9	[BUG]  [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));		non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	add
10	[BUG]  [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));		non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	add
11	[BUG]  [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB));  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB));		non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	add
12	[BUG]  [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));		non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	add
13	[BUG]  [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));		non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	add
14	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
15	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
16	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
17	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
18	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
19	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	final  double  xTol  =  getAbsoluteAccuracy()  +    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  	compilable	  [FE]  TooManyEvaluationsException  	40	1	replace
20	[BUG]  [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException  [CONTEXT]  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {    [BUGGY]    final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	    final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));		non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	add
