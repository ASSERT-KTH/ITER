bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	4	3	replace
2	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	4	3	replace
3	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	4	1	replace
4	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	4	1	replace
5	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	4	1	replace
6	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	4	1	replace
7	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	10	None	replace
8	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	10	None	replace
9	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
10	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
11	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	18	None	add
12	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
13	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	16	None	add
14	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
15	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	2	3	replace
17	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	2	3	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	2	3	replace
19	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	2	3	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	15	3	replace
21	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	15	3	replace
22	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
23	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
24	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
25	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
26	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	5	None	add
27	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
28	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	13	None	replace
29	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	13	None	replace
30	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	1	None	add
31	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	1	None	add
32	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	1	None	add
33	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  ((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  ((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	9	None	replace
38	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	9	None	replace
39	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	9	None	replace
40	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	20	None	replace
41	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	20	None	replace
42	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	20	None	replace
43	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	20	None	replace
44	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	8	None	replace
45	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	8	None	replace
46	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	14	None	add
47	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	14	None	add
48	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  not  a  statement  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  not  a  statement	14	None	add
49	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	14	None	add
50	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
51	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
52	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	3	None	add
53	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	17	3	replace
55	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	17	3	replace
56	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	17	1	replace
57	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	17	1	replace
58	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	17	1	replace
59	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	17	1	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	6	3	replace
61	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	6	3	replace
62	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	6	1	replace
63	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	6	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	19	3	replace
65	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	19	3	replace
66	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	19	1	replace
67	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	19	1	replace
68	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
69	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
70	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
71	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	11	None	replace
72	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
73	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	19	1	replace
74	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	19	1	replace
75	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	19	1	replace
76	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	19	1	replace
77	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	17	1	replace
78	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	17	1	replace
79	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	20	None	replace
80	[BUG]  [BUGGY]  int  xA  =  Math.min(agingA,  xB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  int  xA  =  Math.min(agingA,  xB);  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(agingA,  xB);	      	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
81	[BUG]  [BUGGY]  int  xA  =  Math.min(agingA,  yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  int  xA  =  Math.min(agingA,  yB);  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(agingA,  yB);	      	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
82	[BUG]  [BUGGY]  int  xA  =  Math.max(agingA,  xB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  int  xA  =  Math.max(agingA,  xB);  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.max(agingA,  xB);	      	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
83	[BUG]  [BUGGY]  double  xA  =  Math.abs(yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  double  xA  =  Math.abs(yB);  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xA  =  Math.abs(yB);	      	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
84	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	10	None	replace
85	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	13	None	replace
86	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	13	None	replace
87	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	14	None	add
88	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	1	None	add
89	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	1	None	add
90	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
91	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
92	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	12	None	replace
93	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
94	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	4	2	replace
95	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	4	2	replace
96	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	1	None	add
97	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	14	None	add
98	[BUG]  [BUGGY]  double  xA  =  Math.abs(xA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  double  xA  =  Math.abs(xA);  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xA  =  Math.abs(xA);	      	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	7	None	replace
99	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	3	None	add
100	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	16	None	add
101	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
102	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	20	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	2	3	replace
104	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	2	3	replace
105	[BUG]  [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  cannot  find  symbol  xTol  [FE]                TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xxA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	non-compiled	[CE]  cannot  find  symbol  xTol	12	None	replace
106	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
107	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]    int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {      [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]    getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
