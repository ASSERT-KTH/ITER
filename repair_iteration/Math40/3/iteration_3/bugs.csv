bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.allowed  =  absoluteAccuracy;  [CE]  incompatible  types  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  absoluteAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  absoluteAccuracy;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximalOrder);    }    	non-compiled	[CE]  incompatible  types	11	None	replace
2	[BUG]  [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  [CE]  cannot  find  symbol  RestrictedSolution  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RestrictedSolution.ANY_SIDE;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximalOrder);    }    	non-compiled	[CE]  cannot  find  symbol  RestrictedSolution	11	None	replace
3	[BUG]  [BUGGY]  this.maximalOrder  =  totalOrder;  [CE]  cannot  find  symbol  totalOrder  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  totalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  totalOrder;	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    maximalOrder);    }    	non-compiled	[CE]  cannot  find  symbol  totalOrder	73	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  maximalOrder  /  2;	  this.maximalOrder    =    maximumOrder    -    2;    	compilable	  [FE]  AssertionError  	16	4	replace
5	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  2;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  /  2;	  this.maximalOrder    =    maximumOrder    -    2;    	compilable	  [FE]  AssertionError  	16	4	replace
6	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  /  2;  [CE]  cannot  find  symbol  maximumOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  /  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  /  2;	  this.maximalOrder    =    maximumOrder    -    2;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	16	None	replace
7	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]    NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	  	compilable	  [FE]  NumberIsTooSmallException  	66	2	add
8	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [FE]  NumberIsTooSmallException  [FE]    NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	  	compilable	  [FE]  NumberIsTooSmallException  	66	2	add
9	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]      NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;	  	compilable	  [FE]  NumberIsTooSmallException  	66	2	add
10	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  [FE]  NumberIsTooSmallException  [FE]      NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;	  	compilable	  [FE]  NumberIsTooSmallException  	66	2	add
11	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  [CE]  ')'  expected  [FE]        NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,	  	non-compiled	[CE]  ')'  expected	66	None	add
12	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  [CE]  ')'  expected  [FE]          NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,	  	non-compiled	[CE]  ')'  expected	66	None	add
13	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]            NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }	  	compilable	  [FE]  NumberIsTooSmallException  	66	2	add
14	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }  [FE]  NumberIsTooSmallException  [FE]            NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }	  	compilable	  [FE]  NumberIsTooSmallException  	66	2	add
15	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  MAXIMAL_AGING;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	24	None	replace
16	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximumOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximumOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximumOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
17	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
18	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	69	None	replace
19	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder  +  1;  this.maximalOrder  =  maximalOrder  +  2;  [CE]  cannot  find  symbol  absoluteOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder  +  1;  this.maximalOrder  =  maximalOrder  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder  +  1;  this.maximalOrder  =  maximalOrder  +  2;	  this.maximalOrder    =    maximalOrder    +    1;    this.maximalOrder    =    maximalOrder    +    2;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	33	None	replace
20	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  +  1;  [CE]  cannot  find  symbol  maximumOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  +  1;	  this.maximalOrder    =    maximalOrder    +    1;    this.maximalOrder    =    maximalOrder    +    2;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	33	None	replace
21	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder  +  1;  this.maximalOrder  =  maximalOrder  +  1;  [CE]  cannot  find  symbol  absoluteOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder  +  1;  this.maximalOrder  =  maximalOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder  +  1;  this.maximalOrder  =  maximalOrder  +  1;	  this.maximalOrder    =    maximalOrder    +    1;    this.maximalOrder    =    maximalOrder    +    1;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	30	None	replace
22	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder  +  1;  [CE]  cannot  find  symbol  absoluteOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder  +  1;	  this.maximalOrder    =    maximalOrder    +    1;    this.maximalOrder    =    maximalOrder    +    1;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	30	None	replace
23	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
24	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
25	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
26	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
27	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  -=  2;	  this.maximalOrder    -=    MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	104	4	replace
28	[BUG]  [BUGGY]  this.maximalOrder  -=  2;  [FE]  NegativeArraySizeException  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  -=  2;	  this.maximalOrder    -=    MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	104	4	replace
29	[BUG]  [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]      NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  -=  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    -=    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	104	None	replace
30	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]        NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  -=  maximalOrder;	  this.maximalOrder    -=    MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	104	4	replace
31	[BUG]  [BUGGY]  this.maximalOrder  -=  maximalOrder;  [FE]  NegativeArraySizeException  [FE]        NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  -=  maximalOrder;	  this.maximalOrder    -=    MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	104	4	replace
32	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  RelativeAccuracy  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeAccuracy	101	None	replace
33	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  cannot  find  symbol  MAXIMAL_AGING  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  cannot  find  symbol  MAXIMAL_AGING	101	None	replace
34	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  variable  maximalOrder  might  not  have  been  initialized  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  variable  maximalOrder  might  not  have  been  initialized	101	None	replace
35	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL  [CE]  ';'  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
36	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximalOrder,  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximalOrder,  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximalOrder,  DEFAULT_ABSOLUTE_ACCURACY);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    maximalOrder,    DEFAULT_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	57	None	replace
37	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximalOrder,  DEFAULT_MAXIMAL_AGING);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximalOrder,  DEFAULT_MAXIMAL_AGING);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximalOrder,  DEFAULT_MAXIMAL_AGING);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    maximalOrder,    DEFAULT_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	57	None	replace
38	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximumOrder,  DEFAULT_MAXIMAL_AGING);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximumOrder,  DEFAULT_MAXIMAL_AGING);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximumOrder,  DEFAULT_MAXIMAL_AGING);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    maximalOrder,    DEFAULT_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	57	None	replace
39	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximalOrder);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                      TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximalOrder);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximalOrder);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    maximalOrder,    DEFAULT_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	57	None	replace
40	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximumOrder,  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximumOrder,  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  maximumOrder,  DEFAULT_ABSOLUTE_ACCURACY);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    maximumOrder);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	35	None	replace
41	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximalOrder  *  1;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximalOrder  *  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    *    1;    this.maximalOrder  =  maximalOrder  *  1;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	90	None	add
42	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximumOrder  *  1;  [CE]  cannot  find  symbol  maximumOrder  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximumOrder  *  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    *    1;    this.maximalOrder  =  maximumOrder  *  1;	  	non-compiled	[CE]  cannot  find  symbol  maximumOrder	90	None	add
43	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximalOrder  *  2;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]        TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximalOrder  *  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    *    1;    this.maximalOrder  =  maximalOrder  *  2;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	90	None	add
44	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  This.maximalOrder  =  maximalOrder  *  1;  [CE]  cannot  find  symbol  This  [FE]          TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  This.maximalOrder  =  maximalOrder  *  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    *    1;    This.maximalOrder  =  maximalOrder  *  1;	  	non-compiled	[CE]  cannot  find  symbol  This	90	None	add
45	[BUG]  [BUGGY]  REDUCTION_FACTOR  =  maximalOrder;  [CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  REDUCTION_FACTOR  =  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	REDUCTION_FACTOR  =  maximalOrder;	  REDUCTION_FACTOR    =    relativeAccuracy;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR	54	None	replace
46	[BUG]  [BUGGY]  REDUCTION_FACTOR  =  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  REDUCTION_FACTOR  =  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	REDUCTION_FACTOR  =  DEFAULT_ABSOLUTE_ACCURACY;	  REDUCTION_FACTOR    =    relativeAccuracy;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR	54	None	replace
47	[BUG]  [BUGGY]  REDUCTION_FACTOR  =  absoluteAccuracy;  [CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR  [FE]                      TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  REDUCTION_FACTOR  =  absoluteAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	REDUCTION_FACTOR  =  absoluteAccuracy;	  REDUCTION_FACTOR    =    relativeAccuracy;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR	54	None	replace
48	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  &  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  &  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  &  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    |    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	17	None	replace
49	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  |  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  |  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  |  DEFAULT_ABSOLUTE_ACCURACY;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    |    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	17	None	replace
50	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  |  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  |  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  |  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    |    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	17	None	replace
51	[BUG]  [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  |  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  |  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  |  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	61	None	replace
52	[BUG]  [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  |  RelativeAccuracy.DEFAULT_MAXIMAL_AGING;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  |  RelativeAccuracy.DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  |  RelativeAccuracy.DEFAULT_MAXIMAL_AGING;	  this.relativeAccuracy    =    RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	61	None	replace
53	[BUG]  [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  &&  relativeAccuracy  ==  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                      TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  &&  relativeAccuracy  ==  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  &&  relativeAccuracy  ==  DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	61	None	replace
54	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
55	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
56	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
57	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absolute  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absolute  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absolute	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
58	[BUG]  [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  AllowedSolution.ANY_SIDE;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  incompatible  types	80	None	replace
59	[BUG]  [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  incompatible  types	80	None	replace
60	[BUG]  [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MA  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MA  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MA	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
61	[BUG]  [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAUL  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAUL  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAUL	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
62	[BUG]  [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL_VALUE;  [CE]  cannot  find  symbol  MAXIMAL_VALUE  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL_VALUE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  Integer.MAXIMAL_VALUE;	  this.maximalOrder    =    Integer.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MAXIMAL_VALUE	49	None	replace
63	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MIN_VALUE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  Integer.MIN_VALUE;	  this.maximalOrder    =    Integer.MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	49	4	replace
64	[BUG]  [BUGGY]  this.maximalOrder  =  Integer.MIN_VALUE;  [FE]  NegativeArraySizeException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MIN_VALUE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  Integer.MIN_VALUE;	  this.maximalOrder    =    Integer.MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	49	4	replace
65	[BUG]  [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL_ORDER;  [CE]  cannot  find  symbol  MAXIMAL_ORDER  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  Integer.MAXIMAL_ORDER;	  this.maximalOrder    =    Integer.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MAXIMAL_ORDER	49	None	replace
66	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  +  2;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE  +  2;	  this.allowed    =    AllowedSolution.ANY_SIDE    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	88	None	replace
67	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  +  3;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  +  3;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE  +  3;	  this.allowed    =    AllowedSolution.ANY_SIDE    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	88	None	replace
68	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder;  [CE]  cannot  find  symbol  absoluteOrder  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder;	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    maximumOrder);    }    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	74	None	replace
69	[BUG]  [BUGGY]  this.maximumOrder  =  maximalOrder;  [CE]  cannot  find  symbol  maximumOrder  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  maximalOrder;	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    this.maximumOrder    =    maximalOrder;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	110	None	replace
70	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  this.maximumOrder  =  maximumOrder;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  this.maximumOrder  =  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  this.maximumOrder  =  maximumOrder;	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    this.maximumOrder    =    maximalOrder;    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	110	None	replace
71	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(relativeAccuracy    ==    DEFAULT_MAXIMAL_ORDER)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    maximumOrder    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
72	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy;  [CE]  cannot  find  symbol  maximumOrder  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(relativeAccuracy    ==    DEFAULT_MAXIMAL_ORDER)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    maximumOrder    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	5	None	replace
73	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(relativeAccuracy    ==    DEFAULT_MAXIMAL_ORDER)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    maximumOrder    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
74	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  +  1;  [CE]  cannot  find  symbol  MaximumOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  +  1;	  this.maximalOrder    =    MaximumOrder.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	29	None	replace
75	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.MINIMUM_AGING;  [CE]  cannot  find  symbol  MaximumOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.MINIMUM_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.MINIMUM_AGING;	  this.maximalOrder    =    MaximumOrder.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	29	None	replace
76	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_LONG;  [CE]  cannot  find  symbol  ANY_LONG  [FE]        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_LONG;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_LONG;	  this.allowed    =    AllowedSolution.ANY_ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ANY_LONG	87	None	replace
77	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_AS_NULL;  [CE]  cannot  find  symbol  ANY_AS_NULL  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_AS_NULL;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_AS_NULL;	  this.allowed    =    AllowedSolution.ANY_ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ANY_AS_NULL	87	None	replace
78	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximumOrder);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximumOrder);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  maximumOrder);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    DEFAULT_MAXIMAL_AGING);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	56	None	replace
79	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  This  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    This.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  This	94	None	replace
80	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  maximalOrder;  [CE]  cannot  find  symbol  This  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  maximalOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    This.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  This	94	None	replace
81	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  This.maximalOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  maximumOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  This.maximalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  This.maximalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    This.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	94	None	replace
82	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  maximumOrder;  [CE]  cannot  find  symbol  This  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  maximumOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    This.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  This	94	None	replace
83	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.relativeAccuracy  =  relativeAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.relativeAccuracy  =  relativeAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.relativeAccuracy  =  relativeAccuracy;	  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	62	None	add
84	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  	compilable	  [FE]  TooManyEvaluationsException  	62	1	add
85	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  	compilable	  [FE]  TooManyEvaluationsException  	62	1	add
86	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [CE]  ';'  expected  [FE]        TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_	  	non-compiled	[CE]  ';'  expected	62	None	add
87	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.A  [CE]  ';'  expected  [FE]          TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.A  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.A	  	non-compiled	[CE]  ';'  expected	62	None	add
88	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_S  [CE]  ';'  expected  [FE]            TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_S  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_S	  	non-compiled	[CE]  ';'  expected	62	None	add
89	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder  /  1;  [CE]  cannot  find  symbol  absoluteOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder  /  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder  /  1;	  this.maximalOrder    =    maximumOrder    /    1;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	89	None	replace
90	[BUG]  [BUGGY]  this.allowed  =  relativeAccuracy;  [CE]  incompatible  types  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  relativeAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  relativeAccuracy;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  incompatible  types	65	None	replace
91	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MINIMAL_AGING;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MINIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MINIMAL_AGING;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MINIMAL_ORDER;    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
92	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MINIMAL_ORDER;    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
93	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MINIMAL_ORDER;    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
94	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MINIMAL_ORDER;    	non-compiled	[CE]  possible  loss  of  precision	115	None	replace
95	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
96	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
97	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	85	None	replace
98	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
99	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  +  2;  [CE]  possible  loss  of  precision  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  +  2;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
100	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  possible  loss  of  precision  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  /  DEFAULT_ABSOLUTE_ACCURACY;	  this.maximalOrder    =    maximalOrder    +    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
101	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  *  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  possible  loss  of  precision  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  *  DEFAULT_ABSOLUTE_ACCURACY;	  this.maximalOrder    =    maximalOrder    +    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
102	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  +  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    maximalOrder    +    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	109	None	replace
103	[BUG]  [BUGGY]  this.maximalOrder  =  Integer.parseInt(relativeAccuracy);  [CE]  no  suitable  method  found  for  parseInt(double)  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.parseInt(relativeAccuracy);  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  Integer.parseInt(relativeAccuracy);	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(relativeAccuracy    ==    DEFAULT_MAXIMAL_ORDER)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(double)	3	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  2;	  this.maximalOrder    =    1;    	compilable	  [FE]  AssertionError  	93	2	replace
105	[BUG]  [BUGGY]  this.maximalOrder  =  2;  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  2;	  this.maximalOrder    =    1;    	compilable	  [FE]  AssertionError  	93	2	replace
106	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy?  DEFAULT_ABSOLUTE_ACCURACY  :  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy?  DEFAULT_ABSOLUTE_ACCURACY  :  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy?  DEFAULT_ABSOLUTE_ACCURACY  :  DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	19	None	replace
107	[BUG]  [BUGGY]  this.allowed  =  Integer.parseInt(relativeAccuracy);  [CE]  no  suitable  method  found  for  parseInt(double)  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.parseInt(relativeAccuracy);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.parseInt(relativeAccuracy);	  this.allowed    =    Integer.MAXIMAL_VALUE;    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(double)	45	None	replace
108	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	100	None	replace
109	[BUG]  [BUGGY]  this.allowed  =  RelatedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  RelatedSolution  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelatedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelatedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  RelatedSolution	100	None	replace
110	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [CE]  ';'  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
111	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  RelativeAccuracy  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeAccuracy	100	None	replace
112	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  minimalOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	96	None	replace
113	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  maximalOrder;  [CE]  cannot  find  symbol  minimalOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  maximalOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	96	None	replace
114	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  minimalOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	96	None	replace
115	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  this.minimalOrder  =  maximalOrder;  [CE]  cannot  find  symbol  maximumOrder  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  this.minimalOrder  =  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  this.minimalOrder  =  maximalOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	96	None	replace
116	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [CE]  cannot  find  symbol  absoluteOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder  -  1;  this.maximalOrder  =  maximalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	50	None	replace
117	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
118	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
119	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
120	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
121	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maximalOrder  =  maximalOrder;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maximalOrder  =  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.maximalOrder  =  maximalOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maximalOrder    =    MAXIMAL_AGING);    	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	116	None	replace
122	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  MAXIMAL_AGING);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  MAXIMAL_AGING);  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  MAXIMAL_AGING);	  this.maximalOrder    =    MAXIMAL_AGING;    this.maximalOrder    =    MAXIMAL_AGING);    	non-compiled	[CE]  ';'  expected	116	None	replace
123	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maximalOrder  =  maximumOrder;  [CE]  cannot  find  symbol  maximumOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maximalOrder  =  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.maximalOrder  =  maximumOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maximalOrder    =    MAXIMAL_AGING);    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	116	None	replace
124	[BUG]  [BUGGY]  this.allowed  =  maximalOrder;  [CE]  incompatible  types  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  maximalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  incompatible  types	64	None	replace
125	[BUG]  [BUGGY]  this.allowed  =  totalOrder;  [CE]  cannot  find  symbol  totalOrder  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  totalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  totalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  cannot  find  symbol  totalOrder	64	None	replace
126	[BUG]  [BUGGY]  this.allowed  =  Integer.MAXIMUM_AGING;  [CE]  cannot  find  symbol  MAXIMUM_AGING  [FE]                      TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.MAXIMUM_AGING;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.MAXIMUM_AGING;	  this.allowed    =    Integer.MAXIMAL;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_AGING	48	None	replace
127	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  1;  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  1;	  this.maximalOrder    =    maximalOrder    +    1;    This.maximalOrder    =    maximalOrder    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	32	None	replace
128	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  2;  [CE]  cannot  find  symbol  This  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  2;	  this.maximalOrder    =    maximalOrder    +    1;    This.maximalOrder    =    maximalOrder    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	32	None	replace
129	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  3;  [CE]  cannot  find  symbol  This  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  3;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  +  2;  This.maximalOrder  =  maximalOrder  +  3;	  this.maximalOrder    =    maximalOrder    +    1;    This.maximalOrder    =    maximalOrder    +    1;    	non-compiled	[CE]  cannot  find  symbol  This	32	None	replace
130	[BUG]  [BUGGY]  this.allowed  =  Integer.MAX_VALUE;  [CE]  incompatible  types  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.MAX_VALUE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.MAX_VALUE;	  this.allowed    =    Integer.MIN_VALUE;    	non-compiled	[CE]  incompatible  types	46	None	replace
131	[BUG]  [BUGGY]  this.allowed  =  Integer.MIN_VALUE  /  Integer.MAX_VALUE;  [CE]  incompatible  types  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.MIN_VALUE  /  Integer.MAX_VALUE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.MIN_VALUE  /  Integer.MAX_VALUE;	  this.allowed    =    Integer.MIN_VALUE;    	non-compiled	[CE]  incompatible  types	46	None	replace
132	[BUG]  [BUGGY]  this.allowed  =  Integer.MIN_VALUE  -  1;  [CE]  incompatible  types  [FE]                      TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.MIN_VALUE  -  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.MIN_VALUE  -  1;	  this.allowed    =    Integer.MIN_VALUE;    	non-compiled	[CE]  incompatible  types	46	None	replace
133	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
134	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
135	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
136	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximumOrder  =  MAXIMAL_AGING;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]                    AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximumOrder  =  MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.maximumOrder  =  MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	86	None	replace
137	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  [CE]  cannot  find  symbol  DEFAULT_AGING  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_AGING;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_AGING	81	None	replace
138	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ALLOWED;  [CE]  cannot  find  symbol  DEFAULT_ALLOWED  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ALLOWED;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ALLOWED;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_ALLOWED	81	None	replace
139	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	114	None	replace
140	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  possible  loss  of  precision	114	None	replace
141	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  minimalOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	114	None	replace
142	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	114	None	replace
143	[BUG]  [BUGGY]  this.maximalOrder  =  1;  this.maximalOrder  =  1;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  this.maximalOrder  =  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    this.maximalOrder  =  1;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	92	None	add
144	[BUG]  [BUGGY]  this.maximalOrder  =  1;  this.maximalOrder  =  2;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  this.maximalOrder  =  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    this.maximalOrder  =  2;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	92	None	add
145	[BUG]  [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  1;  }  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  1;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  1;  }	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	92	None	add
146	[BUG]  [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  maximalOrder)  {  this.maximalOrder  =  1;  }  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  maximalOrder)  {  this.maximalOrder  =  1;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    if(relativeAccuracy  ==  maximalOrder)  {  this.maximalOrder  =  1;  }	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	92	None	add
147	[BUG]  [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  maximumOrder)  {  this.maximalOrder  =  1;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  maximumOrder)  {  this.maximalOrder  =  1;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    if(relativeAccuracy  ==  maximumOrder)  {  this.maximalOrder  =  1;  }	  	non-compiled	[CE]  cannot  find  symbol  maximumOrder	92	None	add
148	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  [CE]  cannot  find  symbol  maximumOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximumOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	52	None	replace
149	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  /  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  /  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  /  DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    relativeAccuracy    /    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	97	None	replace
150	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  /  DEFAULT_ABSOLUTE_ACCURACY  +  1;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  /  DEFAULT_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  /  DEFAULT_ABSOLUTE_ACCURACY  +  1;	  this.relativeAccuracy    =    relativeAccuracy    /    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	97	None	replace
151	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  *  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  *  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  *  DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    relativeAccuracy    /    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	97	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  maximalOrder  *  2;	  this.maximalOrder    =    maximalOrder    *    1;    	compilable	  [FE]  AssertionError  	91	2	replace
153	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  *  2;  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  *  2;	  this.maximalOrder    =    maximalOrder    *    1;    	compilable	  [FE]  AssertionError  	91	2	replace
154	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	compilable	  [FE]  NumberIsTooSmallException  	75	3	replace
155	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [FE]  NumberIsTooSmallException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	compilable	  [FE]  NumberIsTooSmallException  	75	3	replace
156	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [CE]  cannot  find  symbol  maximumOrder  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	75	None	replace
157	[BUG]  [BUGGY]  this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [CE]  cannot  find  symbol  totalOrder  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  cannot  find  symbol  totalOrder	75	None	replace
158	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  This  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  =  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    This.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  This	113	None	replace
159	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    This.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	113	None	replace
160	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu	  this.maximalOrder    =    0;    if(relativeAccuracy    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    0;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
161	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu	  this.maximalOrder    =    0;    if(relativeAccuracy    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    0;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
162	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    0;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	105	None	replace
163	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  +  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  +  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  +  DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    absoluteAccuracy    +    relativeAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	39	None	replace
164	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  *  relativeAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  *  relativeAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  *  relativeAccuracy;	  this.relativeAccuracy    =    absoluteAccuracy    +    relativeAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	39	None	replace
165	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  +  absoluteAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  +  absoluteAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  +  absoluteAccuracy;	  this.relativeAccuracy    =    absoluteAccuracy    +    relativeAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	39	None	replace
166	[BUG]  [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	111	None	add
167	[BUG]  [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  This  [FE]      NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    This.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;	  	non-compiled	[CE]  cannot  find  symbol  This	111	None	add
168	[BUG]  [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER);  [CE]  ';'  expected  [FE]        NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER);  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER);	  	non-compiled	[CE]  ';'  expected	111	None	add
169	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  +  DEFAULT_ABSOLUTE_ACCURACY  +  1;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  +  DEFAULT_ABSOLUTE_ACCURACY  +  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  +  DEFAULT_ABSOLUTE_ACCURACY  +  1;	  this.relativeAccuracy    =    relativeAccuracy    +    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	20	None	replace
170	[BUG]  [BUGGY]  this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [CE]  incompatible  types  [FE]    NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  incompatible  types	67	None	replace
171	[BUG]  [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [CE]  variable  maximalOrder  might  not  have  been  initialized  [FE]      NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  variable  maximalOrder  might  not  have  been  initialized	67	None	replace
172	[BUG]  [BUGGY]  this.allowed  =  relativeAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [CE]  incompatible  types  [FE]        NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  relativeAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  relativeAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  incompatible  types	67	None	replace
173	[BUG]  [BUGGY]  this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }  [CE]  incompatible  types  [FE]          NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  2,  true);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  incompatible  types	67	None	replace
174	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  incomparable  types:  double  and  <null>  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	72	None	replace
175	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  cannot  find  symbol  maximumOrder  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	72	None	replace
176	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy!=  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  incomparable  types:  double  and  <null>  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy!=  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy!=  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	72	None	replace
177	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ALLOWED;  [CE]  cannot  find  symbol  ALLOWED  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ALLOWED;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ALLOWED;	  this.allowed    =    AllowedSolution.ANY_ALLOWED;    	non-compiled	[CE]  cannot  find  symbol  ALLOWED	59	None	replace
178	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  DEFAULT_ABSOLUTE_ACCURACY);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  DEFAULT_ABSOLUTE_ACCURACY);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_MAXIMAL_AGING,  DEFAULT_ABSOLUTE_ACCURACY);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    DEFAULT_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	55	None	replace
179	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  this.maximalOrder  =  MAXIMAL_AGING;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  incomparable  types:  double  and  <null>  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  this.maximalOrder  =  MAXIMAL_AGING;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  this.maximalOrder  =  MAXIMAL_AGING;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    MAXIMAL_AGING;    if(relativeAccuracy    ==    null)    {    this.maximalOrder    =    MAXIMAL_AGING;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	25	None	replace
180	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  this.maximalOrder  =  MAXIMAL_AGING;  }  [CE]  incomparable  types:  double  and  <null>  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  this.maximalOrder  =  MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  this.maximalOrder  =  MAXIMAL_AGING;  }	  this.maximalOrder    =    MAXIMAL_AGING;    if(relativeAccuracy    ==    null)    {    this.maximalOrder    =    MAXIMAL_AGING;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	25	None	replace
181	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  MaximumOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    MaximumOrder.DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	76	None	replace
182	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  +  1;  [CE]  cannot  find  symbol  MaximumOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  +  1;	  this.maximalOrder    =    MaximumOrder.DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	76	None	replace
183	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  +  2;  [CE]  cannot  find  symbol  MaximumOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  +  2;	  this.maximalOrder    =    MaximumOrder.DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	76	None	replace
184	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  -=  1;	  this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	112	4	replace
185	[BUG]  [BUGGY]  this.maximalOrder  -=  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  -=  1;	  this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	112	4	replace
186	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  /  1;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  /  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    /    1;    this.maximalOrder  =  maximalOrder  /  1;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	14	None	add
187	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  /  2;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  /  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    /    1;    this.maximalOrder  =  maximalOrder  /  2;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	14	None	add
188	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximumOrder  /  1;  [CE]  cannot  find  symbol  maximumOrder  [FE]        TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximumOrder  /  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    /    1;    this.maximalOrder  =  maximumOrder  /  1;	  	non-compiled	[CE]  cannot  find  symbol  maximumOrder	14	None	add
189	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  This.maximalOrder  =  maximalOrder  /  1;  [CE]  cannot  find  symbol  This  [FE]          TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  This.maximalOrder  =  maximalOrder  /  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    /    1;    This.maximalOrder  =  maximalOrder  /  1;	  	non-compiled	[CE]  cannot  find  symbol  This	14	None	add
190	[BUG]  [BUGGY]  this.allowed  =  Integer.DEFAULT_AGING;  [CE]  cannot  find  symbol  DEFAULT_AGING  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.DEFAULT_AGING;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.DEFAULT_AGING;	  this.allowed    =    Integer.DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_AGING	102	None	replace
191	[BUG]  [BUGGY]  this.allowed  =  Integer.DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.DEFAULT_MAXIMAL_AGING;	  this.allowed    =    Integer.DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	102	None	replace
192	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  1;  [CE]  cannot  find  symbol  This  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    This.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  This	51	None	replace
193	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  2;  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  2;	  this.maximalOrder    =    maximalOrder    -    1;    This.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  This	51	None	replace
194	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  This.maximalOrder  =  maximalOrder  -  1;  [CE]  cannot  find  symbol  maximumOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  This.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  -  1;  This.maximalOrder  =  maximalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    This.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	51	None	replace
195	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maxialOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  maxialOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maxialOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.maxialOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maxialOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	95	None	replace
196	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  this.maxialOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  maximumOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  this.maxialOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  this.maxialOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maxialOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	95	None	replace
197	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximumOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  maximumOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximumOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximumOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maxialOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	95	None	replace
198	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maxialOrder  =  maximumOrder;  [CE]  cannot  find  symbol  maxialOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.maxialOrder  =  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.maxialOrder  =  maximumOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maxialOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	95	None	replace
199	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [CE]  cannot  find  symbol  absoluteOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder  -  1;  this.maximalOrder  =  maximalOrder  -  2;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    2;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	53	None	replace
200	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [CE]  cannot  find  symbol  maximumOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  -  1;  this.maximalOrder  =  maximalOrder  -  2;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    2;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	53	None	replace
201	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  1;  this.maximalOrder  =  maximumOrder  -  2;  [CE]  cannot  find  symbol  maximumOrder  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  1;  this.maximalOrder  =  maximumOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  -  1;  this.maximalOrder  =  maximumOrder  -  2;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    2;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	53	None	replace
202	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	                this.allowed        =        AllowedSolution.ANY_SIDE;        this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;	  	compilable	  [FE]  TooManyEvaluationsException  	6	1	add
203	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;	  	compilable	  [FE]  TooManyEvaluationsException  	6	1	add
204	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [CE]  incompatible  types  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        this.allowed    =    AllowedSolution.ANY_SIDE;    this.maximalOrder  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;	  	non-compiled	[CE]  incompatible  types	6	None	add
205	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  This.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [CE]  cannot  find  symbol  This  [FE]        TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  This.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        this.allowed    =    AllowedSolution.ANY_SIDE;    This.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;	  	non-compiled	[CE]  cannot  find  symbol  This	6	None	add
206	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  allowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [CE]  cannot  find  symbol  allowedSolution  [FE]          TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.allowed  =  allowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  allowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;	  	non-compiled	[CE]  cannot  find  symbol  allowedSolution	6	None	add
207	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximalOrder  +  2;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximalOrder  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    +    2;    this.maximalOrder  =  maximalOrder  +  2;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	21	None	add
208	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximumOrder  +  2;  [CE]  cannot  find  symbol  maximumOrder  [FE]      AssertionError    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximumOrder  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    +    2;    this.maximalOrder  =  maximumOrder  +  2;	  	non-compiled	[CE]  cannot  find  symbol  maximumOrder	21	None	add
209	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximalOrder  +  1;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximalOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    +    2;    this.maximalOrder  =  maximalOrder  +  1;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	21	None	add
210	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  *  functionValueAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                      TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  *  functionValueAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  *  functionValueAccuracy;	  this.relativeAccuracy    =    absoluteAccuracy    *    functionValueAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	37	None	replace
211	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  *  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  *  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  *  DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    absoluteAccuracy    *    functionValueAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	37	None	replace
212	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    this.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  possible  loss  of  precision	71	None	replace
213	[BUG]  [BUGGY]  this.maximalOrder  =  totalOrder  -  1;  [CE]  cannot  find  symbol  totalOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  totalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  totalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    this.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  totalOrder	71	None	replace
214	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy  -  1;  [CE]  cannot  find  symbol  maximumOrder  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    this.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	71	None	replace
215	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.maximalOrder  =  maximalOrder  -  2;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.maximalOrder  =  maximalOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    -    2;    this.maximalOrder  =  maximalOrder  -  2;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	12	None	add
216	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.maximalOrder  =  maximumOrder  -  2;  [CE]  cannot  find  symbol  maximumOrder  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.maximalOrder  =  maximumOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    -    2;    this.maximalOrder  =  maximumOrder  -  2;	  	non-compiled	[CE]  cannot  find  symbol  maximumOrder	12	None	add
217	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.maximalOrder  =  maximalOrder  -  1;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    -    2;    this.maximalOrder  =  maximalOrder  -  1;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	12	None	add
218	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  /  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    /    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	18	None	replace
219	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  /  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  maximumOrder  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  /  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  /  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    /    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	18	None	replace
220	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  /  DEFAULT_MAXIMAL_AGING  +  1;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  /  DEFAULT_MAXIMAL_AGING  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY  /  DEFAULT_MAXIMAL_AGING  +  1;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    /    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	18	None	replace
221	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  RelativeAccuracy  [FE]        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ABSOLUTE_ACCURACY;	  this.allowed    =    RelativeAccuracy.ANY_SIDE;    	non-compiled	[CE]  cannot  find  symbol  RelativeAccuracy	58	None	replace
222	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  RelativeAccuracy  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;	  this.allowed    =    RelativeAccuracy.ANY_SIDE;    	non-compiled	[CE]  cannot  find  symbol  RelativeAccuracy	58	None	replace
223	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_ALLOW;  [CE]  cannot  find  symbol  RelativeAccuracy  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_ALLOW;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_ALLOW;	  this.allowed    =    RelativeAccuracy.ANY_SIDE;    	non-compiled	[CE]  cannot  find  symbol  RelativeAccuracy	58	None	replace
224	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	84	None	replace
225	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
226	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
227	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  -=  MAXIMAL_AGING;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  -=  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    this.maximalOrder  -=  MAXIMAL_AGING;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	103	None	add
228	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  int  MAXIMAL_AGING  =  relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY?  MAXIMAL_AGING  :  MAXIMAL_AGING;  [CE]  illegal  start  of  expression  [FE]      NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  int  MAXIMAL_AGING  =  relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY?  MAXIMAL_AGING  :  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    int  MAXIMAL_AGING  =  relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY?  MAXIMAL_AGING  :  MAXIMAL_AGING;	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
229	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  This.maximalOrder  -=  MAXIMAL_AGING;  [CE]  cannot  find  symbol  This  [FE]        NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  This.maximalOrder  -=  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    This.maximalOrder  -=  MAXIMAL_AGING;	  	non-compiled	[CE]  cannot  find  symbol  This	103	None	add
230	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  int  MAXIMAL_AGING  =  relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY?  maximumOrder  :  MAXIMAL_AGING;  [CE]  illegal  start  of  expression  [FE]          NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  int  MAXIMAL_AGING  =  relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY?  maximumOrder  :  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    int  MAXIMAL_AGING  =  relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY?  maximumOrder  :  MAXIMAL_AGING;	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
231	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER  +  1;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	compilable	  [FE]  AssertionError  	1	2	replace
232	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER  +  1;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER  +  1;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	compilable	  [FE]  AssertionError  	1	2	replace
233	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  /  functionValueAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  /  functionValueAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  /  functionValueAccuracy;	  this.relativeAccuracy    =    absoluteAccuracy    /    functionValueAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	38	None	replace
234	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_ALLOW  +  1;  [CE]  cannot  find  symbol  ANY_ALLOW  [FE]        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_ALLOW  +  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_ALLOW  +  1;	  this.allowed    =    AllowedSolution.ANY_ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ANY_ALLOW	87	None	replace
235	[BUG]  [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL;  [CE]  cannot  find  symbol  MAXIMAL  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  Integer.MAXIMAL;	  this.maximalOrder    =    Integer.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MAXIMAL	49	None	replace
236	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  /  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  maximumOrder  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  /  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  /  DEFAULT_ABSOLUTE_ACCURACY;	  this.maximalOrder    =    maximalOrder    +    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	109	None	replace
237	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
238	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValu	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
239	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
240	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
241	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maxialOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  maxialOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maxialOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maxialOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maxialOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	95	None	replace
242	[BUG]  [BUGGY]  this.maximalOrder  =  0;  this.maxialOrder  =  0;  [CE]  cannot  find  symbol  maxialOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  0;  this.maxialOrder  =  0;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  0;  this.maxialOrder  =  0;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maxialOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	95	None	replace
243	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  this.maximalOrder  =  maximalOrder  +  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  this.maximalOrder  =  maximalOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  this.maximalOrder  =  maximalOrder  +  1;	  this.maximalOrder    =    maximalOrder    +    1;    this.maximalOrder    =    maximalOrder    +    1;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
244	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  /  functionValueAccuracy  +  1;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  /  functionValueAccuracy  +  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  /  functionValueAccuracy  +  1;	  this.relativeAccuracy    =    absoluteAccuracy    /    functionValueAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	38	None	replace
245	[BUG]  [BUGGY]  this.maximalOrder  -=  2);  [CE]  ';'  expected  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  2);  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  -=  2);	  this.maximalOrder    -=    MAXIMAL_AGING;    	non-compiled	[CE]  ';'  expected	104	None	replace
246	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]      NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  4;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  -=  4;	  this.maximalOrder    -=    MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	104	4	replace
247	[BUG]  [BUGGY]  this.maximalOrder  -=  4;  [FE]  NegativeArraySizeException  [FE]      NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  4;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  -=  4;	  this.maximalOrder    -=    MAXIMAL_AGING;    	compilable	  [FE]  NegativeArraySizeException  	104	4	replace
248	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    This.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
249	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_AGING  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_AGING;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    This.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_AGING	113	None	replace
250	[BUG]  [BUGGY]  this.maximumOrder  =  0;  [CE]  cannot  find  symbol  maximumOrder  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  0;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  0;	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    this.maximalOrder    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	41	None	replace
251	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximumOrder    -    1;    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
252	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  -  1;  [CE]  cannot  find  symbol  MaximumOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.DEFAULT_MAXIMAL_ORDER  -  1;	  this.maximalOrder    =    MaximumOrder.DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	76	None	replace
253	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_AGING  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_AGING;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_AGING	1	None	replace
254	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_AGING  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_AGING	114	None	replace
255	[BUG]  [BUGGY]  this.maximalOrder  =  MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  minimalOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MAXIMAL_AGING;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	114	None	replace
256	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  possible  loss  of  precision	114	None	replace
257	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  /  relativeAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  /  relativeAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  /  relativeAccuracy;	  this.relativeAccuracy    =    absoluteAccuracy    +    relativeAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	39	None	replace
258	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  +  REDUCTION_FACTOR;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  +  REDUCTION_FACTOR;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  +  REDUCTION_FACTOR;	  this.relativeAccuracy    =    absoluteAccuracy    +    relativeAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	39	None	replace
259	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [CE]  ';'  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
260	[BUG]  [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [CE]  ';'  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
261	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL  [CE]  ';'  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
262	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MAXIMAL_AGING  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  MAXIMAL_AGING  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    this.maximalOrder    =    maximalOrder    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	4	replace
263	[BUG]  [BUGGY]  this.maximalOrder  =  MAXIMAL_AGING  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MAXIMAL_AGING  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MAXIMAL_AGING  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    this.maximalOrder    =    maximalOrder    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	4	replace
264	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  /  3;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  /  3;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    /    1;    this.maximalOrder  =  maximalOrder  /  3;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	14	None	add
265	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_AGING  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_AGING;  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_AGING;  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MINIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_AGING	115	None	replace
266	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  3;  [CE]  cannot  find  symbol  This  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  3;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  -  2;  This.maximalOrder  =  maximalOrder  -  3;	  this.maximalOrder    =    maximalOrder    -    1;    This.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  This	51	None	replace
267	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
268	[BUG]  [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	86	None	replace
269	[BUG]  [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	86	None	replace
270	[BUG]  [BUGGY]  this.allowed  =  allowedSolution.ANY_ALLOW;  [CE]  cannot  find  symbol  allowedSolution  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  allowedSolution.ANY_ALLOW;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  allowedSolution.ANY_ALLOW;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  cannot  find  symbol  allowedSolution	8	None	replace
271	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.A  [CE]  ';'  expected  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.A  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.A	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
272	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY  [CE]  ';'  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
273	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  -  1;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	69	None	replace
274	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  =  MAXIMAL_AGING;  [CE]  cannot  find  symbol  This  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  This.maximalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    This.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  This	94	None	replace
275	[BUG]  [BUGGY]  this.maximalOrder  =  0;  This.maximalOrder  =  0;  [CE]  cannot  find  symbol  This  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  0;  This.maximalOrder  =  0;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  0;  This.maximalOrder  =  0;	  this.maximalOrder    =    MAXIMAL_AGING;    This.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  This	94	None	replace
276	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximalOrder  +  3;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  +  2;  this.maximalOrder  =  maximalOrder  +  3;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    +    2;    this.maximalOrder  =  maximalOrder  +  3;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	21	None	add
277	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  MAXIMAL_AGING;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.minimalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
278	[BUG]  [BUGGY]  this.maximalOrder  =  0;  this.minimalOrder  =  0;  [CE]  cannot  find  symbol  minimalOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  0;  this.minimalOrder  =  0;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  0;  this.minimalOrder  =  0;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	96	None	replace
279	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  /  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  /  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  /  1;	  this.maximalOrder    =    maximumOrder    /    1;    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
280	[BUG]  [BUGGY]  this.maximalOrder  =  totalOrder  /  1;  [CE]  cannot  find  symbol  totalOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  totalOrder  /  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  totalOrder  /  1;	  this.maximalOrder    =    maximumOrder    /    1;    	non-compiled	[CE]  cannot  find  symbol  totalOrder	89	None	replace
281	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
282	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
283	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
284	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }  [CE]  possible  loss  of  precision  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
285	[BUG]  [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  +  absoluteAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  +  absoluteAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  +  absoluteAccuracy;	  this.relativeAccuracy    =    RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	61	None	replace
286	[BUG]  [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  +  relativeAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  +  relativeAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY  +  relativeAccuracy;	  this.relativeAccuracy    =    RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	61	None	replace
287	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder;  this.maximalOrder  =  0;  [CE]  cannot  find  symbol  absoluteOrder  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder;  this.maximalOrder  =  0;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder;  this.maximalOrder  =  0;	  this.maximalOrder    =    0;    this.maximalOrder    =    0;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	40	None	replace
288	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.relativeAccuracy  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.relativeAccuracy  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        this.allowed    =    AllowedSolution.ANY_SIDE;    this.relativeAccuracy  =  AllowedSolution.ANY_SIDE;  this.allowed  =  AllowedSolution.ANY_SIDE;	  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	6	None	add
289	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  =  MAXIMAL_AGING;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    this.maximalOrder  =  MAXIMAL_AGING;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	103	None	add
290	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maxialOrder  -=  MAXIMAL_AGING;  [CE]  cannot  find  symbol  maxialOrder  [FE]      NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maxialOrder  -=  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    this.maxialOrder  -=  MAXIMAL_AGING;	  	non-compiled	[CE]  cannot  find  symbol  maxialOrder	103	None	add
291	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  -=  MAXIMAL_GING;  [CE]  cannot  find  symbol  MAXIMAL_GING  [FE]        NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  -=  MAXIMAL_GING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    this.maximalOrder  -=  MAXIMAL_GING;	  	non-compiled	[CE]  cannot  find  symbol  MAXIMAL_GING	103	None	add
292	[BUG]  [BUGGY]  this.relativeAccuracy  =  DEFAULT_  >>  ';'  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  DEFAULT_  >>  ';'  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  DEFAULT_  >>  ';'	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  ';'  expected	81	None	replace
293	[BUG]  [BUGGY]  this.relativeAccuracy  =  DEFAULT_  >>  ';';  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  DEFAULT_  >>  ';';  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  DEFAULT_  >>  ';';	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	81	None	replace
294	[BUG]  [BUGGY]  this.relativeAccuracy  =  DEFAULT_!=  ';';  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  DEFAULT_!=  ';';  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  DEFAULT_!=  ';';	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	81	None	replace
295	[BUG]  [BUGGY]  this.relativeAccuracy  =  DEFAULT_!=  ';'  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  DEFAULT_!=  ';'  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  DEFAULT_!=  ';'	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  ';'  expected	81	None	replace
296	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximalOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
297	[BUG]  [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  RestrictedSolution  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximalOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  RestrictedSolution	98	None	replace
298	[BUG]  [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximalOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
299	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  +  4;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  +  4;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE  +  4;	  this.allowed    =    AllowedSolution.ANY_SIDE    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	88	None	replace
300	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  MAXIMAL_AGING);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  MAXIMAL_AGING);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  MAXIMAL_AGING);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    DEFAULT_MAXIMAL_AGING);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	56	None	replace
301	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    maximumOrder    =    absoluteAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
302	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    maximumOrder    =    absoluteAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
303	[BUG]  [BUGGY]  this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    maximumOrder    =    absoluteAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
304	[BUG]  [BUGGY]  this.absoluteOrder  =  absoluteOrder;  [CE]  cannot  find  symbol  absoluteOrder  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.absoluteOrder  =  absoluteOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.absoluteOrder  =  absoluteOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	65	None	replace
305	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
306	[BUG]  [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	92	None	add
307	[BUG]  [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  else  {  this.maximalOrder  =  1;  }  [CE]  incomparable  types:  double  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  else  {  this.maximalOrder  =  1;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  else  {  this.maximalOrder  =  1;  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	92	None	add
308	[BUG]  [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  this.maximalOrder  =  1;  [CE]  incomparable  types:  double  and  <null>  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  this.maximalOrder  =  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  this.maximalOrder  =  1;	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	92	None	add
309	[BUG]  [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  incomparable  types:  double  and  <null>  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	92	None	add
310	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.relativeAccuracy  =  absoluteAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.relativeAccuracy  =  absoluteAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.relativeAccuracy  =  absoluteAccuracy;	  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	62	None	add
311	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  illegal  start  of  expression  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
312	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
313	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  	compilable	  [FE]  TooManyEvaluationsException  	62	1	add
314	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  	compilable	  [FE]  TooManyEvaluationsException  	62	1	add
315	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
316	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
317	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	84	None	replace
318	[BUG]  [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	84	None	replace
319	[BUG]  [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	85	None	replace
320	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
321	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  2;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    2;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
322	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  this.maximalOrder  =  maximalOrder  -  2;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    2;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
323	[BUG]  [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  +  deFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  relativeAccuracy  +  deFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  relativeAccuracy  +  deFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	19	None	replace
324	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  REDUCTION_FACTOR);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  REDUCTION_FACTOR);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  REDUCTION_FACTOR);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    DEFAULT_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	55	None	replace
325	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING);  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_AGING);	  this.maximalOrder    =    MAXIMAL_AGING;    this.maximalOrder    =    MAXIMAL_AGING);    	non-compiled	[CE]  ';'  expected	116	None	replace
326	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximumOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
327	[BUG]  [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RestrictedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximumOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
328	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MAX_VALUE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  Integer.MAX_VALUE;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	compilable	  [FE]  NegativeArraySizeException  	78	4	replace
329	[BUG]  [BUGGY]  this.maximalOrder  =  Integer.MAX_VALUE;  [FE]  NegativeArraySizeException  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MAX_VALUE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  Integer.MAX_VALUE;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	compilable	  [FE]  NegativeArraySizeException  	78	4	replace
330	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximalOrder  *  3;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  *  1;  this.maximalOrder  =  maximalOrder  *  3;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    *    1;    this.maximalOrder  =  maximalOrder  *  3;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	90	None	add
331	[BUG]  [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  *  REDUCTION_FACTOR;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                      TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  absoluteAccuracy  *  REDUCTION_FACTOR;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  absoluteAccuracy  *  REDUCTION_FACTOR;	  this.relativeAccuracy    =    absoluteAccuracy    *    functionValueAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	37	None	replace
332	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE  +  relativeAccuracy;  [CE]  cannot  find  symbol  RelativeAccuracy  [FE]        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE  +  relativeAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE  +  relativeAccuracy;	  this.allowed    =    RelativeAccuracy.ANY_SIDE;    	non-compiled	[CE]  cannot  find  symbol  RelativeAccuracy	58	None	replace
333	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    maximalOrder);    }    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
334	[BUG]  [BUGGY]  this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [CE]  cannot  find  symbol  totalOrder  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  totalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    maximalOrder);    }    	non-compiled	[CE]  cannot  find  symbol  totalOrder	73	None	replace
335	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    maximalOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	73	None	replace
336	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_ASCII;  [CE]  cannot  find  symbol  ANY_ASCII  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_ASCII;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_ASCII;	  this.allowed    =    AllowedSolution.ANY_ALLOWED;    	non-compiled	[CE]  cannot  find  symbol  ANY_ASCII	59	None	replace
337	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_ALLOWED  +  1;  [CE]  cannot  find  symbol  ANY_ALLOWED  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_ALLOWED  +  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_ALLOWED  +  1;	  this.allowed    =    AllowedSolution.ANY_ALLOWED;    	non-compiled	[CE]  cannot  find  symbol  ANY_ALLOWED	59	None	replace
338	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximumOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximumOrder);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximumOrder);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximumOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	replace
339	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximalOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximalOrder);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximalOrder);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximumOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	replace
340	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximumOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	replace
341	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximumOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximumOrder);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximumOrder);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximumOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	replace
342	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [CE]  cannot  find  symbol  maximumOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder  -  1;  this.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder  -  1;  this.maximalOrder  =  maximalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    this.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	50	None	replace
343	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximumOrder);  }  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximumOrder);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximumOrder);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    maximumOrder);    }    	non-compiled	[CE]  possible  loss  of  precision	74	None	replace
344	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  DEFAULT_ABSOLUTE_ACCURACY  |  DEFAULT_MAXIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  DEFAULT_ABSOLUTE_ACCURACY  |  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  -  DEFAULT_ABSOLUTE_ACCURACY  |  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    |    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MAXIMAL_AGING	17	None	replace
345	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  4;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  4;	  this.maximalOrder    =    1;    	compilable	  [FE]  AssertionError  	93	2	replace
346	[BUG]  [BUGGY]  this.maximalOrder  =  4;  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  4;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  4;	  this.maximalOrder    =    1;    	compilable	  [FE]  AssertionError  	93	2	replace
347	[BUG]  [BUGGY]  this.maximumOrder  =  absoluteAccuracy;  [CE]  cannot  find  symbol  maximumOrder  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  absoluteAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  absoluteAccuracy;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(relativeAccuracy    ==    DEFAULT_MAXIMAL_ORDER)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    maximumOrder    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	5	None	replace
348	[BUG]  [BUGGY]  this.allowed  =  Integer.MIN_VALUE  +  1;  [CE]  incompatible  types  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.MIN_VALUE  +  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.MIN_VALUE  +  1;	  this.allowed    =    Integer.MIN_VALUE;    	non-compiled	[CE]  incompatible  types	46	None	replace
349	[BUG]  [BUGGY]  this.allowed  =  ReductionFACTOR;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  cannot  find  symbol  ReductionFACTOR  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  ReductionFACTOR;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  ReductionFACTOR;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  cannot  find  symbol  ReductionFACTOR	64	None	replace
350	[BUG]  [BUGGY]  this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  incompatible  types  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  absoluteAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  incompatible  types	64	None	replace
351	[BUG]  [BUGGY]  this.allowed  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValu  [CE]  ')'  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValu  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  super(relativeAccuracy,  absoluteAccuracy,  functionValu	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
352	[BUG]  [BUGGY]  this.allowed  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  MAXIMAL_AGING  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  cannot  find  symbol  MAXIMAL_AGING	64	None	replace
353	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  this.maximumOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  this.maximumOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  this.maximumOrder  =  DEFAULT_ABSOLUTE_ACCURACY;	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    this.maximumOrder    =    maximalOrder;    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	110	None	replace
354	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  +  2;  [CE]  cannot  find  symbol  MaximumOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  +  2;	  this.maximalOrder    =    MaximumOrder.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	29	None	replace
355	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  -  1;  [CE]  cannot  find  symbol  MaximumOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  -  1;	  this.maximalOrder    =    MaximumOrder.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	29	None	replace
356	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ALLOW_SIDE;  [CE]  cannot  find  symbol  ALLOW_SIDE  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ALLOW_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ALLOW_SIDE;	          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed    =    AllowedSolution.ANY_SIDE;    	non-compiled	[CE]  cannot  find  symbol  ALLOW_SIDE	7	None	replace
357	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  MAXIMAL_AGING;  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_ABSOLUTE_ACCURACY;  this.maximalOrder  =  MAXIMAL_AGING;	  this.maximalOrder    =    MAXIMAL_AGING;    this.maximalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
358	[BUG]  [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	111	None	add
359	[BUG]  [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  -=  DEFAULT_MINIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_MINIMAL_ORDER  [FE]      NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  DEFAULT_MAXIMAL_ORDER;  this.maximalOrder  -=  DEFAULT_MINIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder  -=  DEFAULT_MINIMAL_ORDER;	  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MINIMAL_ORDER	111	None	add
360	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  [CE]  incompatible  types  [FE]    NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.maximalOrder  =  AllowedSolution.ANY_SIDE;	  	non-compiled	[CE]  incompatible  types	66	None	add
361	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.relativeAccuracy  =  AllowedSolution.ANY_SIDE;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]      NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.relativeAccuracy  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.relativeAccuracy  =  AllowedSolution.ANY_SIDE;	  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	66	None	add
362	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]        NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;	  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	66	None	add
363	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.relativeAccuracy  =  absoluteAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]          NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.relativeAccuracy  =  absoluteAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.relativeAccuracy  =  absoluteAccuracy;	  	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	66	None	add
364	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximalOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximalOrder);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  System.arraycopy(relativeAccuracy,  0,  this.allowed,  0,  maximalOrder);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximalOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	11	None	replace
365	[BUG]  [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  AllowedSolution.ANY_SIDE;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
366	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteOrder  *  1;  [CE]  cannot  find  symbol  absoluteOrder  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteOrder  *  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteOrder  *  1;	  this.maximalOrder    =    maximalOrder    *    1;    	non-compiled	[CE]  cannot  find  symbol  absoluteOrder	91	None	replace
367	[BUG]  [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  this.maximalOrder  =  maximalOrder  +  2;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  absoluteAccuracy  +  1;  this.maximalOrder  =  maximalOrder  +  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  absoluteAccuracy  +  1;  this.maximalOrder  =  maximalOrder  +  2;	  this.maximalOrder    =    maximalOrder    +    1;    this.maximalOrder    =    maximalOrder    +    2;    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
368	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  This  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  This.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    This.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  This	113	None	replace
369	[BUG]  [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_ABSOLUTE_ACCURACY,  DEFAULT_MAXIMAL_AGING);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_ABSOLUTE_ACCURACY,  DEFAULT_MAXIMAL_AGING);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy,  DEFAULT_ABSOLUTE_ACCURACY,  DEFAULT_MAXIMAL_AGING);	  super(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy,    DEFAULT_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	55	None	replace
370	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;  [CE]  cannot  find  symbol  minimalOrder  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MINIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	114	None	replace
371	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  DEFAULT_MINIMAL_ORDER  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MINIMAL_ORDER;  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MINIMAL_ORDER	114	None	replace
372	[BUG]  [BUGGY]  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [CE]  cannot  find  symbol  minimalOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.minimalOrder  =  DEFAULT_MAXIMAL_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.minimalOrder    =    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	114	None	replace
373	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  incomparable  types:  double  and  <null>  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	9	None	replace
374	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  -  maximalOrder;  [CE]  cannot  find  symbol  MaximumOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  -  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.MAXIMAL_AGING  -  maximalOrder;	  this.maximalOrder    =    MaximumOrder.MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	29	None	replace
375	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
376	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
377	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximumOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
378	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
379	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  maximalOrder;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.maximalOrder  =  maximalOrder;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	66	None	add
380	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  Integer.MAXIMAL_AGING;  [CE]  cannot  find  symbol  MAXIMAL_AGING  [FE]      NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  Integer.MAXIMAL_AGING;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.maximalOrder  =  Integer.MAXIMAL_AGING;	  	non-compiled	[CE]  cannot  find  symbol  MAXIMAL_AGING	66	None	add
381	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  Integer.parseInt(relativeAccuracy);  [CE]  no  suitable  method  found  for  parseInt(double)  [FE]        NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  Integer.parseInt(relativeAccuracy);  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.maximalOrder  =  Integer.parseInt(relativeAccuracy);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(double)	66	None	add
382	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  maximumOrder;  [CE]  cannot  find  symbol  maximumOrder  [FE]          NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  maximumOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.maximalOrder  =  maximumOrder;	  	non-compiled	[CE]  cannot  find  symbol  maximumOrder	66	None	add
383	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  absoluteAccuracy;  [CE]  possible  loss  of  precision  [FE]            NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  0,  true);  }  this.maximalOrder  =  absoluteAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    this.maximalOrder  =  absoluteAccuracy;	  	non-compiled	[CE]  possible  loss  of  precision	66	None	add
384	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL  [CE]  ';'  expected  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
385	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [CE]  ';'  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
386	[BUG]  [BUGGY]  this.allowed  =  relativeAccuracy;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [CE]  incompatible  types  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  relativeAccuracy;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  relativeAccuracy;  if(relativeAccuracy  >  MAXIMAL_ORDER)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_AGING;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  incompatible  types	101	None	replace
387	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_  [CE]  ';'  expected  [FE]                    TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  MAXIMAL_AGING)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  Integer.MAXIMAL_	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    Integer.MAXIMAL_AGING;    }    	non-compiled	[CE]  ';'  expected	101	None	replace
388	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximalOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
389	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSol  [CE]  ';'  expected  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSol  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSol	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximalOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	98	None	replace
390	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximalOrder  =  maximalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximalOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
391	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  &  DEFAULT_ABSOLUTE_ACCURACY  |  DEFAULT_MAXIMAL_AGING;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  &  DEFAULT_ABSOLUTE_ACCURACY  |  DEFAULT_MAXIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  &  DEFAULT_ABSOLUTE_ACCURACY  |  DEFAULT_MAXIMAL_AGING;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    |    DEFAULT_MAXIMAL_AGING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	17	None	replace
392	[BUG]  [BUGGY]  this.maxialOrder  =  maximalOrder;  [CE]  cannot  find  symbol  maxialOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maxialOrder  =  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maxialOrder  =  maximalOrder;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(relativeAccuracy    ==    DEFAULT_MAXIMAL_ORDER)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_AGING;    }    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	4	None	replace
393	[BUG]  [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  -=  MAXIMAL_AGING);  [CE]  ';'  expected  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  MAXIMAL_AGING;  this.maximalOrder  -=  MAXIMAL_AGING);  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    -=    MAXIMAL_AGING;    this.maximalOrder  -=  MAXIMAL_AGING);	  	non-compiled	[CE]  ';'  expected	103	None	add
394	[BUG]  [BUGGY]  this.relativeAccuracy  -=  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  -=  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  -=  DEFAULT_ABSOLUTE_ACCURACY;	  this.relativeAccuracy    =    DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	19	None	replace
395	[BUG]  [BUGGY]  this.maximalOrder  -=  maximumOrder;  [CE]  cannot  find  symbol  maximumOrder  [FE]    NegativeArraySizeException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  -=  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  -=  maximumOrder;	  this.maximalOrder    -=    DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	112	None	replace
396	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.maximalOrder,  0,  maximumOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.maximalOrder,  0,  maximumOrder);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.maximalOrder,  0,  maximumOrder);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximumOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	replace
397	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    0;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
398	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    0;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
399	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    0;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	106	None	replace
400	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximumOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximumOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximumOrder  =  0;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    0;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
401	[BUG]  [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY,  maximalOrder;  [CE]  ';'  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY,  maximalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  =  RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY,  maximalOrder;	  this.relativeAccuracy    =    RelativeAccuracy.DEFAULT_ABSOLUTE_ACCURACY;    	non-compiled	[CE]  ';'  expected	61	None	replace
402	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE  /  1;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE  /  1;	  this.allowed    =    AllowedSolution.ANY_SIDE    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	88	None	replace
403	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  not  a  statement	81	None	replace
404	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(DEFAULT_ABSOLUTE_ACCURACY  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(DEFAULT_ABSOLUTE_ACCURACY  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(DEFAULT_ABSOLUTE_ACCURACY  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  not  a  statement	81	None	replace
405	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this.relativeAccuracy  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this.relativeAccuracy  =  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(DEFAULT_MAXIMAL_ORDER  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  this.maximalOrder  =  DEFAULT_MAXIMAL_ORDER;  }  else  {  this.relativeAccuracy  =	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.relativeAccuracy    =    DEFAULT_    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
406	[BUG]  [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  variable  maximalOrder  might  not  have  been  initialized  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  variable  maximalOrder  might  not  have  been  initialized	63	None	replace
407	[BUG]  [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  variable  maximalOrder  might  not  have  been  initialized  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  variable  maximalOrder  might  not  have  been  initialized	63	None	replace
408	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ALLOW_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  RelativeAccuracy  [FE]        TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ALLOW_ABSOLUTE_ACCURACY;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ALLOW_ABSOLUTE_ACCURACY;	  this.allowed    =    RelativeAccuracy.ANY_SIDE;    	non-compiled	[CE]  cannot  find  symbol  RelativeAccuracy	58	None	replace
409	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  4;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  maximalOrder  /  4;	  this.maximalOrder    =    maximumOrder    /    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	4	replace
410	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  4;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  4;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  /  4;	  this.maximalOrder    =    maximumOrder    /    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	4	replace
411	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  +  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
412	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
413	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.minimalOrder  =  maximalOrder  -  2;  [CE]  cannot  find  symbol  minimalOrder  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  -  2;  this.minimalOrder  =  maximalOrder  -  2;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    maximalOrder    -    2;    this.minimalOrder  =  maximalOrder  -  2;	  	non-compiled	[CE]  cannot  find  symbol  minimalOrder	12	None	add
414	[BUG]  [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  MaximumOrder  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  MaximumOrder.DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  MaximumOrder.DEFAULT_ABSOLUTE_ACCURACY;	  this.maximalOrder    =    REDUCTION_FACTOR;    	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	77	None	replace
415	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    maximumOrder    =    absoluteAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
416	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    maximumOrder    =    absoluteAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
417	[BUG]  [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  Integer.MAXIMAL_AGING;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximalOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    maximumOrder    =    absoluteAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
418	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximumOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximumOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  null)  {  for(int  i  =  0,  maximumOrder  =  relativeAccuracy;  i  <  maximalOrder;  ++i)  {  maximumOrder  =  absoluteAccuracy;  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    for(int    i    =    0,    maximalOrder    =    relativeAccuracy;    i    <    maximalOrder;    ++i)    {    maximumOrder    =    absoluteAccuracy;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
419	[BUG]  [BUGGY]  this.maximalOrder  =  DEFAULT_MINIMAL_AGING;  [CE]  cannot  find  symbol  DEFAULT_MINIMAL_AGING  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  DEFAULT_MINIMAL_AGING;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  DEFAULT_MINIMAL_AGING;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    this.maximalOrder    =    DEFAULT_MINIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MINIMAL_AGING	115	None	replace
420	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  +  1;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  /  1;  this.maximalOrder  =  maximalOrder  +  1;	  this.maximalOrder    =    maximalOrder    +    1;    this.maximalOrder    =    maximalOrder    +    1;    	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	30	None	replace
421	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
422	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
423	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  -  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
424	[BUG]  [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [CE]  cannot  find  symbol  maximumOrder  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximumOrder;  if(relativeAccuracy  ==  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  maximalOrder);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    maximalOrder);    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	73	None	replace
425	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  This.maximalOrder  =  maximalOrder  -  1;  [CE]  cannot  find  symbol  This  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder  /  1;  This.maximalOrder  =  maximalOrder  -  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder  /  1;  This.maximalOrder  =  maximalOrder  -  1;	  this.maximalOrder    =    maximalOrder    -    1;    This.maximalOrder    =    maximalOrder    -    1;    	non-compiled	[CE]  cannot  find  symbol  This	51	None	replace
426	[BUG]  [BUGGY]  REDUCTION_FACTOR  =  maximumOrder;  [CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  REDUCTION_FACTOR  =  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	REDUCTION_FACTOR  =  maximumOrder;	  REDUCTION_FACTOR    =    relativeAccuracy;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  REDUCTION_FACTOR	54	None	replace
427	[BUG]  [BUGGY]  this.maxialOrder  =  AllowedSolution.ANY_SIDE;  [CE]  cannot  find  symbol  maxialOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maxialOrder  =  AllowedSolution.ANY_SIDE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maxialOrder  =  AllowedSolution.ANY_SIDE;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	80	None	replace
428	[BUG]  [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_ORDER;  [CE]  cannot  find  symbol  ANY_ORDER  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  AllowedSolution.ANY_ORDER;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  AllowedSolution.ANY_ORDER;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  ANY_ORDER	80	None	replace
429	[BUG]  [BUGGY]  this.maximalOrder  =  allowedSolution.ANY_SIDE;  [CE]  cannot  find  symbol  allowedSolution  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  allowedSolution.ANY_SIDE;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  allowedSolution.ANY_SIDE;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    allowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  allowedSolution	80	None	replace
430	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  DEFAULT_ABSOLUTE_ACCURACY;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
431	[BUG]  [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  cannot  find  symbol  maximumOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximumOrder  =  relativeAccuracy  +  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  cannot  find  symbol  maximumOrder	85	None	replace
432	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  maximumOrder)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    DEFAULT_ABSOLUTE_ACCURACY;    }    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
433	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >  1)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
434	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  +  1;  if(maximumOrder  >)  {  this.maximumOrder  =  maximalOrder  +  1;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	  this.maximalOrder    =    maximalOrder    +    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    +    1;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
435	[BUG]  [BUGGY]  this.maximalOrder  =  1;  this.maximalOrder  =  0;  [CE]  variable  maximalOrder  might  already  have  been  assigned  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  this.maximalOrder  =  0;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    this.maximalOrder  =  0;	  	non-compiled	[CE]  variable  maximalOrder  might  already  have  been  assigned	92	None	add
436	[BUG]  [BUGGY]  this.maximalOrder  =  1;  This.maximalOrder  =  1;  [CE]  cannot  find  symbol  This  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  1;  This.maximalOrder  =  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder    =    1;    This.maximalOrder  =  1;	  	non-compiled	[CE]  cannot  find  symbol  This	92	None	add
437	[BUG]  [BUGGY]  this.maxialOrder  =  relativeAccuracy;  [CE]  cannot  find  symbol  maxialOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maxialOrder  =  relativeAccuracy;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maxialOrder  =  relativeAccuracy;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(relativeAccuracy    ==    DEFAULT_MAXIMAL_ORDER)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	3	None	replace
438	[BUG]  [BUGGY]  this.relativeAccuracy  -=  functionValueAccuracy;  [CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.relativeAccuracy  -=  functionValueAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.relativeAccuracy  -=  functionValueAccuracy;	  this.relativeAccuracy    =    functionValueAccuracy;    	non-compiled	[CE]  relativeAccuracy  has  private  access  in  BaseAbstractUnivariateRealSolver	34	None	replace
439	[BUG]  [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.maximalOrder,  0,  maximalOrder);  }  [CE]  incomparable  types:  double  and  <null>  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.maximalOrder,  0,  maximalOrder);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  null)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  System.arraycopy(relativeAccuracy,  0,  this.maximalOrder,  0,  maximalOrder);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    null)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    System.arraycopy(relativeAccuracy,    0,    this.allowed,    0,    maximalOrder);    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	11	None	replace
440	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  <  null)  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    null)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	72	None	replace
441	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  maximumOrder;  [CE]  cannot  find  symbol  minimalOrder  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  maximumOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	96	None	replace
442	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  minimalOrder;  [CE]  cannot  find  symbol  minimalOrder  [FE]              AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  minimalOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  this.minimalOrder  =  minimalOrder;	  this.maximalOrder    =    MAXIMAL_AGING;    this.minimalOrder    =    MAXIMAL_AGING;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	96	None	replace
443	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  this.maximalOrder  =  maximalOrder;  [CE]  incompatible  types  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    this.allowed  =  AllowedSolution.ANY_SIDE;  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  this.maximalOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        this.allowed    =    AllowedSolution.ANY_SIDE;    this.maximalOrder  =  AllowedSolution.ANY_SIDE;  this.maximalOrder  =  maximalOrder;	  	non-compiled	[CE]  incompatible  types	6	None	add
444	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	compilable	  [FE]  NumberIsTooSmallException  	75	3	replace
445	[BUG]  [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [FE]  NumberIsTooSmallException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximalOrder;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	compilable	  [FE]  NumberIsTooSmallException  	75	3	replace
446	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [CE]  possible  loss  of  precision  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
447	[BUG]  [BUGGY]  [FE]  NumberIsTooSmallException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  0;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	add	this.maximalOrder  =  0;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	compilable	  [FE]  NumberIsTooSmallException  	75	4	replace
448	[BUG]  [BUGGY]  this.maximalOrder  =  0;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [FE]  NumberIsTooSmallException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  0;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  0;  if(relativeAccuracy  ==  absoluteAccuracy)  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }	  this.maximalOrder    =    0;    if(relativeAccuracy    ==    absoluteAccuracy)    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	compilable	  [FE]  NumberIsTooSmallException  	75	4	replace
449	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximumOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
450	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSol  [CE]  ';'  expected  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSol  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSol	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximumOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	99	None	replace
451	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximumOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
452	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.maximumOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.maximumOrder    =    maximalOrder;    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
453	[BUG]  [BUGGY]  this.maxialOrder  =  maximumOrder;  [CE]  cannot  find  symbol  maxialOrder  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maxialOrder  =  maximumOrder;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maxialOrder  =  maximumOrder;	  this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    if(DEFAULT_MAXIMAL_ORDER    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    this.maximalOrder    =    DEFAULT_MAXIMAL_ORDER;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  cannot  find  symbol  maxialOrder	78	None	replace
454	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [CE]  ';'  expected  [FE]            TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
455	[BUG]  [BUGGY]  this.allowed  =  relativeAccuracy;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CE]  incompatible  types  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  relativeAccuracy;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  relativeAccuracy;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  incompatible  types	100	None	replace
456	[BUG]  [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximalOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [CE]  ';'  expected  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximalOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  RelativeAccuracy.ANY_SIDE;  if(relativeAccuracy  >  maximalOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
457	[BUG]  [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_S  [CE]  ';'  expected  [FE]                  TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_S  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  AllowedSolution.ANY_SIDE;  if(relativeAccuracy  >  maximumOrder)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_S	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    >    maximumOrder)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
458	[BUG]  [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [CE]  variable  maximalOrder  might  not  have  been  initialized  [FE]    NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(maximalOrder,  0,  true);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  variable  maximalOrder  might  not  have  been  initialized	67	None	replace
459	[BUG]  [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }  [CE]  variable  maximalOrder  might  not  have  been  initialized  [FE]      NumberIsTooSmallException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }	          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    0,    true);    }    	non-compiled	[CE]  variable  maximalOrder  might  not  have  been  initialized	67	None	replace
460	[BUG]  [BUGGY]  this.maximalOrder  =  maximOrder  +  1;  [CE]  cannot  find  symbol  maximOrder  [FE]              TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  maximOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  maximOrder  +  1;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  cannot  find  symbol  maximOrder	82	None	replace
461	[BUG]  [BUGGY]  this.minimalOrder  =  maximalOrder  +  1;  [CE]  cannot  find  symbol  minimalOrder  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.minimalOrder  =  maximalOrder  +  1;  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.minimalOrder  =  maximalOrder  +  1;	  this.maximalOrder    =    DEFAULT_ABSOLUTE_ACCURACY    +    1;    	non-compiled	[CE]  cannot  find  symbol  minimalOrder	82	None	replace
462	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
463	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absolute  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absolute  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absolute	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
464	[BUG]  [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal  [BUGGY]      this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.maximalOrder  =  relativeAccuracy  -  1;  if(relativeAccuracy  >  maximalOrder)  {  this.maximalOrder  =  maximalOrder  -  1;  }  else  {  throw  new  NumberIsTooSmallException(relativeAccuracy,  absoluteAccuracy,  functionVal	  this.maximalOrder    =    maximalOrder    -    1;    if(relativeAccuracy    >    maximumOrder)    {    this.maximalOrder    =    maximalOrder    -    1;    }    else    {    throw    new    NumberIsTooSmallException(relativeAccuracy,    absoluteAccuracy,    functionValueAccuracy);    }    	non-compiled	[CE]  ')'  expected	68	None	replace
465	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  Integer.MAXIMAL_AGING;  }  [CE]  cannot  find  symbol  MAXIMAL_AGING  [FE]    TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  Integer.MAXIMAL_AGING;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  Integer.MAXIMAL_AGING;  }	  	non-compiled	[CE]  cannot  find  symbol  MAXIMAL_AGING	62	None	add
466	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.maximalOrder  =  relativeAccuracy;  [CE]  possible  loss  of  precision  [FE]      TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  this.maximalOrder  =  relativeAccuracy;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    this.maximalOrder  =  relativeAccuracy;	  	non-compiled	[CE]  possible  loss  of  precision	62	None	add
467	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  }  [CE]  incompatible  types  [FE]        TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  AllowedSolution.ANY_SIDE;  }	  	non-compiled	[CE]  incompatible  types	62	None	add
468	[BUG]  [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  MaximumOrder.ANY_SIDE;  }  [CE]  cannot  find  symbol  MaximumOrder  [FE]          TooManyEvaluationsException    [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]          this.allowed    =    AllowedSolution.ANY_SIDE;    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  else  {  this.allowed  =  AllowedSolution.ANY_SIDE;  }  if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  MaximumOrder.ANY_SIDE;  }  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	                this.allowed        =        AllowedSolution.ANY_SIDE;        if(relativeAccuracy    ==    absoluteAccuracy)    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    else    {    this.allowed    =    AllowedSolution.ANY_SIDE;    }    if(relativeAccuracy  ==  absoluteAccuracy)  {  this.maximalOrder  =  maximalOrder;  }  else  {  this.maximalOrder  =  MaximumOrder.ANY_SIDE;  }	  	non-compiled	[CE]  cannot  find  symbol  MaximumOrder	62	None	add
469	[BUG]  [BUGGY]  this.allowed  =  Integer.DEFAULT_VALUE;  [CE]  cannot  find  symbol  DEFAULT_VALUE  [FE]                TooManyEvaluationsException      [CONTEXT]      public  BracketingNthOrderBrentSolver(final  double  relativeAccuracy,  final  double  absoluteAccuracy,  final  double  functionValueAccuracy,  final  int  maximalOrder)  throws  NumberIsTooSmallException  {  super(relativeAccuracy,  absoluteAccuracy,  functionValueAccuracy);  if  (maximalOrder  <  2)  {  throw  new  NumberIsTooSmallException(maximalOrder,  2,  true);  }      [BUGGY]  this.allowed  =  Integer.DEFAULT_VALUE;  [BUGGY]      this.maximalOrder  =  maximalOrder;  this.allowed  =  AllowedSolution.ANY_SIDE;  }  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  <init>  [RETURN_TYPE]  BracketingNthOrderBrentSolver(double,double,double,int)  final  double  relativeAccuracy  final  double  absoluteAccuracy  final  double  functionValueAccuracy  final  int  maximalOrder  [VARIABLES]  AllowedSolution  allowed  boolean  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absoluteAccuracy  functionValueAccuracy  relativeAccuracy  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  maximalOrder  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.5	128	128	1	replace	this.allowed  =  Integer.DEFAULT_VALUE;	  this.allowed    =    Integer.DEFAULT_MAXIMAL_ORDER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_VALUE	102	None	replace
