bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
2	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
3	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
4	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  if  (((xTol  -  absYB)  <  =  xA)||(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if  (((xTol  -  absYB)  <  =  xA)||(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if  (((xTol  -  absYB)  <  =  xA)||(FastMath.max(absY,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
8	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
9	[BUG]  [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xTol));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xTol));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
10	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
11	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yB);	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
12	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(y);	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
13	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yA);	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xB);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
15	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
17	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
19	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
21	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	compilable	  [FE]  AssertionError  	20	7	add
23	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	compilable	  [FE]  AssertionError  	20	7	add
24	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xB);	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
25	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xA);	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
26	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
27	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&  (FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&  (FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&  (FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
28	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&  (FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&  (FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&  (FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
29	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(absY,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	14	7	add
31	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	14	7	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	14	7	add
33	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	compilable	  [FE]  AssertionError  	14	7	add
34	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	14	None	add
35	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);  [CE]  cannot  find  symbol  fastMath  [FE]          AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.abs(xTol);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	14	None	add
36	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [CE]  cannot  find  symbol  yTol  [FE]            AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);	  	non-compiled	[CE]  cannot  find  symbol  yTol	14	None	add
37	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
38	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	      int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
39	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	      int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
40	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	      int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
41	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
42	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
43	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
44	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
45	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
46	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xB)||(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xB)||(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	3	None	replace
47	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xA)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
50	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
51	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
52	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
53	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
54	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
55	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	11	5	replace
57	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	11	5	replace
58	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  1)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
62	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
63	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
64	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
65	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xTol)||    (FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
66	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xTol)||    (FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(yA  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xTol)||    (FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
68	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
69	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
70	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
71	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(xA,  FastMath.abs(yB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
72	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yA,  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yA,  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
73	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(xA,  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	13	5	replace
75	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	13	5	replace
76	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	13	5	replace
78	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	13	5	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	13	5	replace
80	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]                    TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	13	5	replace
81	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
82	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
83	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
84	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
85	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
86	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
87	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	26	5	replace
89	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	26	5	replace
90	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
91	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(yTol);	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
95	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	11	5	replace
97	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	11	5	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	11	3	replace
99	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	11	3	replace
100	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
101	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  cannot  assign  a  value  to  final  variable  xTol  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  xTol	14	None	add
102	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getrelativeAccuracy()  *  FastMath.abs(xTol);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xTol)||    (FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	12	5	replace
104	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xTol)||    (FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	12	5	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xTol)||    (FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	12	5	replace
106	[BUG]  [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  >=  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xTol)||    (FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	12	5	replace
107	[BUG]  [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	int  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      int    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
108	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
110	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  	compilable	  [FE]  AssertionError  	20	7	add
111	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  0);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  0);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol,  0);	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	25	5	replace
113	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	25	5	replace
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	25	5	replace
115	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	25	5	replace
116	[BUG]  [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	Double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
117	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
118	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(yB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
119	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
120	[BUG]  [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  absYB  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	26	5	replace
122	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	26	5	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	26	4	replace
124	[BUG]  [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  ==  xTol)||(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	26	4	replace
125	[BUG]  [BUGGY]  if  (((xTol  -  absYB)  <  =  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if  (((xTol  -  absYB)  <  =  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if  (((xTol  -  absYB)  <  =  xB)||(FastMath.max(xA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	24	3	replace
127	[BUG]  [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	24	3	replace
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	24	3	replace
129	[BUG]  [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)!=  xTol)&&(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	24	3	replace
130	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
131	[BUG]  [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xB)  <  =  xTol)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	10	5	replace
133	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	10	5	replace
134	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
135	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(absY,  xTol)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	3	None	replace
136	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(yB,  FastMath.abs(xB));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
137	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	1	5	replace
139	[BUG]  [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)!=  xB)||(FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	1	5	replace
140	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
141	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xTol);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	14	None	add
142	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol);  [CE]  no  suitable  method  found  for  min(double)  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.abs(xTol);  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xTol);	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	14	None	add
143	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
144	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA));	      double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(xA,    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
145	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  0)||  (FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
146	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	      double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
147	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  xTol)>  getFunctionValueAccuracy()))  {	  if    (((xTol    -    xA)    <    =    xB)||(FastMath.max(absY,    xTol)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
148	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(absYA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
149	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)||(FastMath.max(yA,  yB)>  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(absYA,    yB)>    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
150	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	      final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA));    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
151	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  xA)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  =  xA)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  xA)&&(FastMath.max(yA,  absYB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
152	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  xTol)&&(FastMath.max(yA,  absYB)>  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
153	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    xTol)&&    (FastMath.max(absYA,    absYB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
154	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	      final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
155	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(xA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||    (FastMath.max(xA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
156	[BUG]  [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]      xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	        xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	20	None	add
157	[BUG]  [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xTol  -  xA)  <  =  xB)&&(FastMath.max(yA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xTol    -    xA)    <    =    xTol)||(FastMath.max(yA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
158	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(xA,  FastMath.abs(xB));	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
159	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(absYA,  FastMath.abs(xA));  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(absYA,  FastMath.abs(xA));  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(absYA,  FastMath.abs(xA));	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
160	[BUG]  [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  yB);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  yB);  [BUGGY]    if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(xA,  yB);	      xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.abs(xTol);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
161	[BUG]  [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [CE]  class,  interface,  or  enum  expected  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xTol),  FastMath.abs(xB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
162	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
163	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                  TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yTol),  FastMath.abs(yB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
164	[BUG]  [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  class,  interface,  or  enum  expected  [FE]                    TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	      	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
165	[BUG]  [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  illegal  start  of  expression  [FE]        TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  =  0)&&(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
166	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [CE]  cannot  find  symbol  absY  [FE]          TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	non-compiled	[CE]  cannot  find  symbol  absY	10	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	10	4	replace
168	[BUG]  [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]            TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  >=  0)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	10	4	replace
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	add	if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	10	5	replace
170	[BUG]  [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [FE]  AssertionError  [FE]              TooManyEvaluationsException    [CONTEXT]    double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));    [BUGGY]  if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  return  (yA  <=  0)  ?  xA  :  xB;  case  ABOVE_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	213	213	1	replace	if(((xA  -  xB)  <  0)||(FastMath.max(yA,  xB)  <  getFunctionValueAccuracy()))  {	  if(((xA    -    xB)    <    =    0)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()))    {    	compilable	  [FE]  AssertionError  	10	5	replace
